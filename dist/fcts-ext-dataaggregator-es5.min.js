!function(e){function t(i){if(n[i])return n[i].exports;var o=n[i]={exports:{},id:i,loaded:!1};return e[i].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";var i=n(1),o=n(2);o.register("extension",["data-aggregator",function(e){var t=this,n=t.extAPI;console.log(e),n(new i)}])},function(e,t){(function(t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(){n(this,e),this.appliedAggregation={timePeriod:null,timePeriodMultiplier:0,aggregationMethod:null}}return i(e,[{key:"setAggregation",value:function(e){return this.aggregation=e,!0}},{key:"reset",value:function(){}},{key:"init",value:function(e){e("X-Axis","Y-Axis",function(e,n){t.x=e,t.y=n})}},{key:"placeInCanvas",value:function(){var e=this.setAggregation({timePeriod:"month",timePeriodMultiplier:3,aggregationMethod:"sum"});console.log(this.aggregation,e)}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}},{key:"aggregation",get:function(){return this.appliedAggregation},set:function(e){this.appliedAggregation.timePeriod=e.timePeriod,this.appliedAggregation.timePeriodMultiplier=e.timePeriodMultiplier,this.appliedAggregation.aggregationMethod=e.aggregationMethod}}]),e}();e.exports=o}).call(t,function(){return this}())},function(e,t){"use strict";var n=function(){};n.register=function(e,t){var n=t[0],i=t[1];console.log("Currently active extension: "+n),i.bind(this,565)()},n.getComponent=function(e,t){var n={x:24,y:56,width:100,height:20,index:4};return"api"===e&&"toolbox"===t?n:null},n.extAPI=function(e){e.init(function(){for(var e=[],t=arguments[arguments.length-1],n=0;n<arguments.length-1;n++)"X-Axis"===arguments[n]?e.push(156772):"Y-Axis"===arguments[n]&&e.push(156765);t.apply(this,e)}),e.placeInCanvas(),e.draw(),e.dispose()},e.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,