/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var AggregatorGetter = __webpack_require__(2);
	
	;(function (env, factory) {
	  if (( false ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
	    module.exports = env.document ? factory(env) : function (win) {
	      if (!win.document) {
	        throw new Error('Window with document not present');
	      }
	      return factory(win, true);
	    };
	  } else {
	    env.Aggregator = factory(env, true);
	  }
	})(typeof window !== 'undefined' ? window : undefined, function (_window, windowExists) {
	  var FC = _window.FusionCharts;
	
	  FC.register('extension', ['private', 'data-aggregator', function () {
	    FC.registerComponent('extensions', 'data-aggregator', AggregatorGetter({ FC: FC }));
	  }]);
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	module.exports = function (dep) {
	  /**
	   * Class representing the Data Aggregator.
	   */
	  var Aggregator = function () {
	    /**
	     * Create a Aggregator.
	     * @typedef {object} Aggregator.aggregation
	     * @property {string} timePeriod - The time interval of aggregation.
	     * @property {number} timePeriodMultiplier - The multiplier of time interval.
	     * @property {string} aggregationMethod - The method applied to aggregate.
	     */
	    function Aggregator() {
	      _classCallCheck(this, Aggregator);
	
	      /**
	       * @private
	       */
	      this.appliedAggregation = {
	        binSize: null,
	        aggregationMethod: null
	      };
	      this.config = {};
	    }
	
	    /**
	     * An object representing the timePeriod, timePeriodMultiplier, aggregationMethod.
	     * @type {Aggregator.aggregation}
	     */
	
	
	    _createClass(Aggregator, [{
	      key: 'getAvailablelAggreagation',
	
	
	      /**
	       * Sets available aggregation options in configuration of extension
	       * @private
	       */
	      value: function getAvailablelAggreagation() {
	        var config = this.config,
	            dataAgg = config.dataAgg,
	            avlTimePeriods = config.avlTimePeriods = dataAgg.getAggregationTimeRules(),
	            i,
	            len;
	
	        config.avlTimeMultiplier = [];
	        len = avlTimePeriods.length;
	
	        for (i = 0; i < len; i++) {
	          config.avlTimeMultiplier.push(avlTimePeriods[i].possibleFactors);
	        }
	      }
	
	      /**
	       * Calculates valid aggregation time periods and corresponding multipliers
	       * @private
	       */
	
	    }, {
	      key: 'getValidAggregation',
	      value: function getValidAggregation() {
	        var self = this,
	            config = self.config,
	            tsObject = self.tsObject,
	            dataAgg = config.dataAgg,
	            i,
	            j,
	            len1,
	            len2,
	            avlTimePeriods,
	            avlTimeMultiplier,
	
	        // minNumOfPlot = 5,
	        maxNumOfPlot = config.composition.reactiveModel.model['max-plot-point'],
	            multipliersArr,
	            currentTimeLength,
	            timePeriod,
	            time,
	            expectedTime,
	            multiplier,
	            minBinSize;
	        // maxBinSize;
	
	        config.currentTimeLength = tsObject.globalReactiveModel.model['x-axis-visible-range-end'] - tsObject.globalReactiveModel.model['x-axis-visible-range-start'];
	
	        avlTimePeriods = config.avlTimePeriods;
	        avlTimeMultiplier = config.avlTimeMultiplier;
	        currentTimeLength = config.currentTimeLength;
	
	        config.minBinSize = minBinSize = currentTimeLength / maxNumOfPlot;
	        // config.maxBinSize = maxBinSize = currentTimeLength / minNumOfPlot;
	
	        config.validTimePeriod = [];
	        config.validTimePeriodMultiplier = [];
	        config.avlAggMethods = dataAgg.getAllAggregationMethod();
	
	        for (i = 0, len1 = avlTimePeriods.length; i < len1; i++) {
	          timePeriod = avlTimePeriods[i].name;
	          time = avlTimePeriods[i].interval;
	          multipliersArr = [];
	
	          for (j = 0, len2 = avlTimeMultiplier[i].length; j < len2; j++) {
	            multiplier = avlTimeMultiplier[i][j];
	            expectedTime = multiplier * time;
	
	            // if ((expectedTime >= minBinSize) && (expectedTime <= maxBinSize)) {
	            if (expectedTime >= minBinSize) {
	              multipliersArr.push(avlTimeMultiplier[i][j]);
	            }
	          }
	          if (multipliersArr.length > 0) {
	            config.validTimePeriodMultiplier.push(multipliersArr);
	            config.validTimePeriod.push(timePeriod);
	          }
	        }
	        // console.log('Time Period: ', config.validTimePeriod);
	        // console.log('Number Of Multipliers: ', config.validTimePeriodMultiplier);
	        // console.log('Methods: ', config.avlAggMethods);
	      }
	    }, {
	      key: 'getCurrentAggreation',
	      value: function getCurrentAggreation() {
	        var self = this,
	            config = self.config,
	            dataAgg = config.dataAgg,
	            composition = config.composition,
	            model = composition.reactiveModel,
	            currentAggMethod,
	            suitableInterval,
	            binSize;
	
	        binSize = model.prop('bin-size') - 1;
	
	        if (isFinite(binSize)) {
	          config.canAggregate = true;
	          suitableInterval = dataAgg.timeRules.getSuitableInterval(binSize);
	          currentAggMethod = model.prop('aggregation-fn');
	        } else {
	          config.canAggregate = false;
	          suitableInterval = {
	            name: '',
	            step: ''
	          };
	          config.validTimePeriod = [suitableInterval.name];
	          config.validTimePeriodMultiplier = [[suitableInterval.step]];
	          config.avlAggMethods = {
	            'invalid': {
	              formalName: '',
	              nickName: ''
	            }
	          };
	          currentAggMethod = config.avlAggMethods['invalid'];
	        }
	
	        return {
	          timePeriod: suitableInterval.name,
	          timePeriodMultiplier: suitableInterval.step,
	          aggregationMethod: {
	            value: currentAggMethod.nickName,
	            text: currentAggMethod.formalName
	          }
	        };
	      }
	    }, {
	      key: 'init',
	      value: function init(require) {
	        var self = this,
	            config = self.config,
	            toolboxComponent = config.toolboxComponent = {},
	            api,
	            store,
	            composition,
	            saveTo = 'tsObject',
	            requiredParams = ['graphics', 'globalReactiveModel', 'chart', 'spaceManagerInstance', 'chartInstance', 'smartLabel', function acquire() {
	          var i = 0,
	              ii = requiredParams.length - 1,
	              param = '';
	          self[saveTo] = self[saveTo] || {};
	          self.requiredParams = {};
	          for (i = 0; i < ii; ++i) {
	            param = requiredParams[i];
	            self[saveTo][param] = arguments[i];
	          }
	          // onInit(self[saveTo]);
	        }];
	        require(requiredParams);
	
	        api = self.tsObject.chartInstance.apiInstance;
	        store = api.getComponentStore();
	        config.composition = composition = store.getCanvasByIndex(0).composition;
	        config.dataAgg = composition.impl.getDataAggregator();
	
	        toolboxComponent.toolbox = dep.FC.getComponent('api', 'toolbox');
	        toolboxComponent.config = {};
	
	        self.toolbars = [];
	
	        self.measurement = {};
	
	        self.toolbars.push(self.createToolbar());
	
	        window.Aggregator = self;
	        return self;
	      }
	    }, {
	      key: 'createToolbar',
	      value: function createToolbar() {
	        var self = this,
	            group1,
	            group2,
	            group3,
	            toolbar,
	            timeMulSelectMenu,
	            timePeriodSelectMenu,
	            aggMethodSelectMenu,
	            resetButton,
	            applyButton,
	            config = self.config,
	            tsObject = self.tsObject,
	            label,
	            toolboxComponent = config.toolboxComponent,
	            toolbox = toolboxComponent.toolbox,
	            toolboxCompConfig = toolboxComponent.config,
	            HorizontalToolbar = toolbox.HorizontalToolbar,
	            ComponentGroup = toolbox.ComponentGroup,
	            SymbolStore = toolbox.SymbolStore,
	            graphics = tsObject.graphics,
	            paper = graphics.paper,
	            container = graphics.container,
	            chart = tsObject.chart,
	            smartLabel = tsObject.smartLabel,
	            multiplierVal,
	            timeMulSelectMenuOpt,
	            timePeriodMenuDisableConfig,
	            timeMultiplierMenuDisableConfig,
	            aggMethodMenuDisableonfig,
	            dropDownMenuStyle,
	            applyButtonDisableConfig,
	            resetButtonDisableConfig,
	            style,
	            dependencies = {
	          paper: paper,
	          chart: chart,
	          smartLabel: smartLabel,
	          chartContainer: container
	        },
	            apply = function apply(set) {
	          var model = config.composition.reactiveModel,
	              timePeriodVal = timePeriodSelectMenu.value(),
	              timePeriodMultiplierVal = timeMulSelectMenu.value(),
	              aggMethodSelectMenuVal = aggMethodSelectMenu.value(),
	              keys,
	              binSize,
	              timeInterval,
	              aggregation = self.aggregation,
	              canvas = config.composition.impl;
	
	          var _iteratorNormalCompletion = true;
	          var _didIteratorError = false;
	          var _iteratorError = undefined;
	
	          try {
	            for (var _iterator = config.avlTimePeriods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	              keys = _step.value;
	
	              if (keys.name === timePeriodVal) {
	                timeInterval = keys.interval;
	                break;
	              }
	            }
	          } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	              }
	            } finally {
	              if (_didIteratorError) {
	                throw _iteratorError;
	              }
	            }
	          }
	
	          binSize = timeInterval * Number(timePeriodMultiplierVal);
	          if (set && isFinite(model.prop('bin-size'))) {
	            model.lock().prop('bin-size-ext', binSize).prop('aggregation-fn-ext', config.avlAggMethods[aggMethodSelectMenuVal]).unlock();
	            aggregation.binSize = binSize;
	            aggregation.aggregationMethod = aggMethodSelectMenuVal;
	            applyButton.updateVisual('disabled');
	            resetButton.updateVisual('enabled');
	          } else {
	            canvas.resetAggregation();
	            aggregation.binSize = null;
	            aggregation.aggregationMethod = null;
	            resetButton.updateVisual('disabled');
	          }
	        },
	            timePeriodOnChange = function timePeriodOnChange() {
	          var timePeriodVal = timePeriodSelectMenu.value(),
	              timePeriodMultiplierVal = timeMulSelectMenu.value(),
	              prevTimePeroidMulVal = timePeriodMultiplierVal,
	              validTimePeriod = config.validTimePeriod,
	              validTimePeriodMultiplier = config.validTimePeriodMultiplier,
	              indexOfTimeUnit,
	              indexOfTimeMul;
	
	          indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);
	          indexOfTimeMul = validTimePeriodMultiplier[indexOfTimeUnit].indexOf(Number(timePeriodMultiplierVal));
	
	          timeMulSelectMenuOpt = [];
	          var _iteratorNormalCompletion2 = true;
	          var _didIteratorError2 = false;
	          var _iteratorError2 = undefined;
	
	          try {
	            for (var _iterator2 = validTimePeriodMultiplier[indexOfTimeUnit][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	              multiplierVal = _step2.value;
	
	              timeMulSelectMenuOpt.push({
	                name: multiplierVal.toString(),
	                value: multiplierVal.toString()
	              });
	            }
	          } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                _iterator2.return();
	              }
	            } finally {
	              if (_didIteratorError2) {
	                throw _iteratorError2;
	              }
	            }
	          }
	
	          timeMulSelectMenu.updateList(timeMulSelectMenuOpt);
	
	          if (indexOfTimeMul < 0) {
	            timeMulSelectMenu.value(validTimePeriodMultiplier[indexOfTimeUnit][0].toString());
	          } else {
	            timeMulSelectMenu.value(prevTimePeroidMulVal);
	          }
	        },
	            onChange = function onChange(type) {
	          var currentAgg = self.getCurrentAggreation();
	
	          if (currentAgg.timePeriodMultiplier.toString() !== timeMulSelectMenu.value() || currentAgg.timePeriod !== timePeriodSelectMenu.value() || currentAgg.aggregationMethod.value !== aggMethodSelectMenu.value()) {
	            applyButton.updateVisual('enabled');
	          } else {
	            applyButton.updateVisual('disabled');
	          }
	        };
	
	        group1 = new ComponentGroup(dependencies);
	        group2 = new ComponentGroup(dependencies);
	        group3 = new ComponentGroup(dependencies);
	
	        toolbar = new HorizontalToolbar(dependencies);
	
	        config.usrConfig = {
	          enabled: true,
	          posWrtCanvas: 'top',
	          alignment: 'left',
	          orientation: 'horizontal',
	          styles: {
	            timeMultiplierInputField: {
	              active: {
	                'fill': '#fff',
	                'labelFill': '#696969',
	                'stroke': '#c8cecd',
	                'strokeWidth': 1,
	                'hoverStroke': '#696969',
	                'hoverStrokeWidth': 1,
	                'radius': 1,
	                'width': 45,
	                'height': 22
	              },
	              inactive: {
	                'fill': '#fff',
	                'stroke-width': 1,
	                'stroke': 'rgb(192, 192, 192)',
	                'labelFill': '#000'
	              }
	            },
	            timePeriodInputField: {
	              active: {
	                'fill': '#fff',
	                'labelFill': '#696969',
	                'stroke': '#c8cecd',
	                'strokeWidth': 1,
	                'hoverStroke': '#696969',
	                'hoverStrokeWidth': 1,
	                'radius': 1,
	                'width': 75,
	                'height': 22
	              },
	              inactive: {
	                'fill': '#fff',
	                'stroke-width': 1,
	                'stroke': 'rgb(192, 192, 192)',
	                'labelFill': '#000'
	              }
	            },
	            aggregationMethodInputField: {
	              active: {
	                'fill': '#fff',
	                'labelFill': '#696969',
	                'stroke': '#c8cecd',
	                'strokeWidth': 1,
	                'hoverStroke': '#696969',
	                'hoverStrokeWidth': 1,
	                'radius': 1,
	                'width': 100,
	                'height': 22
	              },
	              inactive: {
	                'fill': '#fff',
	                'stroke-width': 1,
	                'stroke': 'rgb(192, 192, 192)',
	                'labelFill': '#000'
	              }
	            },
	            dropDown: {
	              active: {
	                'fill': '#898b8b',
	                'labelFill': '#fff'
	              },
	              normal: {
	                'fill': '#fff',
	                'labelFill': '#000',
	                'hoverFill': '#e6e8e8',
	                'hoverLabelFill': '#000'
	              }
	            },
	            applyButton: {
	              active: {
	                'fill': '#555',
	                'labelFill': '#f3f3f3',
	                'stroke': '#c8cecd',
	                'strokeWidth': 1,
	                'hoverFill': '#555',
	                'hoverStrokeWidth': 1,
	                'hoverStroke': '',
	                'radius': 1,
	                'width': 30,
	                'height': 20
	              },
	              inactive: {
	                'fill': '#bebebe',
	                'stroke-width': 3,
	                'stroke': 'rgb(192, 192, 192)',
	                'labelFill': '#f3f3f3'
	              }
	            },
	            resetButton: {
	              active: {
	                'fill': '#898b8b',
	                'labelFill': '#f3f3f3',
	                'stroke': '#c8cecd',
	                'strokeWidth': 1,
	                'hoverFill': '#898b8b',
	                'hoverStrokeWidth': 1,
	                'hoverStroke': '',
	                'radius': 1,
	                'width': 30,
	                'height': 20
	              },
	              inactive: {
	                'fill': '#bebebe',
	                'stroke-width': 3,
	                'stroke': 'rgb(192, 192, 192)',
	                'labelFill': '#f3f3f3'
	              }
	            },
	            base: {
	              font: {
	                'fontSize': 11
	              }
	            }
	          }
	        };
	
	        style = config.usrConfig.styles || {};
	
	        style = {
	          timeMultiplierInputField: {
	            active: style.timeMultiplierInputField && style.timeMultiplierInputField.active || {},
	            inactive: style.timeMultiplierInputField && style.timeMultiplierInputField.inactive || {}
	          },
	          timePeriodInputField: {
	            active: style.timePeriodInputField && style.timePeriodInputField.active || {},
	            inactive: style.timePeriodInputField && style.timePeriodInputField.inactive || {}
	          },
	          aggregationMethodInputField: {
	            active: style.aggregationMethodInputField && style.aggregationMethodInputField.active || {},
	            inactive: style.aggregationMethodInputField && style.aggregationMethodInputField.inactive || {}
	          },
	          dropDown: {
	            active: style.dropDown && style.dropDown.active || {},
	            normal: style.dropDown && style.dropDown.normal || {}
	          },
	          applyButton: {
	            active: style.applyButton && style.applyButton.active || {},
	            inactive: style.applyButton && style.applyButton.inactive || {}
	          },
	          resetButton: {
	            active: style.resetButton && style.resetButton.active || {},
	            inactive: style.resetButton && style.resetButton.inactive || {}
	          },
	          base: {
	            font: style.base && style.base.font || {}
	          }
	        };
	
	        group1.setConfig({
	          fill: '#fff',
	          borderThickness: 0
	        });
	        group2.setConfig({
	          fill: '#fff',
	          borderThickness: 0
	        });
	        group3.setConfig({
	          fill: '#fff',
	          borderThickness: 0
	        });
	
	        toolbar.setConfig({
	          fill: '#fff',
	          borderThickness: 0
	        });
	
	        timePeriodMenuDisableConfig = {
	          disabled: {
	            config: {
	              disabled: style.timeMultiplierInputField.inactive
	            }
	          }
	        };
	
	        timeMultiplierMenuDisableConfig = {
	          disabled: {
	            config: {
	              disabled: style.timePeriodInputField.inactive
	            }
	          }
	        };
	
	        aggMethodMenuDisableonfig = {
	          disabled: {
	            config: {
	              disabled: style.aggregationMethodInputField.inactive
	            }
	          }
	        };
	
	        applyButtonDisableConfig = {
	          disabled: {
	            config: {
	              disabled: style.applyButton.inactive
	            }
	          }
	        };
	
	        resetButtonDisableConfig = {
	          disabled: {
	            config: {
	              disabled: style.resetButton.inactive
	            }
	          }
	        };
	
	        dropDownMenuStyle = {
	          selected: {
	            container: {
	              style: {
	                fill: style.dropDown.active.fill
	              }
	            },
	            text: {
	              style: {
	                fill: style.dropDown.active.labelFill
	              }
	            }
	          },
	          normal: {
	            container: {
	              style: {
	                fill: style.dropDown.normal.fill
	              }
	            },
	            text: {
	              style: {
	                fill: style.dropDown.normal.labelFill
	              }
	            }
	          },
	          hover: {
	            container: {
	              style: {
	                fill: style.dropDown.normal.hoverFill
	              }
	            },
	            text: {
	              style: {
	                fill: style.dropDown.normal.hoverLabelFill
	              }
	            }
	          }
	        };
	
	        label = new toolbox.Label('Aggregate Data:', dependencies, {
	          text: {
	            style: {
	              'font-size': '14',
	              'fill': '#696969'
	            }
	          }
	        });
	
	        toolboxCompConfig.timePeriodSelectMenu = timePeriodSelectMenu = new toolbox.SelectSymbol({}, dependencies, [], Object.assign(style.timePeriodInputField.active, {
	          btnTextStyle: {
	            fontSize: style.base.font.fontSize
	          },
	          dropDownMenu: dropDownMenuStyle
	        }));
	        timePeriodSelectMenu.setStateConfig(timePeriodMenuDisableConfig);
	
	        toolboxCompConfig.timeMulSelectMenu = timeMulSelectMenu = new toolbox.SelectSymbol({}, dependencies, [], Object.assign(style.timeMultiplierInputField.active, {
	          btnTextStyle: {
	            fontSize: style.base.font.fontSize
	          },
	          dropDownMenu: dropDownMenuStyle
	        }));
	        timeMulSelectMenu.setStateConfig(timeMultiplierMenuDisableConfig);
	
	        toolboxCompConfig.aggMethodSelectMenu = aggMethodSelectMenu = new toolbox.SelectSymbol({}, dependencies, [], Object.assign(style.aggregationMethodInputField.active, {
	          btnTextStyle: {
	            fontSize: style.base.font.fontSize
	          },
	          dropDownMenu: dropDownMenuStyle
	        }));
	        aggMethodSelectMenu.setStateConfig(aggMethodMenuDisableonfig);
	
	        toolboxCompConfig.applyButton = applyButton = new toolbox.Symbol('APPLY', true, dependencies, Object.assign(style.applyButton.active, {
	          btnTextStyle: {
	            fontSize: style.base.font.fontSize
	          }
	        })).attachEventHandlers({
	          click: function click() {
	            apply(1);
	          }
	        });
	        applyButton.setStateConfig(applyButtonDisableConfig);
	
	        toolboxCompConfig.resetButton = resetButton = new toolbox.Symbol('RESET', true, dependencies, Object.assign(style.resetButton.active, {
	          btnTextStyle: {
	            fontSize: style.base.font.fontSize
	          }
	        })).attachEventHandlers({
	          click: function click() {
	            apply(0);
	          }
	        });
	        resetButton.setStateConfig(resetButtonDisableConfig);
	
	        group1.addSymbol(label);
	        group2.addSymbol(timeMulSelectMenu);
	        group2.addSymbol(timePeriodSelectMenu);
	        group2.addSymbol(aggMethodSelectMenu);
	        group3.addSymbol(applyButton);
	        group3.addSymbol(resetButton);
	
	        SymbolStore.register('textBoxIcon', function (x, y, rad, w, h, padX, padY) {
	          var x1 = x - w / 2 + padX / 2,
	              x2 = x + w / 2 - padX / 2,
	              y1 = y - h / 2 + padY / 2,
	              y2 = y + h / 2 - padY / 2;
	
	          return ['M', x1, y1, 'L', x2, y1, 'L', x2, y2, 'L', x1, y2, 'Z'];
	        });
	
	        timePeriodSelectMenu.attachEventHandlers({
	          textOnChange: function textOnChange() {
	            timePeriodOnChange();
	            onChange();
	          }
	        });
	
	        timeMulSelectMenu.attachEventHandlers({
	          textOnChange: function textOnChange() {
	            onChange();
	          }
	        });
	
	        aggMethodSelectMenu.attachEventHandlers({
	          textOnChange: function textOnChange() {
	            onChange();
	          }
	        });
	
	        toolbar.addComponent(group1);
	        toolbar.addComponent(group2);
	        toolbar.addComponent(group3);
	
	        return toolbar;
	      }
	    }, {
	      key: 'getLogicalSpace',
	      value: function getLogicalSpace(availableWidth, availableHeight) {
	        var logicalSpace,
	            width = 0,
	            height = 0,
	            i,
	            ln;
	
	        for (i = 0, ln = this.toolbars.length; i < ln; i++) {
	          logicalSpace = this.toolbars[i].getLogicalSpace(availableWidth, availableHeight);
	          width = Math.max(logicalSpace.width, width);
	          height += logicalSpace.height;
	          this.toolbars[i].width = logicalSpace.width;
	          this.toolbars[i].height = logicalSpace.height;
	        }
	        height += this.padding;
	        return {
	          width: width,
	          height: height
	        };
	      }
	    }, {
	      key: 'placeInCanvas',
	      value: function placeInCanvas(containerInstance) {
	        var _self = this,
	            tsObject = _self.tsObject;
	
	        _self.padding = 5;
	        tsObject.spaceManagerInstance.add([{
	          name: function name() {
	            return 'DataAggregator';
	          },
	          ref: function ref(obj) {
	            return obj['0'];
	          },
	          self: function self() {
	            return _self;
	          },
	          priority: function priority() {
	            return 2;
	          },
	          layout: function layout(obj) {
	            return obj.inline;
	          },
	          orientation: [{
	            type: function type(obj) {
	              return obj.horizontal;
	            },
	            position: [{
	              type: function type(obj) {
	                return obj.top;
	              },
	              alignment: [{
	                type: function type(obj) {
	                  return obj.left;
	                },
	                dimensions: [function () {
	                  var parent = this.getParentComponentGroup();
	                  return _self.getLogicalSpace(parent.getWidth(), parent.getHeight());
	                }]
	              }]
	            }]
	          }]
	        }]);
	      }
	    }, {
	      key: 'setDrawingConfiguration',
	      value: function setDrawingConfiguration(x, y, width, height, group) {
	        var mes = this.measurement;
	        mes.x = x;
	        mes.y = y;
	        mes.width = width;
	        mes.height = height;
	
	        this.parentGroup = group;
	
	        return this;
	      }
	    }, {
	      key: 'draw',
	      value: function draw(x, y, width, height, group) {
	        var self = this,
	            config = self.config,
	            toolboxCompConfig = config.toolboxComponent.config,
	            timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,
	            timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,
	            aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,
	            applyButton = toolboxCompConfig.applyButton,
	            resetButton = toolboxCompConfig.resetButton,
	            measurement = self.measurement,
	            toolbars = self.toolbars,
	            ln,
	            i,
	            toolbar,
	            model = config.composition.reactiveModel,
	            dataAgg = config.dataAgg,
	            timePeriodVal,
	            timePeriodSelectMenuOpt,
	            validTimePeriod,
	            indexOfTimeUnit,
	            multiplierVal,
	            timeMulSelectMenuOpt,
	            validTimePeriodMultiplier,
	            aggVal,
	            aggMethodSelectMenuOpt,
	            avlAggMethods,
	            rangeOnChange = function rangeOnChange() {
	          var aggregation = self.aggregation,
	              currentAggregationObj,
	              timePeriod,
	              timePeriodMultiplier,
	              aggregationMethod;
	
	          self.getValidAggregation();
	          currentAggregationObj = self.getCurrentAggreation();
	          timePeriod = currentAggregationObj.timePeriod;
	          timePeriodMultiplier = currentAggregationObj.timePeriodMultiplier;
	          aggregationMethod = currentAggregationObj.aggregationMethod;
	
	          timePeriodSelectMenuOpt = [];
	          timeMulSelectMenuOpt = [];
	          aggMethodSelectMenuOpt = [];
	
	          validTimePeriod = config.validTimePeriod;
	          validTimePeriodMultiplier = config.validTimePeriodMultiplier;
	          avlAggMethods = config.avlAggMethods;
	
	          applyButton.updateVisual('disabled');
	
	          if (aggregation.binSize !== model.prop('bin-size') && aggregationMethod.value === config.defaultAggMethod) {
	            aggregation.binSize = null;
	            aggregation.aggregationMethod = null;
	            resetButton.updateVisual('disabled');
	          } else {
	            resetButton.updateVisual('enabled');
	          }
	
	          if (!config.canAggregate) {
	            timePeriodSelectMenu.updateVisual('disabled');
	            timeMulSelectMenu.updateVisual('disabled');
	            aggMethodSelectMenu.updateVisual('disabled');
	            resetButton.updateVisual('disabled');
	          } else {
	            timePeriodSelectMenu.updateVisual('enabled');
	            timeMulSelectMenu.updateVisual('enabled');
	            aggMethodSelectMenu.updateVisual('enabled');
	          }
	
	          var _iteratorNormalCompletion3 = true;
	          var _didIteratorError3 = false;
	          var _iteratorError3 = undefined;
	
	          try {
	            for (var _iterator3 = validTimePeriod[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	              timePeriodVal = _step3.value;
	
	              timePeriodSelectMenuOpt.push({
	                name: timePeriodVal,
	                value: timePeriodVal
	              });
	            }
	          } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                _iterator3.return();
	              }
	            } finally {
	              if (_didIteratorError3) {
	                throw _iteratorError3;
	              }
	            }
	          }
	
	          timePeriodSelectMenu.updateList(timePeriodSelectMenuOpt);
	          timePeriodSelectMenu.value(timePeriod);
	
	          indexOfTimeUnit = validTimePeriod.indexOf(timePeriod);
	
	          if (indexOfTimeUnit >= 0) {
	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;
	
	            try {
	              for (var _iterator4 = validTimePeriodMultiplier[indexOfTimeUnit][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                multiplierVal = _step4.value;
	
	                timeMulSelectMenuOpt.push({
	                  name: multiplierVal.toString(),
	                  value: multiplierVal.toString()
	                });
	              }
	            } catch (err) {
	              _didIteratorError4 = true;
	              _iteratorError4 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                  _iterator4.return();
	                }
	              } finally {
	                if (_didIteratorError4) {
	                  throw _iteratorError4;
	                }
	              }
	            }
	          }
	
	          timeMulSelectMenu.updateList(timeMulSelectMenuOpt);
	          timeMulSelectMenu.value(timePeriodMultiplier.toString());
	
	          for (aggVal in avlAggMethods) {
	            aggMethodSelectMenuOpt.push({
	              name: avlAggMethods[aggVal].formalName,
	              value: avlAggMethods[aggVal].nickName
	            });
	          }
	
	          aggMethodSelectMenu.updateList(aggMethodSelectMenuOpt);
	          aggMethodSelectMenu.value(aggregationMethod.value);
	        };
	
	        self.getAvailablelAggreagation();
	
	        x = x === undefined ? measurement.x : x;
	        y = y === undefined ? measurement.y : y;
	        width = width === undefined ? measurement.width : width;
	        height = height === undefined ? measurement.height : height;
	        group = group === undefined ? self.parentGroup : group;
	        if (width && height) {
	          for (i = 0, ln = toolbars.length; i < ln; i++) {
	            toolbar = toolbars[i];
	            toolbar.draw(x, y);
	          }
	        }
	        rangeOnChange();
	        applyButton.updateVisual('disabled');
	        resetButton.updateVisual('disabled');
	        config.defaultAggMethod = dataAgg.getDefaultAggregationMethod().nickName;
	
	        model.onPropsChange(['bin-size', 'aggregation-fn'], rangeOnChange);
	      }
	    }, {
	      key: 'dispose',
	      value: function dispose() {
	        // dispose extension
	      }
	    }, {
	      key: 'aggregation',
	      get: function get() {
	        return this.appliedAggregation;
	      },
	      set: function set(obj) {
	        this.appliedAggregation.timePeriod = obj.timePeriod;
	        this.appliedAggregation.timePeriodMultiplier = obj.timePeriodMultiplier;
	        this.appliedAggregation.aggregationMethod = obj.aggregationMethod;
	      }
	    }]);
	
	    return Aggregator;
	  }();
	
	  return Aggregator;
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZjdmMjA4MjU3Mzc1M2IyOWFlNjkiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZjdHMtZXh0LWFnZ3JlZ2F0b3IuanMiXSwibmFtZXMiOlsiQWdncmVnYXRvckdldHRlciIsInJlcXVpcmUiLCJlbnYiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50Iiwid2luIiwiRXJyb3IiLCJBZ2dyZWdhdG9yIiwid2luZG93IiwiX3dpbmRvdyIsIndpbmRvd0V4aXN0cyIsIkZDIiwiRnVzaW9uQ2hhcnRzIiwicmVnaXN0ZXIiLCJyZWdpc3RlckNvbXBvbmVudCIsImRlcCIsImFwcGxpZWRBZ2dyZWdhdGlvbiIsImJpblNpemUiLCJhZ2dyZWdhdGlvbk1ldGhvZCIsImNvbmZpZyIsImRhdGFBZ2ciLCJhdmxUaW1lUGVyaW9kcyIsImdldEFnZ3JlZ2F0aW9uVGltZVJ1bGVzIiwiaSIsImxlbiIsImF2bFRpbWVNdWx0aXBsaWVyIiwibGVuZ3RoIiwicHVzaCIsInBvc3NpYmxlRmFjdG9ycyIsInNlbGYiLCJ0c09iamVjdCIsImoiLCJsZW4xIiwibGVuMiIsIm1heE51bU9mUGxvdCIsImNvbXBvc2l0aW9uIiwicmVhY3RpdmVNb2RlbCIsIm1vZGVsIiwibXVsdGlwbGllcnNBcnIiLCJjdXJyZW50VGltZUxlbmd0aCIsInRpbWVQZXJpb2QiLCJ0aW1lIiwiZXhwZWN0ZWRUaW1lIiwibXVsdGlwbGllciIsIm1pbkJpblNpemUiLCJnbG9iYWxSZWFjdGl2ZU1vZGVsIiwidmFsaWRUaW1lUGVyaW9kIiwidmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciIsImF2bEFnZ01ldGhvZHMiLCJnZXRBbGxBZ2dyZWdhdGlvbk1ldGhvZCIsIm5hbWUiLCJpbnRlcnZhbCIsImN1cnJlbnRBZ2dNZXRob2QiLCJzdWl0YWJsZUludGVydmFsIiwicHJvcCIsImlzRmluaXRlIiwiY2FuQWdncmVnYXRlIiwidGltZVJ1bGVzIiwiZ2V0U3VpdGFibGVJbnRlcnZhbCIsInN0ZXAiLCJmb3JtYWxOYW1lIiwibmlja05hbWUiLCJ0aW1lUGVyaW9kTXVsdGlwbGllciIsInZhbHVlIiwidGV4dCIsInRvb2xib3hDb21wb25lbnQiLCJhcGkiLCJzdG9yZSIsInNhdmVUbyIsInJlcXVpcmVkUGFyYW1zIiwiYWNxdWlyZSIsImlpIiwicGFyYW0iLCJhcmd1bWVudHMiLCJjaGFydEluc3RhbmNlIiwiYXBpSW5zdGFuY2UiLCJnZXRDb21wb25lbnRTdG9yZSIsImdldENhbnZhc0J5SW5kZXgiLCJpbXBsIiwiZ2V0RGF0YUFnZ3JlZ2F0b3IiLCJ0b29sYm94IiwiZ2V0Q29tcG9uZW50IiwidG9vbGJhcnMiLCJtZWFzdXJlbWVudCIsImNyZWF0ZVRvb2xiYXIiLCJncm91cDEiLCJncm91cDIiLCJncm91cDMiLCJ0b29sYmFyIiwidGltZU11bFNlbGVjdE1lbnUiLCJ0aW1lUGVyaW9kU2VsZWN0TWVudSIsImFnZ01ldGhvZFNlbGVjdE1lbnUiLCJyZXNldEJ1dHRvbiIsImFwcGx5QnV0dG9uIiwibGFiZWwiLCJ0b29sYm94Q29tcENvbmZpZyIsIkhvcml6b250YWxUb29sYmFyIiwiQ29tcG9uZW50R3JvdXAiLCJTeW1ib2xTdG9yZSIsImdyYXBoaWNzIiwicGFwZXIiLCJjb250YWluZXIiLCJjaGFydCIsInNtYXJ0TGFiZWwiLCJtdWx0aXBsaWVyVmFsIiwidGltZU11bFNlbGVjdE1lbnVPcHQiLCJ0aW1lUGVyaW9kTWVudURpc2FibGVDb25maWciLCJ0aW1lTXVsdGlwbGllck1lbnVEaXNhYmxlQ29uZmlnIiwiYWdnTWV0aG9kTWVudURpc2FibGVvbmZpZyIsImRyb3BEb3duTWVudVN0eWxlIiwiYXBwbHlCdXR0b25EaXNhYmxlQ29uZmlnIiwicmVzZXRCdXR0b25EaXNhYmxlQ29uZmlnIiwic3R5bGUiLCJkZXBlbmRlbmNpZXMiLCJjaGFydENvbnRhaW5lciIsImFwcGx5Iiwic2V0IiwidGltZVBlcmlvZFZhbCIsInRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsIiwiYWdnTWV0aG9kU2VsZWN0TWVudVZhbCIsImtleXMiLCJ0aW1lSW50ZXJ2YWwiLCJhZ2dyZWdhdGlvbiIsImNhbnZhcyIsIk51bWJlciIsImxvY2siLCJ1bmxvY2siLCJ1cGRhdGVWaXN1YWwiLCJyZXNldEFnZ3JlZ2F0aW9uIiwidGltZVBlcmlvZE9uQ2hhbmdlIiwicHJldlRpbWVQZXJvaWRNdWxWYWwiLCJpbmRleE9mVGltZVVuaXQiLCJpbmRleE9mVGltZU11bCIsImluZGV4T2YiLCJ0b1N0cmluZyIsInVwZGF0ZUxpc3QiLCJvbkNoYW5nZSIsInR5cGUiLCJjdXJyZW50QWdnIiwiZ2V0Q3VycmVudEFnZ3JlYXRpb24iLCJ1c3JDb25maWciLCJlbmFibGVkIiwicG9zV3J0Q2FudmFzIiwiYWxpZ25tZW50Iiwib3JpZW50YXRpb24iLCJzdHlsZXMiLCJ0aW1lTXVsdGlwbGllcklucHV0RmllbGQiLCJhY3RpdmUiLCJpbmFjdGl2ZSIsInRpbWVQZXJpb2RJbnB1dEZpZWxkIiwiYWdncmVnYXRpb25NZXRob2RJbnB1dEZpZWxkIiwiZHJvcERvd24iLCJub3JtYWwiLCJiYXNlIiwiZm9udCIsInNldENvbmZpZyIsImZpbGwiLCJib3JkZXJUaGlja25lc3MiLCJkaXNhYmxlZCIsInNlbGVjdGVkIiwibGFiZWxGaWxsIiwiaG92ZXIiLCJob3ZlckZpbGwiLCJob3ZlckxhYmVsRmlsbCIsIkxhYmVsIiwiU2VsZWN0U3ltYm9sIiwiT2JqZWN0IiwiYXNzaWduIiwiYnRuVGV4dFN0eWxlIiwiZm9udFNpemUiLCJkcm9wRG93bk1lbnUiLCJzZXRTdGF0ZUNvbmZpZyIsIlN5bWJvbCIsImF0dGFjaEV2ZW50SGFuZGxlcnMiLCJjbGljayIsImFkZFN5bWJvbCIsIngiLCJ5IiwicmFkIiwidyIsImgiLCJwYWRYIiwicGFkWSIsIngxIiwieDIiLCJ5MSIsInkyIiwidGV4dE9uQ2hhbmdlIiwiYWRkQ29tcG9uZW50IiwiYXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJsb2dpY2FsU3BhY2UiLCJ3aWR0aCIsImhlaWdodCIsImxuIiwiZ2V0TG9naWNhbFNwYWNlIiwiTWF0aCIsIm1heCIsInBhZGRpbmciLCJjb250YWluZXJJbnN0YW5jZSIsInNwYWNlTWFuYWdlckluc3RhbmNlIiwiYWRkIiwicmVmIiwib2JqIiwicHJpb3JpdHkiLCJsYXlvdXQiLCJpbmxpbmUiLCJob3Jpem9udGFsIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwiZGltZW5zaW9ucyIsInBhcmVudCIsImdldFBhcmVudENvbXBvbmVudEdyb3VwIiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJncm91cCIsIm1lcyIsInBhcmVudEdyb3VwIiwidGltZVBlcmlvZFNlbGVjdE1lbnVPcHQiLCJhZ2dWYWwiLCJhZ2dNZXRob2RTZWxlY3RNZW51T3B0IiwicmFuZ2VPbkNoYW5nZSIsImN1cnJlbnRBZ2dyZWdhdGlvbk9iaiIsImdldFZhbGlkQWdncmVnYXRpb24iLCJkZWZhdWx0QWdnTWV0aG9kIiwiZ2V0QXZhaWxhYmxlbEFnZ3JlYWdhdGlvbiIsInVuZGVmaW5lZCIsImRyYXciLCJnZXREZWZhdWx0QWdncmVnYXRpb25NZXRob2QiLCJvblByb3BzQ2hhbmdlIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ3RDQTs7OztBQUNBLEtBQU1BLG1CQUFtQixtQkFBQUMsQ0FBUSxDQUFSLENBQXpCOztBQUVBLEVBQUMsQ0FBQyxVQUFVQyxHQUFWLEVBQWVDLE9BQWYsRUFBd0I7QUFDeEIsT0FBSSxnQ0FBT0MsTUFBUCxPQUFrQixRQUFsQixJQUE4QkEsT0FBT0MsT0FBekMsRUFBa0Q7QUFDaERELFlBQU9DLE9BQVAsR0FBaUJILElBQUlJLFFBQUosR0FDWkgsUUFBUUQsR0FBUixDQURZLEdBQ0csVUFBVUssR0FBVixFQUFlO0FBQzlCLFdBQUksQ0FBQ0EsSUFBSUQsUUFBVCxFQUFtQjtBQUNqQixlQUFNLElBQUlFLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0Q7QUFDRCxjQUFPTCxRQUFRSSxHQUFSLEVBQWEsSUFBYixDQUFQO0FBQ0QsTUFOSjtBQU9ELElBUkQsTUFRTztBQUNMTCxTQUFJTyxVQUFKLEdBQWlCTixRQUFRRCxHQUFSLEVBQWEsSUFBYixDQUFqQjtBQUNEO0FBQ0YsRUFaQSxFQVlFLE9BQU9RLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NBLE1BQWhDLFlBWkYsRUFZaUQsVUFBVUMsT0FBVixFQUFtQkMsWUFBbkIsRUFBaUM7QUFDakYsT0FBSUMsS0FBS0YsUUFBUUcsWUFBakI7O0FBRUFELE1BQUdFLFFBQUgsQ0FBWSxXQUFaLEVBQXlCLENBQUMsU0FBRCxFQUFZLGlCQUFaLEVBQStCLFlBQVk7QUFDbEVGLFFBQUdHLGlCQUFILENBQXFCLFlBQXJCLEVBQW1DLGlCQUFuQyxFQUFzRGhCLGlCQUFpQixFQUFDYSxJQUFJQSxFQUFMLEVBQWpCLENBQXREO0FBQ0QsSUFGd0IsQ0FBekI7QUFHRCxFQWxCQSxFOzs7Ozs7O0FDSEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNUQTs7Ozs7O0FBRUFULFFBQU9DLE9BQVAsR0FBaUIsVUFBVVksR0FBVixFQUFlO0FBQzlCOzs7QUFEOEIsT0FJeEJSLFVBSndCO0FBSzVCOzs7Ozs7O0FBT0EsMkJBQWU7QUFBQTs7QUFDYjs7O0FBR0EsWUFBS1Msa0JBQUwsR0FBMEI7QUFDeEJDLGtCQUFTLElBRGU7QUFFeEJDLDRCQUFtQjtBQUZLLFFBQTFCO0FBSUEsWUFBS0MsTUFBTCxHQUFjLEVBQWQ7QUFDRDs7QUFFRDs7Ozs7O0FBdkI0QjtBQUFBOzs7QUFxQzVCOzs7O0FBckM0QixtREF5Q0M7QUFDM0IsYUFBSUEsU0FBUyxLQUFLQSxNQUFsQjtBQUFBLGFBQ0VDLFVBQVVELE9BQU9DLE9BRG5CO0FBQUEsYUFFRUMsaUJBQWlCRixPQUFPRSxjQUFQLEdBQXdCRCxRQUFRRSx1QkFBUixFQUYzQztBQUFBLGFBR0VDLENBSEY7QUFBQSxhQUlFQyxHQUpGOztBQU1BTCxnQkFBT00saUJBQVAsR0FBMkIsRUFBM0I7QUFDQUQsZUFBTUgsZUFBZUssTUFBckI7O0FBRUEsY0FBS0gsSUFBSSxDQUFULEVBQVlBLElBQUlDLEdBQWhCLEVBQXFCRCxHQUFyQixFQUEwQjtBQUN4Qkosa0JBQU9NLGlCQUFQLENBQXlCRSxJQUF6QixDQUE4Qk4sZUFBZUUsQ0FBZixFQUFrQkssZUFBaEQ7QUFDRDtBQUNGOztBQUVEOzs7OztBQXhENEI7QUFBQTtBQUFBLDZDQTRETDtBQUNyQixhQUFJQyxPQUFPLElBQVg7QUFBQSxhQUNFVixTQUFTVSxLQUFLVixNQURoQjtBQUFBLGFBRUVXLFdBQVdELEtBQUtDLFFBRmxCO0FBQUEsYUFHRVYsVUFBVUQsT0FBT0MsT0FIbkI7QUFBQSxhQUlFRyxDQUpGO0FBQUEsYUFLRVEsQ0FMRjtBQUFBLGFBTUVDLElBTkY7QUFBQSxhQU9FQyxJQVBGO0FBQUEsYUFRRVosY0FSRjtBQUFBLGFBU0VJLGlCQVRGOztBQVVFO0FBQ0FTLHdCQUFlZixPQUFPZ0IsV0FBUCxDQUFtQkMsYUFBbkIsQ0FBaUNDLEtBQWpDLENBQXVDLGdCQUF2QyxDQVhqQjtBQUFBLGFBWUVDLGNBWkY7QUFBQSxhQWFFQyxpQkFiRjtBQUFBLGFBY0VDLFVBZEY7QUFBQSxhQWVFQyxJQWZGO0FBQUEsYUFnQkVDLFlBaEJGO0FBQUEsYUFpQkVDLFVBakJGO0FBQUEsYUFrQkVDLFVBbEJGO0FBbUJFOztBQUVGekIsZ0JBQU9vQixpQkFBUCxHQUEyQlQsU0FBU2UsbUJBQVQsQ0FBNkJSLEtBQTdCLENBQW1DLDBCQUFuQyxJQUN6QlAsU0FBU2UsbUJBQVQsQ0FBNkJSLEtBQTdCLENBQW1DLDRCQUFuQyxDQURGOztBQUdBaEIsMEJBQWlCRixPQUFPRSxjQUF4QjtBQUNBSSw2QkFBb0JOLE9BQU9NLGlCQUEzQjtBQUNBYyw2QkFBb0JwQixPQUFPb0IsaUJBQTNCOztBQUVBcEIsZ0JBQU95QixVQUFQLEdBQW9CQSxhQUFhTCxvQkFBb0JMLFlBQXJEO0FBQ0E7O0FBRUFmLGdCQUFPMkIsZUFBUCxHQUF5QixFQUF6QjtBQUNBM0IsZ0JBQU80Qix5QkFBUCxHQUFtQyxFQUFuQztBQUNBNUIsZ0JBQU82QixhQUFQLEdBQXVCNUIsUUFBUTZCLHVCQUFSLEVBQXZCOztBQUVBLGNBQUsxQixJQUFJLENBQUosRUFBT1MsT0FBT1gsZUFBZUssTUFBbEMsRUFBMENILElBQUlTLElBQTlDLEVBQW9EVCxHQUFwRCxFQUF5RDtBQUN2RGlCLHdCQUFhbkIsZUFBZUUsQ0FBZixFQUFrQjJCLElBQS9CO0FBQ0FULGtCQUFPcEIsZUFBZUUsQ0FBZixFQUFrQjRCLFFBQXpCO0FBQ0FiLDRCQUFpQixFQUFqQjs7QUFFQSxnQkFBS1AsSUFBSSxDQUFKLEVBQU9FLE9BQU9SLGtCQUFrQkYsQ0FBbEIsRUFBcUJHLE1BQXhDLEVBQWdESyxJQUFJRSxJQUFwRCxFQUEwREYsR0FBMUQsRUFBK0Q7QUFDN0RZLDBCQUFhbEIsa0JBQWtCRixDQUFsQixFQUFxQlEsQ0FBckIsQ0FBYjtBQUNBVyw0QkFBZUMsYUFBYUYsSUFBNUI7O0FBRUE7QUFDQSxpQkFBS0MsZ0JBQWdCRSxVQUFyQixFQUFrQztBQUNoQ04sOEJBQWVYLElBQWYsQ0FBb0JGLGtCQUFrQkYsQ0FBbEIsRUFBcUJRLENBQXJCLENBQXBCO0FBQ0Q7QUFDRjtBQUNELGVBQUlPLGVBQWVaLE1BQWYsR0FBd0IsQ0FBNUIsRUFBK0I7QUFDN0JQLG9CQUFPNEIseUJBQVAsQ0FBaUNwQixJQUFqQyxDQUFzQ1csY0FBdEM7QUFDQW5CLG9CQUFPMkIsZUFBUCxDQUF1Qm5CLElBQXZCLENBQTRCYSxVQUE1QjtBQUNEO0FBQ0Y7QUFDRDtBQUNBO0FBQ0E7QUFDRDtBQXRIMkI7QUFBQTtBQUFBLDhDQXdISjtBQUN0QixhQUFJWCxPQUFPLElBQVg7QUFBQSxhQUNFVixTQUFTVSxLQUFLVixNQURoQjtBQUFBLGFBRUVDLFVBQVVELE9BQU9DLE9BRm5CO0FBQUEsYUFHRWUsY0FBY2hCLE9BQU9nQixXQUh2QjtBQUFBLGFBSUVFLFFBQVFGLFlBQVlDLGFBSnRCO0FBQUEsYUFLRWdCLGdCQUxGO0FBQUEsYUFNRUMsZ0JBTkY7QUFBQSxhQU9FcEMsT0FQRjs7QUFTQUEsbUJBQVVvQixNQUFNaUIsSUFBTixDQUFXLFVBQVgsSUFBeUIsQ0FBbkM7O0FBRUEsYUFBSUMsU0FBU3RDLE9BQVQsQ0FBSixFQUF1QjtBQUNyQkUsa0JBQU9xQyxZQUFQLEdBQXNCLElBQXRCO0FBQ0FILDhCQUFtQmpDLFFBQVFxQyxTQUFSLENBQWtCQyxtQkFBbEIsQ0FBc0N6QyxPQUF0QyxDQUFuQjtBQUNBbUMsOEJBQW1CZixNQUFNaUIsSUFBTixDQUFXLGdCQUFYLENBQW5CO0FBQ0QsVUFKRCxNQUlPO0FBQ0xuQyxrQkFBT3FDLFlBQVAsR0FBc0IsS0FBdEI7QUFDQUgsOEJBQW1CO0FBQ2pCSCxtQkFBTSxFQURXO0FBRWpCUyxtQkFBTTtBQUZXLFlBQW5CO0FBSUF4QyxrQkFBTzJCLGVBQVAsR0FBeUIsQ0FBQ08saUJBQWlCSCxJQUFsQixDQUF6QjtBQUNBL0Isa0JBQU80Qix5QkFBUCxHQUFtQyxDQUFDLENBQUNNLGlCQUFpQk0sSUFBbEIsQ0FBRCxDQUFuQztBQUNBeEMsa0JBQU82QixhQUFQLEdBQXVCO0FBQ3JCLHdCQUFXO0FBQ1RZLDJCQUFZLEVBREg7QUFFVEMseUJBQVU7QUFGRDtBQURVLFlBQXZCO0FBTUFULDhCQUFtQmpDLE9BQU82QixhQUFQLENBQXFCLFNBQXJCLENBQW5CO0FBQ0Q7O0FBRUQsZ0JBQU87QUFDTFIsdUJBQVlhLGlCQUFpQkgsSUFEeEI7QUFFTFksaUNBQXNCVCxpQkFBaUJNLElBRmxDO0FBR0x6Qyw4QkFBbUI7QUFDakI2QyxvQkFBT1gsaUJBQWlCUyxRQURQO0FBRWpCRyxtQkFBTVosaUJBQWlCUTtBQUZOO0FBSGQsVUFBUDtBQVFEO0FBaksyQjtBQUFBO0FBQUEsNEJBbUt0QjdELE9BbktzQixFQW1LYjtBQUNiLGFBQUk4QixPQUFPLElBQVg7QUFBQSxhQUNFVixTQUFTVSxLQUFLVixNQURoQjtBQUFBLGFBRUU4QyxtQkFBbUI5QyxPQUFPOEMsZ0JBQVAsR0FBMEIsRUFGL0M7QUFBQSxhQUdFQyxHQUhGO0FBQUEsYUFJRUMsS0FKRjtBQUFBLGFBS0VoQyxXQUxGO0FBQUEsYUFNRWlDLFNBQVMsVUFOWDtBQUFBLGFBT0VDLGlCQUFpQixDQUNmLFVBRGUsRUFFZixxQkFGZSxFQUdmLE9BSGUsRUFJZixzQkFKZSxFQUtmLGVBTGUsRUFNZixZQU5lLEVBT2YsU0FBU0MsT0FBVCxHQUFvQjtBQUNsQixlQUFJL0MsSUFBSSxDQUFSO0FBQUEsZUFDRWdELEtBQUtGLGVBQWUzQyxNQUFmLEdBQXdCLENBRC9CO0FBQUEsZUFFRThDLFFBQVEsRUFGVjtBQUdBM0MsZ0JBQUt1QyxNQUFMLElBQWV2QyxLQUFLdUMsTUFBTCxLQUFnQixFQUEvQjtBQUNBdkMsZ0JBQUt3QyxjQUFMLEdBQXNCLEVBQXRCO0FBQ0EsZ0JBQUs5QyxJQUFJLENBQVQsRUFBWUEsSUFBSWdELEVBQWhCLEVBQW9CLEVBQUVoRCxDQUF0QixFQUF5QjtBQUN2QmlELHFCQUFRSCxlQUFlOUMsQ0FBZixDQUFSO0FBQ0FNLGtCQUFLdUMsTUFBTCxFQUFhSSxLQUFiLElBQXNCQyxVQUFVbEQsQ0FBVixDQUF0QjtBQUNEO0FBQ0Q7QUFDRCxVQWxCYyxDQVBuQjtBQTJCQXhCLGlCQUFRc0UsY0FBUjs7QUFFQUgsZUFBTXJDLEtBQUtDLFFBQUwsQ0FBYzRDLGFBQWQsQ0FBNEJDLFdBQWxDO0FBQ0FSLGlCQUFRRCxJQUFJVSxpQkFBSixFQUFSO0FBQ0F6RCxnQkFBT2dCLFdBQVAsR0FBcUJBLGNBQWNnQyxNQUFNVSxnQkFBTixDQUF1QixDQUF2QixFQUEwQjFDLFdBQTdEO0FBQ0FoQixnQkFBT0MsT0FBUCxHQUFpQmUsWUFBWTJDLElBQVosQ0FBaUJDLGlCQUFqQixFQUFqQjs7QUFFQWQsMEJBQWlCZSxPQUFqQixHQUEyQmpFLElBQUlKLEVBQUosQ0FBT3NFLFlBQVAsQ0FBb0IsS0FBcEIsRUFBMkIsU0FBM0IsQ0FBM0I7QUFDQWhCLDBCQUFpQjlDLE1BQWpCLEdBQTBCLEVBQTFCOztBQUVBVSxjQUFLcUQsUUFBTCxHQUFnQixFQUFoQjs7QUFFQXJELGNBQUtzRCxXQUFMLEdBQW1CLEVBQW5COztBQUVBdEQsY0FBS3FELFFBQUwsQ0FBY3ZELElBQWQsQ0FBbUJFLEtBQUt1RCxhQUFMLEVBQW5COztBQUVBNUUsZ0JBQU9ELFVBQVAsR0FBb0JzQixJQUFwQjtBQUNBLGdCQUFPQSxJQUFQO0FBQ0Q7QUFqTjJCO0FBQUE7QUFBQSx1Q0FtTlg7QUFDZixhQUFJQSxPQUFPLElBQVg7QUFBQSxhQUNFd0QsTUFERjtBQUFBLGFBRUVDLE1BRkY7QUFBQSxhQUdFQyxNQUhGO0FBQUEsYUFJRUMsT0FKRjtBQUFBLGFBS0VDLGlCQUxGO0FBQUEsYUFNRUMsb0JBTkY7QUFBQSxhQU9FQyxtQkFQRjtBQUFBLGFBUUVDLFdBUkY7QUFBQSxhQVNFQyxXQVRGO0FBQUEsYUFVRTFFLFNBQVNVLEtBQUtWLE1BVmhCO0FBQUEsYUFXRVcsV0FBV0QsS0FBS0MsUUFYbEI7QUFBQSxhQVlFZ0UsS0FaRjtBQUFBLGFBY0U3QixtQkFBbUI5QyxPQUFPOEMsZ0JBZDVCO0FBQUEsYUFlRWUsVUFBVWYsaUJBQWlCZSxPQWY3QjtBQUFBLGFBZ0JFZSxvQkFBb0I5QixpQkFBaUI5QyxNQWhCdkM7QUFBQSxhQWlCRTZFLG9CQUFvQmhCLFFBQVFnQixpQkFqQjlCO0FBQUEsYUFrQkVDLGlCQUFpQmpCLFFBQVFpQixjQWxCM0I7QUFBQSxhQW1CRUMsY0FBY2xCLFFBQVFrQixXQW5CeEI7QUFBQSxhQXFCRUMsV0FBV3JFLFNBQVNxRSxRQXJCdEI7QUFBQSxhQXNCRUMsUUFBUUQsU0FBU0MsS0F0Qm5CO0FBQUEsYUF1QkVDLFlBQVlGLFNBQVNFLFNBdkJ2QjtBQUFBLGFBd0JFQyxRQUFReEUsU0FBU3dFLEtBeEJuQjtBQUFBLGFBeUJFQyxhQUFhekUsU0FBU3lFLFVBekJ4QjtBQUFBLGFBMkJFQyxhQTNCRjtBQUFBLGFBNEJFQyxvQkE1QkY7QUFBQSxhQTZCRUMsMkJBN0JGO0FBQUEsYUE4QkVDLCtCQTlCRjtBQUFBLGFBK0JFQyx5QkEvQkY7QUFBQSxhQWdDRUMsaUJBaENGO0FBQUEsYUFpQ0VDLHdCQWpDRjtBQUFBLGFBa0NFQyx3QkFsQ0Y7QUFBQSxhQW9DRUMsS0FwQ0Y7QUFBQSxhQXNDRUMsZUFBZTtBQUNiYixrQkFBT0EsS0FETTtBQUViRSxrQkFBT0EsS0FGTTtBQUdiQyx1QkFBWUEsVUFIQztBQUliVywyQkFBZ0JiO0FBSkgsVUF0Q2pCO0FBQUEsYUE0Q0VjLFFBQVEsU0FBUkEsS0FBUSxDQUFDQyxHQUFELEVBQVM7QUFDZixlQUFJL0UsUUFBUWxCLE9BQU9nQixXQUFQLENBQW1CQyxhQUEvQjtBQUFBLGVBQ0VpRixnQkFBZ0IzQixxQkFBcUIzQixLQUFyQixFQURsQjtBQUFBLGVBRUV1RCwwQkFBMEI3QixrQkFBa0IxQixLQUFsQixFQUY1QjtBQUFBLGVBR0V3RCx5QkFBeUI1QixvQkFBb0I1QixLQUFwQixFQUgzQjtBQUFBLGVBSUV5RCxJQUpGO0FBQUEsZUFLRXZHLE9BTEY7QUFBQSxlQU1Fd0csWUFORjtBQUFBLGVBT0VDLGNBQWM3RixLQUFLNkYsV0FQckI7QUFBQSxlQVFFQyxTQUFTeEcsT0FBT2dCLFdBQVAsQ0FBbUIyQyxJQVI5Qjs7QUFEZTtBQUFBO0FBQUE7O0FBQUE7QUFXZixrQ0FBYTNELE9BQU9FLGNBQXBCLDhIQUFvQztBQUEvQm1HLG1CQUErQjs7QUFDbEMsbUJBQUlBLEtBQUt0RSxJQUFMLEtBQWNtRSxhQUFsQixFQUFpQztBQUMvQkksZ0NBQWVELEtBQUtyRSxRQUFwQjtBQUNBO0FBQ0Q7QUFDRjtBQWhCYztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWlCZmxDLHFCQUFVd0csZUFBZUcsT0FBT04sdUJBQVAsQ0FBekI7QUFDQSxlQUFJRixPQUFPN0QsU0FBU2xCLE1BQU1pQixJQUFOLENBQVcsVUFBWCxDQUFULENBQVgsRUFBNkM7QUFDM0NqQixtQkFDR3dGLElBREgsR0FFR3ZFLElBRkgsQ0FFUSxjQUZSLEVBRXdCckMsT0FGeEIsRUFHR3FDLElBSEgsQ0FHUSxvQkFIUixFQUc4Qm5DLE9BQU82QixhQUFQLENBQXFCdUUsc0JBQXJCLENBSDlCLEVBSUdPLE1BSkg7QUFLQUoseUJBQVl6RyxPQUFaLEdBQXNCQSxPQUF0QjtBQUNBeUcseUJBQVl4RyxpQkFBWixHQUFnQ3FHLHNCQUFoQztBQUNBMUIseUJBQVlrQyxZQUFaLENBQXlCLFVBQXpCO0FBQ0FuQyx5QkFBWW1DLFlBQVosQ0FBeUIsU0FBekI7QUFDRCxZQVZELE1BVU87QUFDTEosb0JBQU9LLGdCQUFQO0FBQ0FOLHlCQUFZekcsT0FBWixHQUFzQixJQUF0QjtBQUNBeUcseUJBQVl4RyxpQkFBWixHQUFnQyxJQUFoQztBQUNBMEUseUJBQVltQyxZQUFaLENBQXlCLFVBQXpCO0FBQ0Q7QUFDRixVQTlFSDtBQUFBLGFBZ0ZFRSxxQkFBcUIsU0FBckJBLGtCQUFxQixHQUFNO0FBQ3pCLGVBQUlaLGdCQUFnQjNCLHFCQUFxQjNCLEtBQXJCLEVBQXBCO0FBQUEsZUFDRXVELDBCQUEwQjdCLGtCQUFrQjFCLEtBQWxCLEVBRDVCO0FBQUEsZUFFRW1FLHVCQUF1QlosdUJBRnpCO0FBQUEsZUFHRXhFLGtCQUFrQjNCLE9BQU8yQixlQUgzQjtBQUFBLGVBSUVDLDRCQUE0QjVCLE9BQU80Qix5QkFKckM7QUFBQSxlQUtFb0YsZUFMRjtBQUFBLGVBTUVDLGNBTkY7O0FBUUFELDZCQUFrQnJGLGdCQUFnQnVGLE9BQWhCLENBQXdCaEIsYUFBeEIsQ0FBbEI7QUFDQWUsNEJBQWlCckYsMEJBQTBCb0YsZUFBMUIsRUFBMkNFLE9BQTNDLENBQW1EVCxPQUFPTix1QkFBUCxDQUFuRCxDQUFqQjs7QUFFQWIsa0NBQXVCLEVBQXZCO0FBWnlCO0FBQUE7QUFBQTs7QUFBQTtBQWF6QixtQ0FBc0IxRCwwQkFBMEJvRixlQUExQixDQUF0QixtSUFBa0U7QUFBN0QzQiw0QkFBNkQ7O0FBQ2hFQyxvQ0FBcUI5RSxJQUFyQixDQUEwQjtBQUN4QnVCLHVCQUFNc0QsY0FBYzhCLFFBQWQsRUFEa0I7QUFFeEJ2RSx3QkFBT3lDLGNBQWM4QixRQUFkO0FBRmlCLGdCQUExQjtBQUlEO0FBbEJ3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQW9CekI3Qyw2QkFBa0I4QyxVQUFsQixDQUE2QjlCLG9CQUE3Qjs7QUFFQSxlQUFJMkIsaUJBQWlCLENBQXJCLEVBQXdCO0FBQ3RCM0MsK0JBQWtCMUIsS0FBbEIsQ0FBd0JoQiwwQkFBMEJvRixlQUExQixFQUEyQyxDQUEzQyxFQUE4Q0csUUFBOUMsRUFBeEI7QUFDRCxZQUZELE1BRU87QUFDTDdDLCtCQUFrQjFCLEtBQWxCLENBQXdCbUUsb0JBQXhCO0FBQ0Q7QUFDRixVQTNHSDtBQUFBLGFBNkdFTSxXQUFXLFNBQVhBLFFBQVcsQ0FBQ0MsSUFBRCxFQUFVO0FBQ25CLGVBQUlDLGFBQWE3RyxLQUFLOEcsb0JBQUwsRUFBakI7O0FBRUEsZUFBSUQsV0FBVzVFLG9CQUFYLENBQWdDd0UsUUFBaEMsT0FBK0M3QyxrQkFBa0IxQixLQUFsQixFQUEvQyxJQUNGMkUsV0FBV2xHLFVBQVgsS0FBMEJrRCxxQkFBcUIzQixLQUFyQixFQUR4QixJQUVGMkUsV0FBV3hILGlCQUFYLENBQTZCNkMsS0FBN0IsS0FBdUM0QixvQkFBb0I1QixLQUFwQixFQUZ6QyxFQUVzRTtBQUNwRThCLHlCQUFZa0MsWUFBWixDQUF5QixTQUF6QjtBQUNELFlBSkQsTUFJTztBQUNMbEMseUJBQVlrQyxZQUFaLENBQXlCLFVBQXpCO0FBQ0Q7QUFDRixVQXZISDs7QUF5SEExQyxrQkFBUyxJQUFJWSxjQUFKLENBQW1CZ0IsWUFBbkIsQ0FBVDtBQUNBM0Isa0JBQVMsSUFBSVcsY0FBSixDQUFtQmdCLFlBQW5CLENBQVQ7QUFDQTFCLGtCQUFTLElBQUlVLGNBQUosQ0FBbUJnQixZQUFuQixDQUFUOztBQUVBekIsbUJBQVUsSUFBSVEsaUJBQUosQ0FBc0JpQixZQUF0QixDQUFWOztBQUVBOUYsZ0JBQU95SCxTQUFQLEdBQW1CO0FBQ2pCQyxvQkFBUyxJQURRO0FBRWpCQyx5QkFBYyxLQUZHO0FBR2pCQyxzQkFBVyxNQUhNO0FBSWpCQyx3QkFBYSxZQUpJO0FBS2pCQyxtQkFBUTtBQUNOQyx1Q0FBMEI7QUFDeEJDLHVCQUFRO0FBQ04seUJBQVEsTUFERjtBQUVOLDhCQUFhLFNBRlA7QUFHTiwyQkFBVSxTQUhKO0FBSU4sZ0NBQWUsQ0FKVDtBQUtOLGdDQUFlLFNBTFQ7QUFNTixxQ0FBb0IsQ0FOZDtBQU9OLDJCQUFVLENBUEo7QUFRTiwwQkFBUyxFQVJIO0FBU04sMkJBQVU7QUFUSixnQkFEZ0I7QUFZeEJDLHlCQUFVO0FBQ1IseUJBQVEsTUFEQTtBQUVSLGlDQUFnQixDQUZSO0FBR1IsMkJBQVUsb0JBSEY7QUFJUiw4QkFBYTtBQUpMO0FBWmMsY0FEcEI7QUFvQk5DLG1DQUFzQjtBQUNwQkYsdUJBQVE7QUFDTix5QkFBUSxNQURGO0FBRU4sOEJBQWEsU0FGUDtBQUdOLDJCQUFVLFNBSEo7QUFJTixnQ0FBZSxDQUpUO0FBS04sZ0NBQWUsU0FMVDtBQU1OLHFDQUFvQixDQU5kO0FBT04sMkJBQVUsQ0FQSjtBQVFOLDBCQUFTLEVBUkg7QUFTTiwyQkFBVTtBQVRKLGdCQURZO0FBWXBCQyx5QkFBVTtBQUNSLHlCQUFRLE1BREE7QUFFUixpQ0FBZ0IsQ0FGUjtBQUdSLDJCQUFVLG9CQUhGO0FBSVIsOEJBQWE7QUFKTDtBQVpVLGNBcEJoQjtBQXVDTkUsMENBQTZCO0FBQzNCSCx1QkFBUTtBQUNOLHlCQUFRLE1BREY7QUFFTiw4QkFBYSxTQUZQO0FBR04sMkJBQVUsU0FISjtBQUlOLGdDQUFlLENBSlQ7QUFLTixnQ0FBZSxTQUxUO0FBTU4scUNBQW9CLENBTmQ7QUFPTiwyQkFBVSxDQVBKO0FBUU4sMEJBQVMsR0FSSDtBQVNOLDJCQUFVO0FBVEosZ0JBRG1CO0FBWTNCQyx5QkFBVTtBQUNSLHlCQUFRLE1BREE7QUFFUixpQ0FBZ0IsQ0FGUjtBQUdSLDJCQUFVLG9CQUhGO0FBSVIsOEJBQWE7QUFKTDtBQVppQixjQXZDdkI7QUEwRE5HLHVCQUFVO0FBQ1JKLHVCQUFRO0FBQ04seUJBQVEsU0FERjtBQUVOLDhCQUFhO0FBRlAsZ0JBREE7QUFLUkssdUJBQVE7QUFDTix5QkFBUSxNQURGO0FBRU4sOEJBQWEsTUFGUDtBQUdOLDhCQUFhLFNBSFA7QUFJTixtQ0FBa0I7QUFKWjtBQUxBLGNBMURKO0FBc0VOM0QsMEJBQWE7QUFDWHNELHVCQUFRO0FBQ04seUJBQVEsTUFERjtBQUVOLDhCQUFhLFNBRlA7QUFHTiwyQkFBVSxTQUhKO0FBSU4sZ0NBQWUsQ0FKVDtBQUtOLDhCQUFhLE1BTFA7QUFNTixxQ0FBb0IsQ0FOZDtBQU9OLGdDQUFlLEVBUFQ7QUFRTiwyQkFBVSxDQVJKO0FBU04sMEJBQVMsRUFUSDtBQVVOLDJCQUFVO0FBVkosZ0JBREc7QUFhWEMseUJBQVU7QUFDUix5QkFBUSxTQURBO0FBRVIsaUNBQWdCLENBRlI7QUFHUiwyQkFBVSxvQkFIRjtBQUlSLDhCQUFhO0FBSkw7QUFiQyxjQXRFUDtBQTBGTnhELDBCQUFhO0FBQ1h1RCx1QkFBUTtBQUNOLHlCQUFRLFNBREY7QUFFTiw4QkFBYSxTQUZQO0FBR04sMkJBQVUsU0FISjtBQUlOLGdDQUFlLENBSlQ7QUFLTiw4QkFBYSxTQUxQO0FBTU4scUNBQW9CLENBTmQ7QUFPTixnQ0FBZSxFQVBUO0FBUU4sMkJBQVUsQ0FSSjtBQVNOLDBCQUFTLEVBVEg7QUFVTiwyQkFBVTtBQVZKLGdCQURHO0FBYVhDLHlCQUFVO0FBQ1IseUJBQVEsU0FEQTtBQUVSLGlDQUFnQixDQUZSO0FBR1IsMkJBQVUsb0JBSEY7QUFJUiw4QkFBYTtBQUpMO0FBYkMsY0ExRlA7QUE4R05LLG1CQUFNO0FBQ0pDLHFCQUFNO0FBQ0osNkJBQVk7QUFEUjtBQURGO0FBOUdBO0FBTFMsVUFBbkI7O0FBMkhBMUMsaUJBQVE3RixPQUFPeUgsU0FBUCxDQUFpQkssTUFBakIsSUFBMkIsRUFBbkM7O0FBRUFqQyxpQkFBUTtBQUNOa0MscUNBQTBCO0FBQ3hCQyxxQkFBU25DLE1BQU1rQyx3QkFBTixJQUFrQ2xDLE1BQU1rQyx3QkFBTixDQUErQkMsTUFBbEUsSUFBNkUsRUFEN0Q7QUFFeEJDLHVCQUFXcEMsTUFBTWtDLHdCQUFOLElBQWtDbEMsTUFBTWtDLHdCQUFOLENBQStCRSxRQUFsRSxJQUErRTtBQUZqRSxZQURwQjtBQUtOQyxpQ0FBc0I7QUFDcEJGLHFCQUFTbkMsTUFBTXFDLG9CQUFOLElBQThCckMsTUFBTXFDLG9CQUFOLENBQTJCRixNQUExRCxJQUFxRSxFQUR6RDtBQUVwQkMsdUJBQVdwQyxNQUFNcUMsb0JBQU4sSUFBOEJyQyxNQUFNcUMsb0JBQU4sQ0FBMkJELFFBQTFELElBQXVFO0FBRjdELFlBTGhCO0FBU05FLHdDQUE2QjtBQUMzQkgscUJBQVNuQyxNQUFNc0MsMkJBQU4sSUFBcUN0QyxNQUFNc0MsMkJBQU4sQ0FBa0NILE1BQXhFLElBQW1GLEVBRGhFO0FBRTNCQyx1QkFBV3BDLE1BQU1zQywyQkFBTixJQUFxQ3RDLE1BQU1zQywyQkFBTixDQUFrQ0YsUUFBeEUsSUFBcUY7QUFGcEUsWUFUdkI7QUFhTkcscUJBQVU7QUFDUkoscUJBQVNuQyxNQUFNdUMsUUFBTixJQUFrQnZDLE1BQU11QyxRQUFOLENBQWVKLE1BQWxDLElBQTZDLEVBRDdDO0FBRVJLLHFCQUFTeEMsTUFBTXVDLFFBQU4sSUFBa0J2QyxNQUFNdUMsUUFBTixDQUFlQyxNQUFsQyxJQUE2QztBQUY3QyxZQWJKO0FBaUJOM0Qsd0JBQWE7QUFDWHNELHFCQUFTbkMsTUFBTW5CLFdBQU4sSUFBcUJtQixNQUFNbkIsV0FBTixDQUFrQnNELE1BQXhDLElBQW1ELEVBRGhEO0FBRVhDLHVCQUFXcEMsTUFBTW5CLFdBQU4sSUFBcUJtQixNQUFNbkIsV0FBTixDQUFrQnVELFFBQXhDLElBQXFEO0FBRnBELFlBakJQO0FBcUJOeEQsd0JBQWE7QUFDWHVELHFCQUFTbkMsTUFBTXBCLFdBQU4sSUFBcUJvQixNQUFNcEIsV0FBTixDQUFrQnVELE1BQXhDLElBQW1ELEVBRGhEO0FBRVhDLHVCQUFXcEMsTUFBTXBCLFdBQU4sSUFBcUJvQixNQUFNcEIsV0FBTixDQUFrQndELFFBQXhDLElBQXFEO0FBRnBELFlBckJQO0FBeUJOSyxpQkFBTTtBQUNKQyxtQkFBTzFDLE1BQU15QyxJQUFOLElBQWN6QyxNQUFNeUMsSUFBTixDQUFXQyxJQUExQixJQUFtQztBQURyQztBQXpCQSxVQUFSOztBQThCQXJFLGdCQUFPc0UsU0FBUCxDQUFpQjtBQUNmQyxpQkFBTSxNQURTO0FBRWZDLDRCQUFpQjtBQUZGLFVBQWpCO0FBSUF2RSxnQkFBT3FFLFNBQVAsQ0FBaUI7QUFDZkMsaUJBQU0sTUFEUztBQUVmQyw0QkFBaUI7QUFGRixVQUFqQjtBQUlBdEUsZ0JBQU9vRSxTQUFQLENBQWlCO0FBQ2ZDLGlCQUFNLE1BRFM7QUFFZkMsNEJBQWlCO0FBRkYsVUFBakI7O0FBS0FyRSxpQkFBUW1FLFNBQVIsQ0FBa0I7QUFDaEJDLGlCQUFNLE1BRFU7QUFFaEJDLDRCQUFpQjtBQUZELFVBQWxCOztBQUtBbkQsdUNBQThCO0FBQzVCb0QscUJBQVU7QUFDUjNJLHFCQUFRO0FBQ04ySSx5QkFBVTlDLE1BQU1rQyx3QkFBTixDQUErQkU7QUFEbkM7QUFEQTtBQURrQixVQUE5Qjs7QUFRQXpDLDJDQUFrQztBQUNoQ21ELHFCQUFVO0FBQ1IzSSxxQkFBUTtBQUNOMkkseUJBQVU5QyxNQUFNcUMsb0JBQU4sQ0FBMkJEO0FBRC9CO0FBREE7QUFEc0IsVUFBbEM7O0FBUUF4QyxxQ0FBNEI7QUFDMUJrRCxxQkFBVTtBQUNSM0kscUJBQVE7QUFDTjJJLHlCQUFVOUMsTUFBTXNDLDJCQUFOLENBQWtDRjtBQUR0QztBQURBO0FBRGdCLFVBQTVCOztBQVFBdEMsb0NBQTJCO0FBQ3pCZ0QscUJBQVU7QUFDUjNJLHFCQUFRO0FBQ04ySSx5QkFBVTlDLE1BQU1uQixXQUFOLENBQWtCdUQ7QUFEdEI7QUFEQTtBQURlLFVBQTNCOztBQVFBckMsb0NBQTJCO0FBQ3pCK0MscUJBQVU7QUFDUjNJLHFCQUFRO0FBQ04ySSx5QkFBVTlDLE1BQU1wQixXQUFOLENBQWtCd0Q7QUFEdEI7QUFEQTtBQURlLFVBQTNCOztBQVFBdkMsNkJBQW9CO0FBQ2xCa0QscUJBQVU7QUFDUjFELHdCQUFXO0FBQ1RXLHNCQUFPO0FBQ0w0Qyx1QkFBTTVDLE1BQU11QyxRQUFOLENBQWVKLE1BQWYsQ0FBc0JTO0FBRHZCO0FBREUsY0FESDtBQU1SNUYsbUJBQU07QUFDSmdELHNCQUFPO0FBQ0w0Qyx1QkFBTTVDLE1BQU11QyxRQUFOLENBQWVKLE1BQWYsQ0FBc0JhO0FBRHZCO0FBREg7QUFORSxZQURRO0FBYWxCUixtQkFBUTtBQUNObkQsd0JBQVc7QUFDVFcsc0JBQU87QUFDTDRDLHVCQUFNNUMsTUFBTXVDLFFBQU4sQ0FBZUMsTUFBZixDQUFzQkk7QUFEdkI7QUFERSxjQURMO0FBTU41RixtQkFBTTtBQUNKZ0Qsc0JBQU87QUFDTDRDLHVCQUFNNUMsTUFBTXVDLFFBQU4sQ0FBZUMsTUFBZixDQUFzQlE7QUFEdkI7QUFESDtBQU5BLFlBYlU7QUF5QmxCQyxrQkFBTztBQUNMNUQsd0JBQVc7QUFDVFcsc0JBQU87QUFDTDRDLHVCQUFNNUMsTUFBTXVDLFFBQU4sQ0FBZUMsTUFBZixDQUFzQlU7QUFEdkI7QUFERSxjQUROO0FBTUxsRyxtQkFBTTtBQUNKZ0Qsc0JBQU87QUFDTDRDLHVCQUFNNUMsTUFBTXVDLFFBQU4sQ0FBZUMsTUFBZixDQUFzQlc7QUFEdkI7QUFESDtBQU5EO0FBekJXLFVBQXBCOztBQXVDQXJFLGlCQUFRLElBQUlkLFFBQVFvRixLQUFaLENBQWtCLGlCQUFsQixFQUFxQ25ELFlBQXJDLEVBQW1EO0FBQ3pEakQsaUJBQU07QUFDSmdELG9CQUFPO0FBQ0wsNEJBQWEsSUFEUjtBQUVMLHVCQUFRO0FBRkg7QUFESDtBQURtRCxVQUFuRCxDQUFSOztBQVNBakIsMkJBQWtCTCxvQkFBbEIsR0FBeUNBLHVCQUF1QixJQUFJVixRQUFRcUYsWUFBWixDQUF5QixFQUF6QixFQUE2QnBELFlBQTdCLEVBQTJDLEVBQTNDLEVBQ2hFcUQsT0FBT0MsTUFBUCxDQUFjdkQsTUFBTXFDLG9CQUFOLENBQTJCRixNQUF6QyxFQUFpRDtBQUMvQ3FCLHlCQUFjO0FBQ1pDLHVCQUFVekQsTUFBTXlDLElBQU4sQ0FBV0MsSUFBWCxDQUFnQmU7QUFEZCxZQURpQztBQUkvQ0MseUJBQWM3RDtBQUppQyxVQUFqRCxDQURnRSxDQUFoRTtBQU9BbkIsOEJBQXFCaUYsY0FBckIsQ0FBb0NqRSwyQkFBcEM7O0FBRUFYLDJCQUFrQk4saUJBQWxCLEdBQXNDQSxvQkFBb0IsSUFBSVQsUUFBUXFGLFlBQVosQ0FBeUIsRUFBekIsRUFBNkJwRCxZQUE3QixFQUEyQyxFQUEzQyxFQUMxRHFELE9BQU9DLE1BQVAsQ0FBY3ZELE1BQU1rQyx3QkFBTixDQUErQkMsTUFBN0MsRUFBcUQ7QUFDbkRxQix5QkFBYztBQUNaQyx1QkFBVXpELE1BQU15QyxJQUFOLENBQVdDLElBQVgsQ0FBZ0JlO0FBRGQsWUFEcUM7QUFJbkRDLHlCQUFjN0Q7QUFKcUMsVUFBckQsQ0FEMEQsQ0FBMUQ7QUFPQXBCLDJCQUFrQmtGLGNBQWxCLENBQWlDaEUsK0JBQWpDOztBQUVBWiwyQkFBa0JKLG1CQUFsQixHQUF3Q0Esc0JBQXNCLElBQUlYLFFBQVFxRixZQUFaLENBQXlCLEVBQXpCLEVBQTZCcEQsWUFBN0IsRUFBMkMsRUFBM0MsRUFDOURxRCxPQUFPQyxNQUFQLENBQWN2RCxNQUFNc0MsMkJBQU4sQ0FBa0NILE1BQWhELEVBQXdEO0FBQ3REcUIseUJBQWM7QUFDWkMsdUJBQVV6RCxNQUFNeUMsSUFBTixDQUFXQyxJQUFYLENBQWdCZTtBQURkLFlBRHdDO0FBSXREQyx5QkFBYzdEO0FBSndDLFVBQXhELENBRDhELENBQTlEO0FBT0FsQiw2QkFBb0JnRixjQUFwQixDQUFtQy9ELHlCQUFuQzs7QUFFQWIsMkJBQWtCRixXQUFsQixHQUFnQ0EsY0FBYyxJQUFJYixRQUFRNEYsTUFBWixDQUFtQixPQUFuQixFQUE0QixJQUE1QixFQUFrQzNELFlBQWxDLEVBQzVDcUQsT0FBT0MsTUFBUCxDQUFjdkQsTUFBTW5CLFdBQU4sQ0FBa0JzRCxNQUFoQyxFQUF3QztBQUN0Q3FCLHlCQUFjO0FBQ1pDLHVCQUFVekQsTUFBTXlDLElBQU4sQ0FBV0MsSUFBWCxDQUFnQmU7QUFEZDtBQUR3QixVQUF4QyxDQUQ0QyxFQU0zQ0ksbUJBTjJDLENBTXZCO0FBQ25CQyxrQkFBTyxpQkFBWTtBQUNqQjNELG1CQUFNLENBQU47QUFDRDtBQUhrQixVQU51QixDQUE5QztBQVdBdEIscUJBQVk4RSxjQUFaLENBQTJCN0Qsd0JBQTNCOztBQUVBZiwyQkFBa0JILFdBQWxCLEdBQWdDQSxjQUFjLElBQUlaLFFBQVE0RixNQUFaLENBQW1CLE9BQW5CLEVBQTRCLElBQTVCLEVBQWtDM0QsWUFBbEMsRUFDNUNxRCxPQUFPQyxNQUFQLENBQWN2RCxNQUFNcEIsV0FBTixDQUFrQnVELE1BQWhDLEVBQXdDO0FBQ3RDcUIseUJBQWM7QUFDWkMsdUJBQVV6RCxNQUFNeUMsSUFBTixDQUFXQyxJQUFYLENBQWdCZTtBQURkO0FBRHdCLFVBQXhDLENBRDRDLEVBTTNDSSxtQkFOMkMsQ0FNdkI7QUFDbkJDLGtCQUFPLGlCQUFZO0FBQ2pCM0QsbUJBQU0sQ0FBTjtBQUNEO0FBSGtCLFVBTnVCLENBQTlDO0FBV0F2QixxQkFBWStFLGNBQVosQ0FBMkI1RCx3QkFBM0I7O0FBRUExQixnQkFBTzBGLFNBQVAsQ0FBaUJqRixLQUFqQjtBQUNBUixnQkFBT3lGLFNBQVAsQ0FBaUJ0RixpQkFBakI7QUFDQUgsZ0JBQU95RixTQUFQLENBQWlCckYsb0JBQWpCO0FBQ0FKLGdCQUFPeUYsU0FBUCxDQUFpQnBGLG1CQUFqQjtBQUNBSixnQkFBT3dGLFNBQVAsQ0FBaUJsRixXQUFqQjtBQUNBTixnQkFBT3dGLFNBQVAsQ0FBaUJuRixXQUFqQjs7QUFFQU0scUJBQVlyRixRQUFaLENBQXFCLGFBQXJCLEVBQW9DLFVBQVVtSyxDQUFWLEVBQWFDLENBQWIsRUFBZ0JDLEdBQWhCLEVBQXFCQyxDQUFyQixFQUF3QkMsQ0FBeEIsRUFBMkJDLElBQTNCLEVBQWlDQyxJQUFqQyxFQUF1QztBQUN6RSxlQUFJQyxLQUFLUCxJQUFJRyxJQUFJLENBQVIsR0FBWUUsT0FBTyxDQUE1QjtBQUFBLGVBQ0VHLEtBQUtSLElBQUlHLElBQUksQ0FBUixHQUFZRSxPQUFPLENBRDFCO0FBQUEsZUFFRUksS0FBS1IsSUFBSUcsSUFBSSxDQUFSLEdBQVlFLE9BQU8sQ0FGMUI7QUFBQSxlQUdFSSxLQUFLVCxJQUFJRyxJQUFJLENBQVIsR0FBWUUsT0FBTyxDQUgxQjs7QUFLQSxrQkFBTyxDQUFDLEdBQUQsRUFBTUMsRUFBTixFQUFVRSxFQUFWLEVBQWMsR0FBZCxFQUFtQkQsRUFBbkIsRUFBdUJDLEVBQXZCLEVBQTJCLEdBQTNCLEVBQWdDRCxFQUFoQyxFQUFvQ0UsRUFBcEMsRUFBd0MsR0FBeEMsRUFBNkNILEVBQTdDLEVBQWlERyxFQUFqRCxFQUFxRCxHQUFyRCxDQUFQO0FBQ0QsVUFQRDs7QUFTQWhHLDhCQUFxQm1GLG1CQUFyQixDQUF5QztBQUN2Q2MseUJBQWMsd0JBQVk7QUFDeEIxRDtBQUNBTztBQUNEO0FBSnNDLFVBQXpDOztBQU9BL0MsMkJBQWtCb0YsbUJBQWxCLENBQXNDO0FBQ3BDYyx5QkFBYyx3QkFBWTtBQUN4Qm5EO0FBQ0Q7QUFIbUMsVUFBdEM7O0FBTUE3Qyw2QkFBb0JrRixtQkFBcEIsQ0FBd0M7QUFDdENjLHlCQUFjLHdCQUFZO0FBQ3hCbkQ7QUFDRDtBQUhxQyxVQUF4Qzs7QUFNQWhELGlCQUFRb0csWUFBUixDQUFxQnZHLE1BQXJCO0FBQ0FHLGlCQUFRb0csWUFBUixDQUFxQnRHLE1BQXJCO0FBQ0FFLGlCQUFRb0csWUFBUixDQUFxQnJHLE1BQXJCOztBQUVBLGdCQUFPQyxPQUFQO0FBQ0Q7QUFyckIyQjtBQUFBO0FBQUEsdUNBdXJCWHFHLGNBdnJCVyxFQXVyQktDLGVBdnJCTCxFQXVyQnNCO0FBQ2hELGFBQUlDLFlBQUo7QUFBQSxhQUNFQyxRQUFRLENBRFY7QUFBQSxhQUVFQyxTQUFTLENBRlg7QUFBQSxhQUdFMUssQ0FIRjtBQUFBLGFBSUUySyxFQUpGOztBQU1BLGNBQUszSyxJQUFJLENBQUosRUFBTzJLLEtBQUssS0FBS2hILFFBQUwsQ0FBY3hELE1BQS9CLEVBQXVDSCxJQUFJMkssRUFBM0MsRUFBK0MzSyxHQUEvQyxFQUFvRDtBQUNsRHdLLDBCQUFlLEtBQUs3RyxRQUFMLENBQWMzRCxDQUFkLEVBQWlCNEssZUFBakIsQ0FBaUNOLGNBQWpDLEVBQWlEQyxlQUFqRCxDQUFmO0FBQ0FFLG1CQUFRSSxLQUFLQyxHQUFMLENBQVNOLGFBQWFDLEtBQXRCLEVBQTZCQSxLQUE3QixDQUFSO0FBQ0FDLHFCQUFVRixhQUFhRSxNQUF2QjtBQUNBLGdCQUFLL0csUUFBTCxDQUFjM0QsQ0FBZCxFQUFpQnlLLEtBQWpCLEdBQXlCRCxhQUFhQyxLQUF0QztBQUNBLGdCQUFLOUcsUUFBTCxDQUFjM0QsQ0FBZCxFQUFpQjBLLE1BQWpCLEdBQTBCRixhQUFhRSxNQUF2QztBQUNEO0FBQ0RBLG1CQUFVLEtBQUtLLE9BQWY7QUFDQSxnQkFBTztBQUNMTixrQkFBT0EsS0FERjtBQUVMQyxtQkFBUUE7QUFGSCxVQUFQO0FBSUQ7QUExc0IyQjtBQUFBO0FBQUEscUNBNHNCYk0saUJBNXNCYSxFQTRzQk07QUFDaEMsYUFBSTFLLFFBQU8sSUFBWDtBQUFBLGFBQ0VDLFdBQVdELE1BQUtDLFFBRGxCOztBQUdBRCxlQUFLeUssT0FBTCxHQUFlLENBQWY7QUFDQXhLLGtCQUFTMEssb0JBQVQsQ0FBOEJDLEdBQTlCLENBQWtDLENBQUM7QUFDakN2SixpQkFBTSxnQkFBWTtBQUNoQixvQkFBTyxnQkFBUDtBQUNELFlBSGdDO0FBSWpDd0osZ0JBQUssYUFBVUMsR0FBVixFQUFlO0FBQ2xCLG9CQUFPQSxJQUFJLEdBQUosQ0FBUDtBQUNELFlBTmdDO0FBT2pDOUssaUJBQU0sZ0JBQVk7QUFDaEIsb0JBQU9BLEtBQVA7QUFDRCxZQVRnQztBQVVqQytLLHFCQUFVLG9CQUFZO0FBQ3BCLG9CQUFPLENBQVA7QUFDRCxZQVpnQztBQWFqQ0MsbUJBQVEsZ0JBQVVGLEdBQVYsRUFBZTtBQUNyQixvQkFBT0EsSUFBSUcsTUFBWDtBQUNELFlBZmdDO0FBZ0JqQzlELHdCQUFhLENBQUM7QUFDWlAsbUJBQU0sY0FBVWtFLEdBQVYsRUFBZTtBQUNuQixzQkFBT0EsSUFBSUksVUFBWDtBQUNELGNBSFc7QUFJWkMsdUJBQVUsQ0FBQztBQUNUdkUscUJBQU0sY0FBVWtFLEdBQVYsRUFBZTtBQUNuQix3QkFBT0EsSUFBSU0sR0FBWDtBQUNELGdCQUhRO0FBSVRsRSwwQkFBVyxDQUFDO0FBQ1ZOLHVCQUFNLGNBQVVrRSxHQUFWLEVBQWU7QUFDbkIsMEJBQU9BLElBQUlPLElBQVg7QUFDRCxrQkFIUztBQUlWQyw2QkFBWSxDQUFDLFlBQVk7QUFDdkIsdUJBQUlDLFNBQVMsS0FBS0MsdUJBQUwsRUFBYjtBQUNBLDBCQUFPeEwsTUFBS3NLLGVBQUwsQ0FBcUJpQixPQUFPRSxRQUFQLEVBQXJCLEVBQXdDRixPQUFPRyxTQUFQLEVBQXhDLENBQVA7QUFDRCxrQkFIVztBQUpGLGdCQUFEO0FBSkYsY0FBRDtBQUpFLFlBQUQ7QUFoQm9CLFVBQUQsQ0FBbEM7QUFvQ0Q7QUFydkIyQjtBQUFBO0FBQUEsK0NBdXZCSHZDLENBdnZCRyxFQXV2QkFDLENBdnZCQSxFQXV2QkdlLEtBdnZCSCxFQXV2QlVDLE1BdnZCVixFQXV2QmtCdUIsS0F2dkJsQixFQXV2QnlCO0FBQ25ELGFBQUlDLE1BQU0sS0FBS3RJLFdBQWY7QUFDQXNJLGFBQUl6QyxDQUFKLEdBQVFBLENBQVI7QUFDQXlDLGFBQUl4QyxDQUFKLEdBQVFBLENBQVI7QUFDQXdDLGFBQUl6QixLQUFKLEdBQVlBLEtBQVo7QUFDQXlCLGFBQUl4QixNQUFKLEdBQWFBLE1BQWI7O0FBRUEsY0FBS3lCLFdBQUwsR0FBbUJGLEtBQW5COztBQUVBLGdCQUFPLElBQVA7QUFDRDtBQWp3QjJCO0FBQUE7QUFBQSw0QkFtd0J0QnhDLENBbndCc0IsRUFtd0JuQkMsQ0Fud0JtQixFQW13QmhCZSxLQW53QmdCLEVBbXdCVEMsTUFud0JTLEVBbXdCRHVCLEtBbndCQyxFQW13Qk07QUFDaEMsYUFBSTNMLE9BQU8sSUFBWDtBQUFBLGFBQ0VWLFNBQVNVLEtBQUtWLE1BRGhCO0FBQUEsYUFFRTRFLG9CQUFvQjVFLE9BQU84QyxnQkFBUCxDQUF3QjlDLE1BRjlDO0FBQUEsYUFHRXVFLHVCQUF1Qkssa0JBQWtCTCxvQkFIM0M7QUFBQSxhQUlFRCxvQkFBb0JNLGtCQUFrQk4saUJBSnhDO0FBQUEsYUFLRUUsc0JBQXNCSSxrQkFBa0JKLG1CQUwxQztBQUFBLGFBTUVFLGNBQWNFLGtCQUFrQkYsV0FObEM7QUFBQSxhQU9FRCxjQUFjRyxrQkFBa0JILFdBUGxDO0FBQUEsYUFRRVQsY0FBY3RELEtBQUtzRCxXQVJyQjtBQUFBLGFBU0VELFdBQVdyRCxLQUFLcUQsUUFUbEI7QUFBQSxhQVVFZ0gsRUFWRjtBQUFBLGFBV0UzSyxDQVhGO0FBQUEsYUFZRWlFLE9BWkY7QUFBQSxhQWFFbkQsUUFBUWxCLE9BQU9nQixXQUFQLENBQW1CQyxhQWI3QjtBQUFBLGFBY0VoQixVQUFVRCxPQUFPQyxPQWRuQjtBQUFBLGFBZ0JFaUcsYUFoQkY7QUFBQSxhQWlCRXNHLHVCQWpCRjtBQUFBLGFBa0JFN0ssZUFsQkY7QUFBQSxhQW1CRXFGLGVBbkJGO0FBQUEsYUFxQkUzQixhQXJCRjtBQUFBLGFBc0JFQyxvQkF0QkY7QUFBQSxhQXVCRTFELHlCQXZCRjtBQUFBLGFBeUJFNkssTUF6QkY7QUFBQSxhQTBCRUMsc0JBMUJGO0FBQUEsYUEyQkU3SyxhQTNCRjtBQUFBLGFBNEJFOEssZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFNO0FBQ3BCLGVBQUlwRyxjQUFjN0YsS0FBSzZGLFdBQXZCO0FBQUEsZUFDRXFHLHFCQURGO0FBQUEsZUFFRXZMLFVBRkY7QUFBQSxlQUdFc0Isb0JBSEY7QUFBQSxlQUlFNUMsaUJBSkY7O0FBTUFXLGdCQUFLbU0sbUJBQUw7QUFDQUQsbUNBQXdCbE0sS0FBSzhHLG9CQUFMLEVBQXhCO0FBQ0FuRyx3QkFBYXVMLHNCQUFzQnZMLFVBQW5DO0FBQ0FzQixrQ0FBdUJpSyxzQkFBc0JqSyxvQkFBN0M7QUFDQTVDLCtCQUFvQjZNLHNCQUFzQjdNLGlCQUExQzs7QUFFQXlNLHFDQUEwQixFQUExQjtBQUNBbEgsa0NBQXVCLEVBQXZCO0FBQ0FvSCxvQ0FBeUIsRUFBekI7O0FBRUEvSyw2QkFBa0IzQixPQUFPMkIsZUFBekI7QUFDQUMsdUNBQTRCNUIsT0FBTzRCLHlCQUFuQztBQUNBQywyQkFBZ0I3QixPQUFPNkIsYUFBdkI7O0FBRUE2Qyx1QkFBWWtDLFlBQVosQ0FBeUIsVUFBekI7O0FBRUEsZUFBSUwsWUFBWXpHLE9BQVosS0FBd0JvQixNQUFNaUIsSUFBTixDQUFXLFVBQVgsQ0FBeEIsSUFDRnBDLGtCQUFrQjZDLEtBQWxCLEtBQTRCNUMsT0FBTzhNLGdCQURyQyxFQUN1RDtBQUNyRHZHLHlCQUFZekcsT0FBWixHQUFzQixJQUF0QjtBQUNBeUcseUJBQVl4RyxpQkFBWixHQUFnQyxJQUFoQztBQUNBMEUseUJBQVltQyxZQUFaLENBQXlCLFVBQXpCO0FBQ0QsWUFMRCxNQUtPO0FBQ0xuQyx5QkFBWW1DLFlBQVosQ0FBeUIsU0FBekI7QUFDRDs7QUFFRCxlQUFJLENBQUM1RyxPQUFPcUMsWUFBWixFQUEwQjtBQUN4QmtDLGtDQUFxQnFDLFlBQXJCLENBQWtDLFVBQWxDO0FBQ0F0QywrQkFBa0JzQyxZQUFsQixDQUErQixVQUEvQjtBQUNBcEMsaUNBQW9Cb0MsWUFBcEIsQ0FBaUMsVUFBakM7QUFDQW5DLHlCQUFZbUMsWUFBWixDQUF5QixVQUF6QjtBQUNELFlBTEQsTUFLTztBQUNMckMsa0NBQXFCcUMsWUFBckIsQ0FBa0MsU0FBbEM7QUFDQXRDLCtCQUFrQnNDLFlBQWxCLENBQStCLFNBQS9CO0FBQ0FwQyxpQ0FBb0JvQyxZQUFwQixDQUFpQyxTQUFqQztBQUNEOztBQXpDbUI7QUFBQTtBQUFBOztBQUFBO0FBMkNwQixtQ0FBc0JqRixlQUF0QixtSUFBdUM7QUFBbEN1RSw0QkFBa0M7O0FBQ3JDc0csdUNBQXdCaE0sSUFBeEIsQ0FBNkI7QUFDM0J1Qix1QkFBTW1FLGFBRHFCO0FBRTNCdEQsd0JBQU9zRDtBQUZvQixnQkFBN0I7QUFJRDtBQWhEbUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFrRHBCM0IsZ0NBQXFCNkMsVUFBckIsQ0FBZ0NvRix1QkFBaEM7QUFDQWpJLGdDQUFxQjNCLEtBQXJCLENBQTJCdkIsVUFBM0I7O0FBRUEyRiw2QkFBa0JyRixnQkFBZ0J1RixPQUFoQixDQUF3QjdGLFVBQXhCLENBQWxCOztBQUVBLGVBQUkyRixtQkFBbUIsQ0FBdkIsRUFBMEI7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFDeEIscUNBQXNCcEYsMEJBQTBCb0YsZUFBMUIsQ0FBdEIsbUlBQWtFO0FBQTdEM0IsOEJBQTZEOztBQUNoRUMsc0NBQXFCOUUsSUFBckIsQ0FBMEI7QUFDeEJ1Qix5QkFBTXNELGNBQWM4QixRQUFkLEVBRGtCO0FBRXhCdkUsMEJBQU95QyxjQUFjOEIsUUFBZDtBQUZpQixrQkFBMUI7QUFJRDtBQU51QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBT3pCOztBQUVEN0MsNkJBQWtCOEMsVUFBbEIsQ0FBNkI5QixvQkFBN0I7QUFDQWhCLDZCQUFrQjFCLEtBQWxCLENBQXdCRCxxQkFBcUJ3RSxRQUFyQixFQUF4Qjs7QUFFQSxnQkFBS3NGLE1BQUwsSUFBZTVLLGFBQWYsRUFBOEI7QUFDNUI2SyxvQ0FBdUJsTSxJQUF2QixDQUE0QjtBQUMxQnVCLHFCQUFNRixjQUFjNEssTUFBZCxFQUFzQmhLLFVBREY7QUFFMUJHLHNCQUFPZixjQUFjNEssTUFBZCxFQUFzQi9KO0FBRkgsY0FBNUI7QUFJRDs7QUFFRDhCLCtCQUFvQjRDLFVBQXBCLENBQStCc0Ysc0JBQS9CO0FBQ0FsSSwrQkFBb0I1QixLQUFwQixDQUEwQjdDLGtCQUFrQjZDLEtBQTVDO0FBQ0QsVUF4R0g7O0FBMEdBbEMsY0FBS3FNLHlCQUFMOztBQUVBbEQsYUFBSUEsTUFBTW1ELFNBQU4sR0FBa0JoSixZQUFZNkYsQ0FBOUIsR0FBa0NBLENBQXRDO0FBQ0FDLGFBQUlBLE1BQU1rRCxTQUFOLEdBQWtCaEosWUFBWThGLENBQTlCLEdBQWtDQSxDQUF0QztBQUNBZSxpQkFBUUEsVUFBVW1DLFNBQVYsR0FBc0JoSixZQUFZNkcsS0FBbEMsR0FBMENBLEtBQWxEO0FBQ0FDLGtCQUFTQSxXQUFXa0MsU0FBWCxHQUF1QmhKLFlBQVk4RyxNQUFuQyxHQUE0Q0EsTUFBckQ7QUFDQXVCLGlCQUFRQSxVQUFVVyxTQUFWLEdBQXNCdE0sS0FBSzZMLFdBQTNCLEdBQXlDRixLQUFqRDtBQUNBLGFBQUl4QixTQUFTQyxNQUFiLEVBQXFCO0FBQ25CLGdCQUFLMUssSUFBSSxDQUFKLEVBQU8ySyxLQUFLaEgsU0FBU3hELE1BQTFCLEVBQWtDSCxJQUFJMkssRUFBdEMsRUFBMEMzSyxHQUExQyxFQUErQztBQUM3Q2lFLHVCQUFVTixTQUFTM0QsQ0FBVCxDQUFWO0FBQ0FpRSxxQkFBUTRJLElBQVIsQ0FBYXBELENBQWIsRUFBZ0JDLENBQWhCO0FBQ0Q7QUFDRjtBQUNENkM7QUFDQWpJLHFCQUFZa0MsWUFBWixDQUF5QixVQUF6QjtBQUNBbkMscUJBQVltQyxZQUFaLENBQXlCLFVBQXpCO0FBQ0E1RyxnQkFBTzhNLGdCQUFQLEdBQTBCN00sUUFBUWlOLDJCQUFSLEdBQXNDeEssUUFBaEU7O0FBRUF4QixlQUFNaU0sYUFBTixDQUFvQixDQUFDLFVBQUQsRUFBYSxnQkFBYixDQUFwQixFQUFvRFIsYUFBcEQ7QUFDRDtBQWo0QjJCO0FBQUE7QUFBQSxpQ0FtNEJqQjtBQUNUO0FBQ0Q7QUFyNEIyQjtBQUFBO0FBQUEsMkJBMkJUO0FBQ2pCLGdCQUFPLEtBQUs5TSxrQkFBWjtBQUNELFFBN0IyQjtBQUFBLHlCQStCWDJMLEdBL0JXLEVBK0JOO0FBQ3BCLGNBQUszTCxrQkFBTCxDQUF3QndCLFVBQXhCLEdBQXFDbUssSUFBSW5LLFVBQXpDO0FBQ0EsY0FBS3hCLGtCQUFMLENBQXdCOEMsb0JBQXhCLEdBQStDNkksSUFBSTdJLG9CQUFuRDtBQUNBLGNBQUs5QyxrQkFBTCxDQUF3QkUsaUJBQXhCLEdBQTRDeUwsSUFBSXpMLGlCQUFoRDtBQUNEO0FBbkMyQjs7QUFBQTtBQUFBOztBQXU0QjlCLFVBQU9YLFVBQVA7QUFDRCxFQXg0QkQsQyIsImZpbGUiOiJmY3RzLWV4dC1kYXRhYWdncmVnYXRvci1lczUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgZjdmMjA4MjU3Mzc1M2IyOWFlNjkiLCIndXNlIHN0cmljdCc7XG5jb25zdCBBZ2dyZWdhdG9yR2V0dGVyID0gcmVxdWlyZSgnLi9mY3RzLWV4dC1hZ2dyZWdhdG9yJyk7XG5cbjsoZnVuY3Rpb24gKGVudiwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGVudi5kb2N1bWVudFxuICAgICAgID8gZmFjdG9yeShlbnYpIDogZnVuY3Rpb24gKHdpbikge1xuICAgICAgICAgaWYgKCF3aW4uZG9jdW1lbnQpIHtcbiAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaW5kb3cgd2l0aCBkb2N1bWVudCBub3QgcHJlc2VudCcpO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIGZhY3Rvcnkod2luLCB0cnVlKTtcbiAgICAgICB9O1xuICB9IGVsc2Uge1xuICAgIGVudi5BZ2dyZWdhdG9yID0gZmFjdG9yeShlbnYsIHRydWUpO1xuICB9XG59KSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIChfd2luZG93LCB3aW5kb3dFeGlzdHMpIHtcbiAgdmFyIEZDID0gX3dpbmRvdy5GdXNpb25DaGFydHM7XG5cbiAgRkMucmVnaXN0ZXIoJ2V4dGVuc2lvbicsIFsncHJpdmF0ZScsICdkYXRhLWFnZ3JlZ2F0b3InLCBmdW5jdGlvbiAoKSB7XG4gICAgRkMucmVnaXN0ZXJDb21wb25lbnQoJ2V4dGVuc2lvbnMnLCAnZGF0YS1hZ2dyZWdhdG9yJywgQWdncmVnYXRvckdldHRlcih7RkM6IEZDfSkpO1xuICB9XSk7XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRlcCkge1xuICAvKipcbiAgICogQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBEYXRhIEFnZ3JlZ2F0b3IuXG4gICAqL1xuICBjbGFzcyBBZ2dyZWdhdG9yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBBZ2dyZWdhdG9yLlxuICAgICAqIEB0eXBlZGVmIHtvYmplY3R9IEFnZ3JlZ2F0b3IuYWdncmVnYXRpb25cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gdGltZVBlcmlvZCAtIFRoZSB0aW1lIGludGVydmFsIG9mIGFnZ3JlZ2F0aW9uLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lUGVyaW9kTXVsdGlwbGllciAtIFRoZSBtdWx0aXBsaWVyIG9mIHRpbWUgaW50ZXJ2YWwuXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGFnZ3JlZ2F0aW9uTWV0aG9kIC0gVGhlIG1ldGhvZCBhcHBsaWVkIHRvIGFnZ3JlZ2F0ZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAvKipcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uID0ge1xuICAgICAgICBiaW5TaXplOiBudWxsLFxuICAgICAgICBhZ2dyZWdhdGlvbk1ldGhvZDogbnVsbFxuICAgICAgfTtcbiAgICAgIHRoaXMuY29uZmlnID0ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgdGltZVBlcmlvZCwgdGltZVBlcmlvZE11bHRpcGxpZXIsIGFnZ3JlZ2F0aW9uTWV0aG9kLlxuICAgICAqIEB0eXBlIHtBZ2dyZWdhdG9yLmFnZ3JlZ2F0aW9ufVxuICAgICAqL1xuICAgIGdldCBhZ2dyZWdhdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHBsaWVkQWdncmVnYXRpb247XG4gICAgfVxuXG4gICAgc2V0IGFnZ3JlZ2F0aW9uIChvYmopIHtcbiAgICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLnRpbWVQZXJpb2QgPSBvYmoudGltZVBlcmlvZDtcbiAgICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLnRpbWVQZXJpb2RNdWx0aXBsaWVyID0gb2JqLnRpbWVQZXJpb2RNdWx0aXBsaWVyO1xuICAgICAgdGhpcy5hcHBsaWVkQWdncmVnYXRpb24uYWdncmVnYXRpb25NZXRob2QgPSBvYmouYWdncmVnYXRpb25NZXRob2Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhdmFpbGFibGUgYWdncmVnYXRpb24gb3B0aW9ucyBpbiBjb25maWd1cmF0aW9uIG9mIGV4dGVuc2lvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0QXZhaWxhYmxlbEFnZ3JlYWdhdGlvbiAoKSB7XG4gICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICAgIGRhdGFBZ2cgPSBjb25maWcuZGF0YUFnZyxcbiAgICAgICAgYXZsVGltZVBlcmlvZHMgPSBjb25maWcuYXZsVGltZVBlcmlvZHMgPSBkYXRhQWdnLmdldEFnZ3JlZ2F0aW9uVGltZVJ1bGVzKCksXG4gICAgICAgIGksXG4gICAgICAgIGxlbjtcblxuICAgICAgY29uZmlnLmF2bFRpbWVNdWx0aXBsaWVyID0gW107XG4gICAgICBsZW4gPSBhdmxUaW1lUGVyaW9kcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25maWcuYXZsVGltZU11bHRpcGxpZXIucHVzaChhdmxUaW1lUGVyaW9kc1tpXS5wb3NzaWJsZUZhY3RvcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdmFsaWQgYWdncmVnYXRpb24gdGltZSBwZXJpb2RzIGFuZCBjb3JyZXNwb25kaW5nIG11bHRpcGxpZXJzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRWYWxpZEFnZ3JlZ2F0aW9uICgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgY29uZmlnID0gc2VsZi5jb25maWcsXG4gICAgICAgIHRzT2JqZWN0ID0gc2VsZi50c09iamVjdCxcbiAgICAgICAgZGF0YUFnZyA9IGNvbmZpZy5kYXRhQWdnLFxuICAgICAgICBpLFxuICAgICAgICBqLFxuICAgICAgICBsZW4xLFxuICAgICAgICBsZW4yLFxuICAgICAgICBhdmxUaW1lUGVyaW9kcyxcbiAgICAgICAgYXZsVGltZU11bHRpcGxpZXIsXG4gICAgICAgIC8vIG1pbk51bU9mUGxvdCA9IDUsXG4gICAgICAgIG1heE51bU9mUGxvdCA9IGNvbmZpZy5jb21wb3NpdGlvbi5yZWFjdGl2ZU1vZGVsLm1vZGVsWydtYXgtcGxvdC1wb2ludCddLFxuICAgICAgICBtdWx0aXBsaWVyc0FycixcbiAgICAgICAgY3VycmVudFRpbWVMZW5ndGgsXG4gICAgICAgIHRpbWVQZXJpb2QsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGV4cGVjdGVkVGltZSxcbiAgICAgICAgbXVsdGlwbGllcixcbiAgICAgICAgbWluQmluU2l6ZTtcbiAgICAgICAgLy8gbWF4QmluU2l6ZTtcblxuICAgICAgY29uZmlnLmN1cnJlbnRUaW1lTGVuZ3RoID0gdHNPYmplY3QuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLXZpc2libGUtcmFuZ2UtZW5kJ10gLVxuICAgICAgICB0c09iamVjdC5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtdmlzaWJsZS1yYW5nZS1zdGFydCddO1xuXG4gICAgICBhdmxUaW1lUGVyaW9kcyA9IGNvbmZpZy5hdmxUaW1lUGVyaW9kcztcbiAgICAgIGF2bFRpbWVNdWx0aXBsaWVyID0gY29uZmlnLmF2bFRpbWVNdWx0aXBsaWVyO1xuICAgICAgY3VycmVudFRpbWVMZW5ndGggPSBjb25maWcuY3VycmVudFRpbWVMZW5ndGg7XG5cbiAgICAgIGNvbmZpZy5taW5CaW5TaXplID0gbWluQmluU2l6ZSA9IGN1cnJlbnRUaW1lTGVuZ3RoIC8gbWF4TnVtT2ZQbG90O1xuICAgICAgLy8gY29uZmlnLm1heEJpblNpemUgPSBtYXhCaW5TaXplID0gY3VycmVudFRpbWVMZW5ndGggLyBtaW5OdW1PZlBsb3Q7XG5cbiAgICAgIGNvbmZpZy52YWxpZFRpbWVQZXJpb2QgPSBbXTtcbiAgICAgIGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyID0gW107XG4gICAgICBjb25maWcuYXZsQWdnTWV0aG9kcyA9IGRhdGFBZ2cuZ2V0QWxsQWdncmVnYXRpb25NZXRob2QoKTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuMSA9IGF2bFRpbWVQZXJpb2RzLmxlbmd0aDsgaSA8IGxlbjE7IGkrKykge1xuICAgICAgICB0aW1lUGVyaW9kID0gYXZsVGltZVBlcmlvZHNbaV0ubmFtZTtcbiAgICAgICAgdGltZSA9IGF2bFRpbWVQZXJpb2RzW2ldLmludGVydmFsO1xuICAgICAgICBtdWx0aXBsaWVyc0FyciA9IFtdO1xuXG4gICAgICAgIGZvciAoaiA9IDAsIGxlbjIgPSBhdmxUaW1lTXVsdGlwbGllcltpXS5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcbiAgICAgICAgICBtdWx0aXBsaWVyID0gYXZsVGltZU11bHRpcGxpZXJbaV1bal07XG4gICAgICAgICAgZXhwZWN0ZWRUaW1lID0gbXVsdGlwbGllciAqIHRpbWU7XG5cbiAgICAgICAgICAvLyBpZiAoKGV4cGVjdGVkVGltZSA+PSBtaW5CaW5TaXplKSAmJiAoZXhwZWN0ZWRUaW1lIDw9IG1heEJpblNpemUpKSB7XG4gICAgICAgICAgaWYgKChleHBlY3RlZFRpbWUgPj0gbWluQmluU2l6ZSkpIHtcbiAgICAgICAgICAgIG11bHRpcGxpZXJzQXJyLnB1c2goYXZsVGltZU11bHRpcGxpZXJbaV1bal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobXVsdGlwbGllcnNBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLnB1c2gobXVsdGlwbGllcnNBcnIpO1xuICAgICAgICAgIGNvbmZpZy52YWxpZFRpbWVQZXJpb2QucHVzaCh0aW1lUGVyaW9kKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2coJ1RpbWUgUGVyaW9kOiAnLCBjb25maWcudmFsaWRUaW1lUGVyaW9kKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdOdW1iZXIgT2YgTXVsdGlwbGllcnM6ICcsIGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdNZXRob2RzOiAnLCBjb25maWcuYXZsQWdnTWV0aG9kcyk7XG4gICAgfVxuXG4gICAgZ2V0Q3VycmVudEFnZ3JlYXRpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBjb25maWcgPSBzZWxmLmNvbmZpZyxcbiAgICAgICAgZGF0YUFnZyA9IGNvbmZpZy5kYXRhQWdnLFxuICAgICAgICBjb21wb3NpdGlvbiA9IGNvbmZpZy5jb21wb3NpdGlvbixcbiAgICAgICAgbW9kZWwgPSBjb21wb3NpdGlvbi5yZWFjdGl2ZU1vZGVsLFxuICAgICAgICBjdXJyZW50QWdnTWV0aG9kLFxuICAgICAgICBzdWl0YWJsZUludGVydmFsLFxuICAgICAgICBiaW5TaXplO1xuXG4gICAgICBiaW5TaXplID0gbW9kZWwucHJvcCgnYmluLXNpemUnKSAtIDE7XG5cbiAgICAgIGlmIChpc0Zpbml0ZShiaW5TaXplKSkge1xuICAgICAgICBjb25maWcuY2FuQWdncmVnYXRlID0gdHJ1ZTtcbiAgICAgICAgc3VpdGFibGVJbnRlcnZhbCA9IGRhdGFBZ2cudGltZVJ1bGVzLmdldFN1aXRhYmxlSW50ZXJ2YWwoYmluU2l6ZSk7XG4gICAgICAgIGN1cnJlbnRBZ2dNZXRob2QgPSBtb2RlbC5wcm9wKCdhZ2dyZWdhdGlvbi1mbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnLmNhbkFnZ3JlZ2F0ZSA9IGZhbHNlO1xuICAgICAgICBzdWl0YWJsZUludGVydmFsID0ge1xuICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgIHN0ZXA6ICcnXG4gICAgICAgIH07XG4gICAgICAgIGNvbmZpZy52YWxpZFRpbWVQZXJpb2QgPSBbc3VpdGFibGVJbnRlcnZhbC5uYW1lXTtcbiAgICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIgPSBbW3N1aXRhYmxlSW50ZXJ2YWwuc3RlcF1dO1xuICAgICAgICBjb25maWcuYXZsQWdnTWV0aG9kcyA9IHtcbiAgICAgICAgICAnaW52YWxpZCc6IHtcbiAgICAgICAgICAgIGZvcm1hbE5hbWU6ICcnLFxuICAgICAgICAgICAgbmlja05hbWU6ICcnXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjdXJyZW50QWdnTWV0aG9kID0gY29uZmlnLmF2bEFnZ01ldGhvZHNbJ2ludmFsaWQnXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGltZVBlcmlvZDogc3VpdGFibGVJbnRlcnZhbC5uYW1lLFxuICAgICAgICB0aW1lUGVyaW9kTXVsdGlwbGllcjogc3VpdGFibGVJbnRlcnZhbC5zdGVwLFxuICAgICAgICBhZ2dyZWdhdGlvbk1ldGhvZDoge1xuICAgICAgICAgIHZhbHVlOiBjdXJyZW50QWdnTWV0aG9kLm5pY2tOYW1lLFxuICAgICAgICAgIHRleHQ6IGN1cnJlbnRBZ2dNZXRob2QuZm9ybWFsTmFtZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGluaXQgKHJlcXVpcmUpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgY29uZmlnID0gc2VsZi5jb25maWcsXG4gICAgICAgIHRvb2xib3hDb21wb25lbnQgPSBjb25maWcudG9vbGJveENvbXBvbmVudCA9IHt9LFxuICAgICAgICBhcGksXG4gICAgICAgIHN0b3JlLFxuICAgICAgICBjb21wb3NpdGlvbixcbiAgICAgICAgc2F2ZVRvID0gJ3RzT2JqZWN0JyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbXMgPSBbXG4gICAgICAgICAgJ2dyYXBoaWNzJyxcbiAgICAgICAgICAnZ2xvYmFsUmVhY3RpdmVNb2RlbCcsXG4gICAgICAgICAgJ2NoYXJ0JyxcbiAgICAgICAgICAnc3BhY2VNYW5hZ2VySW5zdGFuY2UnLFxuICAgICAgICAgICdjaGFydEluc3RhbmNlJyxcbiAgICAgICAgICAnc21hcnRMYWJlbCcsXG4gICAgICAgICAgZnVuY3Rpb24gYWNxdWlyZSAoKSB7XG4gICAgICAgICAgICBsZXQgaSA9IDAsXG4gICAgICAgICAgICAgIGlpID0gcmVxdWlyZWRQYXJhbXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAgcGFyYW0gPSAnJztcbiAgICAgICAgICAgIHNlbGZbc2F2ZVRvXSA9IHNlbGZbc2F2ZVRvXSB8fCB7fTtcbiAgICAgICAgICAgIHNlbGYucmVxdWlyZWRQYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICAgIHBhcmFtID0gcmVxdWlyZWRQYXJhbXNbaV07XG4gICAgICAgICAgICAgIHNlbGZbc2F2ZVRvXVtwYXJhbV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvbkluaXQoc2VsZltzYXZlVG9dKTtcbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICByZXF1aXJlKHJlcXVpcmVkUGFyYW1zKTtcblxuICAgICAgYXBpID0gc2VsZi50c09iamVjdC5jaGFydEluc3RhbmNlLmFwaUluc3RhbmNlO1xuICAgICAgc3RvcmUgPSBhcGkuZ2V0Q29tcG9uZW50U3RvcmUoKTtcbiAgICAgIGNvbmZpZy5jb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uID0gc3RvcmUuZ2V0Q2FudmFzQnlJbmRleCgwKS5jb21wb3NpdGlvbjtcbiAgICAgIGNvbmZpZy5kYXRhQWdnID0gY29tcG9zaXRpb24uaW1wbC5nZXREYXRhQWdncmVnYXRvcigpO1xuXG4gICAgICB0b29sYm94Q29tcG9uZW50LnRvb2xib3ggPSBkZXAuRkMuZ2V0Q29tcG9uZW50KCdhcGknLCAndG9vbGJveCcpO1xuICAgICAgdG9vbGJveENvbXBvbmVudC5jb25maWcgPSB7fTtcblxuICAgICAgc2VsZi50b29sYmFycyA9IFtdO1xuXG4gICAgICBzZWxmLm1lYXN1cmVtZW50ID0ge307XG5cbiAgICAgIHNlbGYudG9vbGJhcnMucHVzaChzZWxmLmNyZWF0ZVRvb2xiYXIoKSk7XG5cbiAgICAgIHdpbmRvdy5BZ2dyZWdhdG9yID0gc2VsZjtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIGNyZWF0ZVRvb2xiYXIgKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBncm91cDEsXG4gICAgICAgIGdyb3VwMixcbiAgICAgICAgZ3JvdXAzLFxuICAgICAgICB0b29sYmFyLFxuICAgICAgICB0aW1lTXVsU2VsZWN0TWVudSxcbiAgICAgICAgdGltZVBlcmlvZFNlbGVjdE1lbnUsXG4gICAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnUsXG4gICAgICAgIHJlc2V0QnV0dG9uLFxuICAgICAgICBhcHBseUJ1dHRvbixcbiAgICAgICAgY29uZmlnID0gc2VsZi5jb25maWcsXG4gICAgICAgIHRzT2JqZWN0ID0gc2VsZi50c09iamVjdCxcbiAgICAgICAgbGFiZWwsXG5cbiAgICAgICAgdG9vbGJveENvbXBvbmVudCA9IGNvbmZpZy50b29sYm94Q29tcG9uZW50LFxuICAgICAgICB0b29sYm94ID0gdG9vbGJveENvbXBvbmVudC50b29sYm94LFxuICAgICAgICB0b29sYm94Q29tcENvbmZpZyA9IHRvb2xib3hDb21wb25lbnQuY29uZmlnLFxuICAgICAgICBIb3Jpem9udGFsVG9vbGJhciA9IHRvb2xib3guSG9yaXpvbnRhbFRvb2xiYXIsXG4gICAgICAgIENvbXBvbmVudEdyb3VwID0gdG9vbGJveC5Db21wb25lbnRHcm91cCxcbiAgICAgICAgU3ltYm9sU3RvcmUgPSB0b29sYm94LlN5bWJvbFN0b3JlLFxuXG4gICAgICAgIGdyYXBoaWNzID0gdHNPYmplY3QuZ3JhcGhpY3MsXG4gICAgICAgIHBhcGVyID0gZ3JhcGhpY3MucGFwZXIsXG4gICAgICAgIGNvbnRhaW5lciA9IGdyYXBoaWNzLmNvbnRhaW5lcixcbiAgICAgICAgY2hhcnQgPSB0c09iamVjdC5jaGFydCxcbiAgICAgICAgc21hcnRMYWJlbCA9IHRzT2JqZWN0LnNtYXJ0TGFiZWwsXG5cbiAgICAgICAgbXVsdGlwbGllclZhbCxcbiAgICAgICAgdGltZU11bFNlbGVjdE1lbnVPcHQsXG4gICAgICAgIHRpbWVQZXJpb2RNZW51RGlzYWJsZUNvbmZpZyxcbiAgICAgICAgdGltZU11bHRpcGxpZXJNZW51RGlzYWJsZUNvbmZpZyxcbiAgICAgICAgYWdnTWV0aG9kTWVudURpc2FibGVvbmZpZyxcbiAgICAgICAgZHJvcERvd25NZW51U3R5bGUsXG4gICAgICAgIGFwcGx5QnV0dG9uRGlzYWJsZUNvbmZpZyxcbiAgICAgICAgcmVzZXRCdXR0b25EaXNhYmxlQ29uZmlnLFxuXG4gICAgICAgIHN0eWxlLFxuXG4gICAgICAgIGRlcGVuZGVuY2llcyA9IHtcbiAgICAgICAgICBwYXBlcjogcGFwZXIsXG4gICAgICAgICAgY2hhcnQ6IGNoYXJ0LFxuICAgICAgICAgIHNtYXJ0TGFiZWw6IHNtYXJ0TGFiZWwsXG4gICAgICAgICAgY2hhcnRDb250YWluZXI6IGNvbnRhaW5lclxuICAgICAgICB9LFxuICAgICAgICBhcHBseSA9IChzZXQpID0+IHtcbiAgICAgICAgICB2YXIgbW9kZWwgPSBjb25maWcuY29tcG9zaXRpb24ucmVhY3RpdmVNb2RlbCxcbiAgICAgICAgICAgIHRpbWVQZXJpb2RWYWwgPSB0aW1lUGVyaW9kU2VsZWN0TWVudS52YWx1ZSgpLFxuICAgICAgICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXJWYWwgPSB0aW1lTXVsU2VsZWN0TWVudS52YWx1ZSgpLFxuICAgICAgICAgICAgYWdnTWV0aG9kU2VsZWN0TWVudVZhbCA9IGFnZ01ldGhvZFNlbGVjdE1lbnUudmFsdWUoKSxcbiAgICAgICAgICAgIGtleXMsXG4gICAgICAgICAgICBiaW5TaXplLFxuICAgICAgICAgICAgdGltZUludGVydmFsLFxuICAgICAgICAgICAgYWdncmVnYXRpb24gPSBzZWxmLmFnZ3JlZ2F0aW9uLFxuICAgICAgICAgICAgY2FudmFzID0gY29uZmlnLmNvbXBvc2l0aW9uLmltcGw7XG5cbiAgICAgICAgICBmb3IgKGtleXMgb2YgY29uZmlnLmF2bFRpbWVQZXJpb2RzKSB7XG4gICAgICAgICAgICBpZiAoa2V5cy5uYW1lID09PSB0aW1lUGVyaW9kVmFsKSB7XG4gICAgICAgICAgICAgIHRpbWVJbnRlcnZhbCA9IGtleXMuaW50ZXJ2YWw7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBiaW5TaXplID0gdGltZUludGVydmFsICogTnVtYmVyKHRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsKTtcbiAgICAgICAgICBpZiAoc2V0ICYmIGlzRmluaXRlKG1vZGVsLnByb3AoJ2Jpbi1zaXplJykpKSB7XG4gICAgICAgICAgICBtb2RlbFxuICAgICAgICAgICAgICAubG9jaygpXG4gICAgICAgICAgICAgIC5wcm9wKCdiaW4tc2l6ZS1leHQnLCBiaW5TaXplKVxuICAgICAgICAgICAgICAucHJvcCgnYWdncmVnYXRpb24tZm4tZXh0JywgY29uZmlnLmF2bEFnZ01ldGhvZHNbYWdnTWV0aG9kU2VsZWN0TWVudVZhbF0pXG4gICAgICAgICAgICAgIC51bmxvY2soKTtcbiAgICAgICAgICAgIGFnZ3JlZ2F0aW9uLmJpblNpemUgPSBiaW5TaXplO1xuICAgICAgICAgICAgYWdncmVnYXRpb24uYWdncmVnYXRpb25NZXRob2QgPSBhZ2dNZXRob2RTZWxlY3RNZW51VmFsO1xuICAgICAgICAgICAgYXBwbHlCdXR0b24udXBkYXRlVmlzdWFsKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgcmVzZXRCdXR0b24udXBkYXRlVmlzdWFsKCdlbmFibGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbnZhcy5yZXNldEFnZ3JlZ2F0aW9uKCk7XG4gICAgICAgICAgICBhZ2dyZWdhdGlvbi5iaW5TaXplID0gbnVsbDtcbiAgICAgICAgICAgIGFnZ3JlZ2F0aW9uLmFnZ3JlZ2F0aW9uTWV0aG9kID0gbnVsbDtcbiAgICAgICAgICAgIHJlc2V0QnV0dG9uLnVwZGF0ZVZpc3VhbCgnZGlzYWJsZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGltZVBlcmlvZE9uQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgIHZhciB0aW1lUGVyaW9kVmFsID0gdGltZVBlcmlvZFNlbGVjdE1lbnUudmFsdWUoKSxcbiAgICAgICAgICAgIHRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsID0gdGltZU11bFNlbGVjdE1lbnUudmFsdWUoKSxcbiAgICAgICAgICAgIHByZXZUaW1lUGVyb2lkTXVsVmFsID0gdGltZVBlcmlvZE11bHRpcGxpZXJWYWwsXG4gICAgICAgICAgICB2YWxpZFRpbWVQZXJpb2QgPSBjb25maWcudmFsaWRUaW1lUGVyaW9kLFxuICAgICAgICAgICAgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciA9IGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLFxuICAgICAgICAgICAgaW5kZXhPZlRpbWVVbml0LFxuICAgICAgICAgICAgaW5kZXhPZlRpbWVNdWw7XG5cbiAgICAgICAgICBpbmRleE9mVGltZVVuaXQgPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZih0aW1lUGVyaW9kVmFsKTtcbiAgICAgICAgICBpbmRleE9mVGltZU11bCA9IHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XS5pbmRleE9mKE51bWJlcih0aW1lUGVyaW9kTXVsdGlwbGllclZhbCkpO1xuXG4gICAgICAgICAgdGltZU11bFNlbGVjdE1lbnVPcHQgPSBbXTtcbiAgICAgICAgICBmb3IgKG11bHRpcGxpZXJWYWwgb2YgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllcltpbmRleE9mVGltZVVuaXRdKSB7XG4gICAgICAgICAgICB0aW1lTXVsU2VsZWN0TWVudU9wdC5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogbXVsdGlwbGllclZhbC50b1N0cmluZygpLFxuICAgICAgICAgICAgICB2YWx1ZTogbXVsdGlwbGllclZhbC50b1N0cmluZygpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lTXVsU2VsZWN0TWVudS51cGRhdGVMaXN0KHRpbWVNdWxTZWxlY3RNZW51T3B0KTtcblxuICAgICAgICAgIGlmIChpbmRleE9mVGltZU11bCA8IDApIHtcbiAgICAgICAgICAgIHRpbWVNdWxTZWxlY3RNZW51LnZhbHVlKHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XVswXS50b1N0cmluZygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZU11bFNlbGVjdE1lbnUudmFsdWUocHJldlRpbWVQZXJvaWRNdWxWYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBvbkNoYW5nZSA9ICh0eXBlKSA9PiB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRBZ2cgPSBzZWxmLmdldEN1cnJlbnRBZ2dyZWF0aW9uKCk7XG5cbiAgICAgICAgICBpZiAoY3VycmVudEFnZy50aW1lUGVyaW9kTXVsdGlwbGllci50b1N0cmluZygpICE9PSB0aW1lTXVsU2VsZWN0TWVudS52YWx1ZSgpIHx8XG4gICAgICAgICAgICBjdXJyZW50QWdnLnRpbWVQZXJpb2QgIT09IHRpbWVQZXJpb2RTZWxlY3RNZW51LnZhbHVlKCkgfHxcbiAgICAgICAgICAgIGN1cnJlbnRBZ2cuYWdncmVnYXRpb25NZXRob2QudmFsdWUgIT09IGFnZ01ldGhvZFNlbGVjdE1lbnUudmFsdWUoKSkge1xuICAgICAgICAgICAgYXBwbHlCdXR0b24udXBkYXRlVmlzdWFsKCdlbmFibGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFwcGx5QnV0dG9uLnVwZGF0ZVZpc3VhbCgnZGlzYWJsZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgIGdyb3VwMSA9IG5ldyBDb21wb25lbnRHcm91cChkZXBlbmRlbmNpZXMpO1xuICAgICAgZ3JvdXAyID0gbmV3IENvbXBvbmVudEdyb3VwKGRlcGVuZGVuY2llcyk7XG4gICAgICBncm91cDMgPSBuZXcgQ29tcG9uZW50R3JvdXAoZGVwZW5kZW5jaWVzKTtcblxuICAgICAgdG9vbGJhciA9IG5ldyBIb3Jpem9udGFsVG9vbGJhcihkZXBlbmRlbmNpZXMpO1xuXG4gICAgICBjb25maWcudXNyQ29uZmlnID0ge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBwb3NXcnRDYW52YXM6ICd0b3AnLFxuICAgICAgICBhbGlnbm1lbnQ6ICdsZWZ0JyxcbiAgICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcbiAgICAgICAgc3R5bGVzOiB7XG4gICAgICAgICAgdGltZU11bHRpcGxpZXJJbnB1dEZpZWxkOiB7XG4gICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgJ2ZpbGwnOiAnI2ZmZicsXG4gICAgICAgICAgICAgICdsYWJlbEZpbGwnOiAnIzY5Njk2OScsXG4gICAgICAgICAgICAgICdzdHJva2UnOiAnI2M4Y2VjZCcsXG4gICAgICAgICAgICAgICdzdHJva2VXaWR0aCc6IDEsXG4gICAgICAgICAgICAgICdob3ZlclN0cm9rZSc6ICcjNjk2OTY5JyxcbiAgICAgICAgICAgICAgJ2hvdmVyU3Ryb2tlV2lkdGgnOiAxLFxuICAgICAgICAgICAgICAncmFkaXVzJzogMSxcbiAgICAgICAgICAgICAgJ3dpZHRoJzogNDUsXG4gICAgICAgICAgICAgICdoZWlnaHQnOiAyMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluYWN0aXZlOiB7XG4gICAgICAgICAgICAgICdmaWxsJzogJyNmZmYnLFxuICAgICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogMSxcbiAgICAgICAgICAgICAgJ3N0cm9rZSc6ICdyZ2IoMTkyLCAxOTIsIDE5MiknLFxuICAgICAgICAgICAgICAnbGFiZWxGaWxsJzogJyMwMDAnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aW1lUGVyaW9kSW5wdXRGaWVsZDoge1xuICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICdmaWxsJzogJyNmZmYnLFxuICAgICAgICAgICAgICAnbGFiZWxGaWxsJzogJyM2OTY5NjknLFxuICAgICAgICAgICAgICAnc3Ryb2tlJzogJyNjOGNlY2QnLFxuICAgICAgICAgICAgICAnc3Ryb2tlV2lkdGgnOiAxLFxuICAgICAgICAgICAgICAnaG92ZXJTdHJva2UnOiAnIzY5Njk2OScsXG4gICAgICAgICAgICAgICdob3ZlclN0cm9rZVdpZHRoJzogMSxcbiAgICAgICAgICAgICAgJ3JhZGl1cyc6IDEsXG4gICAgICAgICAgICAgICd3aWR0aCc6IDc1LFxuICAgICAgICAgICAgICAnaGVpZ2h0JzogMjJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmFjdGl2ZToge1xuICAgICAgICAgICAgICAnZmlsbCc6ICcjZmZmJyxcbiAgICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDEsXG4gICAgICAgICAgICAgICdzdHJva2UnOiAncmdiKDE5MiwgMTkyLCAxOTIpJyxcbiAgICAgICAgICAgICAgJ2xhYmVsRmlsbCc6ICcjMDAwJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgYWdncmVnYXRpb25NZXRob2RJbnB1dEZpZWxkOiB7XG4gICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgJ2ZpbGwnOiAnI2ZmZicsXG4gICAgICAgICAgICAgICdsYWJlbEZpbGwnOiAnIzY5Njk2OScsXG4gICAgICAgICAgICAgICdzdHJva2UnOiAnI2M4Y2VjZCcsXG4gICAgICAgICAgICAgICdzdHJva2VXaWR0aCc6IDEsXG4gICAgICAgICAgICAgICdob3ZlclN0cm9rZSc6ICcjNjk2OTY5JyxcbiAgICAgICAgICAgICAgJ2hvdmVyU3Ryb2tlV2lkdGgnOiAxLFxuICAgICAgICAgICAgICAncmFkaXVzJzogMSxcbiAgICAgICAgICAgICAgJ3dpZHRoJzogMTAwLFxuICAgICAgICAgICAgICAnaGVpZ2h0JzogMjJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmFjdGl2ZToge1xuICAgICAgICAgICAgICAnZmlsbCc6ICcjZmZmJyxcbiAgICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDEsXG4gICAgICAgICAgICAgICdzdHJva2UnOiAncmdiKDE5MiwgMTkyLCAxOTIpJyxcbiAgICAgICAgICAgICAgJ2xhYmVsRmlsbCc6ICcjMDAwJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZHJvcERvd246IHtcbiAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICAnZmlsbCc6ICcjODk4YjhiJyxcbiAgICAgICAgICAgICAgJ2xhYmVsRmlsbCc6ICcjZmZmJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAnZmlsbCc6ICcjZmZmJyxcbiAgICAgICAgICAgICAgJ2xhYmVsRmlsbCc6ICcjMDAwJyxcbiAgICAgICAgICAgICAgJ2hvdmVyRmlsbCc6ICcjZTZlOGU4JyxcbiAgICAgICAgICAgICAgJ2hvdmVyTGFiZWxGaWxsJzogJyMwMDAnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhcHBseUJ1dHRvbjoge1xuICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICdmaWxsJzogJyM1NTUnLFxuICAgICAgICAgICAgICAnbGFiZWxGaWxsJzogJyNmM2YzZjMnLFxuICAgICAgICAgICAgICAnc3Ryb2tlJzogJyNjOGNlY2QnLFxuICAgICAgICAgICAgICAnc3Ryb2tlV2lkdGgnOiAxLFxuICAgICAgICAgICAgICAnaG92ZXJGaWxsJzogJyM1NTUnLFxuICAgICAgICAgICAgICAnaG92ZXJTdHJva2VXaWR0aCc6IDEsXG4gICAgICAgICAgICAgICdob3ZlclN0cm9rZSc6ICcnLFxuICAgICAgICAgICAgICAncmFkaXVzJzogMSxcbiAgICAgICAgICAgICAgJ3dpZHRoJzogMzAsXG4gICAgICAgICAgICAgICdoZWlnaHQnOiAyMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluYWN0aXZlOiB7XG4gICAgICAgICAgICAgICdmaWxsJzogJyNiZWJlYmUnLFxuICAgICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogMyxcbiAgICAgICAgICAgICAgJ3N0cm9rZSc6ICdyZ2IoMTkyLCAxOTIsIDE5MiknLFxuICAgICAgICAgICAgICAnbGFiZWxGaWxsJzogJyNmM2YzZjMnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNldEJ1dHRvbjoge1xuICAgICAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICAgICdmaWxsJzogJyM4OThiOGInLFxuICAgICAgICAgICAgICAnbGFiZWxGaWxsJzogJyNmM2YzZjMnLFxuICAgICAgICAgICAgICAnc3Ryb2tlJzogJyNjOGNlY2QnLFxuICAgICAgICAgICAgICAnc3Ryb2tlV2lkdGgnOiAxLFxuICAgICAgICAgICAgICAnaG92ZXJGaWxsJzogJyM4OThiOGInLFxuICAgICAgICAgICAgICAnaG92ZXJTdHJva2VXaWR0aCc6IDEsXG4gICAgICAgICAgICAgICdob3ZlclN0cm9rZSc6ICcnLFxuICAgICAgICAgICAgICAncmFkaXVzJzogMSxcbiAgICAgICAgICAgICAgJ3dpZHRoJzogMzAsXG4gICAgICAgICAgICAgICdoZWlnaHQnOiAyMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluYWN0aXZlOiB7XG4gICAgICAgICAgICAgICdmaWxsJzogJyNiZWJlYmUnLFxuICAgICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogMyxcbiAgICAgICAgICAgICAgJ3N0cm9rZSc6ICdyZ2IoMTkyLCAxOTIsIDE5MiknLFxuICAgICAgICAgICAgICAnbGFiZWxGaWxsJzogJyNmM2YzZjMnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBiYXNlOiB7XG4gICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICdmb250U2l6ZSc6IDExXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzdHlsZSA9IGNvbmZpZy51c3JDb25maWcuc3R5bGVzIHx8IHt9O1xuXG4gICAgICBzdHlsZSA9IHtcbiAgICAgICAgdGltZU11bHRpcGxpZXJJbnB1dEZpZWxkOiB7XG4gICAgICAgICAgYWN0aXZlOiAoc3R5bGUudGltZU11bHRpcGxpZXJJbnB1dEZpZWxkICYmIHN0eWxlLnRpbWVNdWx0aXBsaWVySW5wdXRGaWVsZC5hY3RpdmUpIHx8IHt9LFxuICAgICAgICAgIGluYWN0aXZlOiAoc3R5bGUudGltZU11bHRpcGxpZXJJbnB1dEZpZWxkICYmIHN0eWxlLnRpbWVNdWx0aXBsaWVySW5wdXRGaWVsZC5pbmFjdGl2ZSkgfHwge31cbiAgICAgICAgfSxcbiAgICAgICAgdGltZVBlcmlvZElucHV0RmllbGQ6IHtcbiAgICAgICAgICBhY3RpdmU6IChzdHlsZS50aW1lUGVyaW9kSW5wdXRGaWVsZCAmJiBzdHlsZS50aW1lUGVyaW9kSW5wdXRGaWVsZC5hY3RpdmUpIHx8IHt9LFxuICAgICAgICAgIGluYWN0aXZlOiAoc3R5bGUudGltZVBlcmlvZElucHV0RmllbGQgJiYgc3R5bGUudGltZVBlcmlvZElucHV0RmllbGQuaW5hY3RpdmUpIHx8IHt9XG4gICAgICAgIH0sXG4gICAgICAgIGFnZ3JlZ2F0aW9uTWV0aG9kSW5wdXRGaWVsZDoge1xuICAgICAgICAgIGFjdGl2ZTogKHN0eWxlLmFnZ3JlZ2F0aW9uTWV0aG9kSW5wdXRGaWVsZCAmJiBzdHlsZS5hZ2dyZWdhdGlvbk1ldGhvZElucHV0RmllbGQuYWN0aXZlKSB8fCB7fSxcbiAgICAgICAgICBpbmFjdGl2ZTogKHN0eWxlLmFnZ3JlZ2F0aW9uTWV0aG9kSW5wdXRGaWVsZCAmJiBzdHlsZS5hZ2dyZWdhdGlvbk1ldGhvZElucHV0RmllbGQuaW5hY3RpdmUpIHx8IHt9XG4gICAgICAgIH0sXG4gICAgICAgIGRyb3BEb3duOiB7XG4gICAgICAgICAgYWN0aXZlOiAoc3R5bGUuZHJvcERvd24gJiYgc3R5bGUuZHJvcERvd24uYWN0aXZlKSB8fCB7fSxcbiAgICAgICAgICBub3JtYWw6IChzdHlsZS5kcm9wRG93biAmJiBzdHlsZS5kcm9wRG93bi5ub3JtYWwpIHx8IHt9XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5QnV0dG9uOiB7XG4gICAgICAgICAgYWN0aXZlOiAoc3R5bGUuYXBwbHlCdXR0b24gJiYgc3R5bGUuYXBwbHlCdXR0b24uYWN0aXZlKSB8fCB7fSxcbiAgICAgICAgICBpbmFjdGl2ZTogKHN0eWxlLmFwcGx5QnV0dG9uICYmIHN0eWxlLmFwcGx5QnV0dG9uLmluYWN0aXZlKSB8fCB7fVxuICAgICAgICB9LFxuICAgICAgICByZXNldEJ1dHRvbjoge1xuICAgICAgICAgIGFjdGl2ZTogKHN0eWxlLnJlc2V0QnV0dG9uICYmIHN0eWxlLnJlc2V0QnV0dG9uLmFjdGl2ZSkgfHwge30sXG4gICAgICAgICAgaW5hY3RpdmU6IChzdHlsZS5yZXNldEJ1dHRvbiAmJiBzdHlsZS5yZXNldEJ1dHRvbi5pbmFjdGl2ZSkgfHwge31cbiAgICAgICAgfSxcbiAgICAgICAgYmFzZToge1xuICAgICAgICAgIGZvbnQ6IChzdHlsZS5iYXNlICYmIHN0eWxlLmJhc2UuZm9udCkgfHwge31cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZ3JvdXAxLnNldENvbmZpZyh7XG4gICAgICAgIGZpbGw6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyVGhpY2tuZXNzOiAwXG4gICAgICB9KTtcbiAgICAgIGdyb3VwMi5zZXRDb25maWcoe1xuICAgICAgICBmaWxsOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlclRoaWNrbmVzczogMFxuICAgICAgfSk7XG4gICAgICBncm91cDMuc2V0Q29uZmlnKHtcbiAgICAgICAgZmlsbDogJyNmZmYnLFxuICAgICAgICBib3JkZXJUaGlja25lc3M6IDBcbiAgICAgIH0pO1xuXG4gICAgICB0b29sYmFyLnNldENvbmZpZyh7XG4gICAgICAgIGZpbGw6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyVGhpY2tuZXNzOiAwXG4gICAgICB9KTtcblxuICAgICAgdGltZVBlcmlvZE1lbnVEaXNhYmxlQ29uZmlnID0ge1xuICAgICAgICBkaXNhYmxlZDoge1xuICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IHN0eWxlLnRpbWVNdWx0aXBsaWVySW5wdXRGaWVsZC5pbmFjdGl2ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGltZU11bHRpcGxpZXJNZW51RGlzYWJsZUNvbmZpZyA9IHtcbiAgICAgICAgZGlzYWJsZWQ6IHtcbiAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIGRpc2FibGVkOiBzdHlsZS50aW1lUGVyaW9kSW5wdXRGaWVsZC5pbmFjdGl2ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgYWdnTWV0aG9kTWVudURpc2FibGVvbmZpZyA9IHtcbiAgICAgICAgZGlzYWJsZWQ6IHtcbiAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIGRpc2FibGVkOiBzdHlsZS5hZ2dyZWdhdGlvbk1ldGhvZElucHV0RmllbGQuaW5hY3RpdmVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGFwcGx5QnV0dG9uRGlzYWJsZUNvbmZpZyA9IHtcbiAgICAgICAgZGlzYWJsZWQ6IHtcbiAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIGRpc2FibGVkOiBzdHlsZS5hcHBseUJ1dHRvbi5pbmFjdGl2ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmVzZXRCdXR0b25EaXNhYmxlQ29uZmlnID0ge1xuICAgICAgICBkaXNhYmxlZDoge1xuICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IHN0eWxlLnJlc2V0QnV0dG9uLmluYWN0aXZlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBkcm9wRG93bk1lbnVTdHlsZSA9IHtcbiAgICAgICAgc2VsZWN0ZWQ6IHtcbiAgICAgICAgICBjb250YWluZXI6IHtcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGZpbGw6IHN0eWxlLmRyb3BEb3duLmFjdGl2ZS5maWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBmaWxsOiBzdHlsZS5kcm9wRG93bi5hY3RpdmUubGFiZWxGaWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICBjb250YWluZXI6IHtcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGZpbGw6IHN0eWxlLmRyb3BEb3duLm5vcm1hbC5maWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBmaWxsOiBzdHlsZS5kcm9wRG93bi5ub3JtYWwubGFiZWxGaWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBob3Zlcjoge1xuICAgICAgICAgIGNvbnRhaW5lcjoge1xuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgZmlsbDogc3R5bGUuZHJvcERvd24ubm9ybWFsLmhvdmVyRmlsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgZmlsbDogc3R5bGUuZHJvcERvd24ubm9ybWFsLmhvdmVyTGFiZWxGaWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBsYWJlbCA9IG5ldyB0b29sYm94LkxhYmVsKCdBZ2dyZWdhdGUgRGF0YTonLCBkZXBlbmRlbmNpZXMsIHtcbiAgICAgICAgdGV4dDoge1xuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAnZm9udC1zaXplJzogJzE0JyxcbiAgICAgICAgICAgICdmaWxsJzogJyM2OTY5NjknXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdG9vbGJveENvbXBDb25maWcudGltZVBlcmlvZFNlbGVjdE1lbnUgPSB0aW1lUGVyaW9kU2VsZWN0TWVudSA9IG5ldyB0b29sYm94LlNlbGVjdFN5bWJvbCh7fSwgZGVwZW5kZW5jaWVzLCBbXSxcbiAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUudGltZVBlcmlvZElucHV0RmllbGQuYWN0aXZlLCB7XG4gICAgICAgIGJ0blRleHRTdHlsZToge1xuICAgICAgICAgIGZvbnRTaXplOiBzdHlsZS5iYXNlLmZvbnQuZm9udFNpemVcbiAgICAgICAgfSxcbiAgICAgICAgZHJvcERvd25NZW51OiBkcm9wRG93bk1lbnVTdHlsZVxuICAgICAgfSkpO1xuICAgICAgdGltZVBlcmlvZFNlbGVjdE1lbnUuc2V0U3RhdGVDb25maWcodGltZVBlcmlvZE1lbnVEaXNhYmxlQ29uZmlnKTtcblxuICAgICAgdG9vbGJveENvbXBDb25maWcudGltZU11bFNlbGVjdE1lbnUgPSB0aW1lTXVsU2VsZWN0TWVudSA9IG5ldyB0b29sYm94LlNlbGVjdFN5bWJvbCh7fSwgZGVwZW5kZW5jaWVzLCBbXSxcbiAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUudGltZU11bHRpcGxpZXJJbnB1dEZpZWxkLmFjdGl2ZSwge1xuICAgICAgICBidG5UZXh0U3R5bGU6IHtcbiAgICAgICAgICBmb250U2l6ZTogc3R5bGUuYmFzZS5mb250LmZvbnRTaXplXG4gICAgICAgIH0sXG4gICAgICAgIGRyb3BEb3duTWVudTogZHJvcERvd25NZW51U3R5bGVcbiAgICAgIH0pKTtcbiAgICAgIHRpbWVNdWxTZWxlY3RNZW51LnNldFN0YXRlQ29uZmlnKHRpbWVNdWx0aXBsaWVyTWVudURpc2FibGVDb25maWcpO1xuXG4gICAgICB0b29sYm94Q29tcENvbmZpZy5hZ2dNZXRob2RTZWxlY3RNZW51ID0gYWdnTWV0aG9kU2VsZWN0TWVudSA9IG5ldyB0b29sYm94LlNlbGVjdFN5bWJvbCh7fSwgZGVwZW5kZW5jaWVzLCBbXSxcbiAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUuYWdncmVnYXRpb25NZXRob2RJbnB1dEZpZWxkLmFjdGl2ZSwge1xuICAgICAgICBidG5UZXh0U3R5bGU6IHtcbiAgICAgICAgICBmb250U2l6ZTogc3R5bGUuYmFzZS5mb250LmZvbnRTaXplXG4gICAgICAgIH0sXG4gICAgICAgIGRyb3BEb3duTWVudTogZHJvcERvd25NZW51U3R5bGVcbiAgICAgIH0pKTtcbiAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnUuc2V0U3RhdGVDb25maWcoYWdnTWV0aG9kTWVudURpc2FibGVvbmZpZyk7XG5cbiAgICAgIHRvb2xib3hDb21wQ29uZmlnLmFwcGx5QnV0dG9uID0gYXBwbHlCdXR0b24gPSBuZXcgdG9vbGJveC5TeW1ib2woJ0FQUExZJywgdHJ1ZSwgZGVwZW5kZW5jaWVzLFxuICAgICAgICBPYmplY3QuYXNzaWduKHN0eWxlLmFwcGx5QnV0dG9uLmFjdGl2ZSwge1xuICAgICAgICAgIGJ0blRleHRTdHlsZToge1xuICAgICAgICAgICAgZm9udFNpemU6IHN0eWxlLmJhc2UuZm9udC5mb250U2l6ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpXG4gICAgICAgIC5hdHRhY2hFdmVudEhhbmRsZXJzKHtcbiAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXBwbHkoMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIGFwcGx5QnV0dG9uLnNldFN0YXRlQ29uZmlnKGFwcGx5QnV0dG9uRGlzYWJsZUNvbmZpZyk7XG5cbiAgICAgIHRvb2xib3hDb21wQ29uZmlnLnJlc2V0QnV0dG9uID0gcmVzZXRCdXR0b24gPSBuZXcgdG9vbGJveC5TeW1ib2woJ1JFU0VUJywgdHJ1ZSwgZGVwZW5kZW5jaWVzLFxuICAgICAgICBPYmplY3QuYXNzaWduKHN0eWxlLnJlc2V0QnV0dG9uLmFjdGl2ZSwge1xuICAgICAgICAgIGJ0blRleHRTdHlsZToge1xuICAgICAgICAgICAgZm9udFNpemU6IHN0eWxlLmJhc2UuZm9udC5mb250U2l6ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpXG4gICAgICAgIC5hdHRhY2hFdmVudEhhbmRsZXJzKHtcbiAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXBwbHkoMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIHJlc2V0QnV0dG9uLnNldFN0YXRlQ29uZmlnKHJlc2V0QnV0dG9uRGlzYWJsZUNvbmZpZyk7XG5cbiAgICAgIGdyb3VwMS5hZGRTeW1ib2wobGFiZWwpO1xuICAgICAgZ3JvdXAyLmFkZFN5bWJvbCh0aW1lTXVsU2VsZWN0TWVudSk7XG4gICAgICBncm91cDIuYWRkU3ltYm9sKHRpbWVQZXJpb2RTZWxlY3RNZW51KTtcbiAgICAgIGdyb3VwMi5hZGRTeW1ib2woYWdnTWV0aG9kU2VsZWN0TWVudSk7XG4gICAgICBncm91cDMuYWRkU3ltYm9sKGFwcGx5QnV0dG9uKTtcbiAgICAgIGdyb3VwMy5hZGRTeW1ib2wocmVzZXRCdXR0b24pO1xuXG4gICAgICBTeW1ib2xTdG9yZS5yZWdpc3RlcigndGV4dEJveEljb24nLCBmdW5jdGlvbiAoeCwgeSwgcmFkLCB3LCBoLCBwYWRYLCBwYWRZKSB7XG4gICAgICAgIHZhciB4MSA9IHggLSB3IC8gMiArIHBhZFggLyAyLFxuICAgICAgICAgIHgyID0geCArIHcgLyAyIC0gcGFkWCAvIDIsXG4gICAgICAgICAgeTEgPSB5IC0gaCAvIDIgKyBwYWRZIC8gMixcbiAgICAgICAgICB5MiA9IHkgKyBoIC8gMiAtIHBhZFkgLyAyO1xuXG4gICAgICAgIHJldHVybiBbJ00nLCB4MSwgeTEsICdMJywgeDIsIHkxLCAnTCcsIHgyLCB5MiwgJ0wnLCB4MSwgeTIsICdaJ107XG4gICAgICB9KTtcblxuICAgICAgdGltZVBlcmlvZFNlbGVjdE1lbnUuYXR0YWNoRXZlbnRIYW5kbGVycyh7XG4gICAgICAgIHRleHRPbkNoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRpbWVQZXJpb2RPbkNoYW5nZSgpO1xuICAgICAgICAgIG9uQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aW1lTXVsU2VsZWN0TWVudS5hdHRhY2hFdmVudEhhbmRsZXJzKHtcbiAgICAgICAgdGV4dE9uQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgb25DaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnUuYXR0YWNoRXZlbnRIYW5kbGVycyh7XG4gICAgICAgIHRleHRPbkNoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG9uQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0b29sYmFyLmFkZENvbXBvbmVudChncm91cDEpO1xuICAgICAgdG9vbGJhci5hZGRDb21wb25lbnQoZ3JvdXAyKTtcbiAgICAgIHRvb2xiYXIuYWRkQ29tcG9uZW50KGdyb3VwMyk7XG5cbiAgICAgIHJldHVybiB0b29sYmFyO1xuICAgIH1cblxuICAgIGdldExvZ2ljYWxTcGFjZSAoYXZhaWxhYmxlV2lkdGgsIGF2YWlsYWJsZUhlaWdodCkge1xuICAgICAgdmFyIGxvZ2ljYWxTcGFjZSxcbiAgICAgICAgd2lkdGggPSAwLFxuICAgICAgICBoZWlnaHQgPSAwLFxuICAgICAgICBpLFxuICAgICAgICBsbjtcblxuICAgICAgZm9yIChpID0gMCwgbG4gPSB0aGlzLnRvb2xiYXJzLmxlbmd0aDsgaSA8IGxuOyBpKyspIHtcbiAgICAgICAgbG9naWNhbFNwYWNlID0gdGhpcy50b29sYmFyc1tpXS5nZXRMb2dpY2FsU3BhY2UoYXZhaWxhYmxlV2lkdGgsIGF2YWlsYWJsZUhlaWdodCk7XG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgobG9naWNhbFNwYWNlLndpZHRoLCB3aWR0aCk7XG4gICAgICAgIGhlaWdodCArPSBsb2dpY2FsU3BhY2UuaGVpZ2h0O1xuICAgICAgICB0aGlzLnRvb2xiYXJzW2ldLndpZHRoID0gbG9naWNhbFNwYWNlLndpZHRoO1xuICAgICAgICB0aGlzLnRvb2xiYXJzW2ldLmhlaWdodCA9IGxvZ2ljYWxTcGFjZS5oZWlnaHQ7XG4gICAgICB9XG4gICAgICBoZWlnaHQgKz0gdGhpcy5wYWRkaW5nO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBwbGFjZUluQ2FudmFzIChjb250YWluZXJJbnN0YW5jZSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICB0c09iamVjdCA9IHNlbGYudHNPYmplY3Q7XG5cbiAgICAgIHNlbGYucGFkZGluZyA9IDU7XG4gICAgICB0c09iamVjdC5zcGFjZU1hbmFnZXJJbnN0YW5jZS5hZGQoW3tcbiAgICAgICAgbmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAnRGF0YUFnZ3JlZ2F0b3InO1xuICAgICAgICB9LFxuICAgICAgICByZWY6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gb2JqWycwJ107XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGY6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfSxcbiAgICAgICAgcHJpb3JpdHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfSxcbiAgICAgICAgbGF5b3V0OiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIG9iai5pbmxpbmU7XG4gICAgICAgIH0sXG4gICAgICAgIG9yaWVudGF0aW9uOiBbe1xuICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmouaG9yaXpvbnRhbDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvc2l0aW9uOiBbe1xuICAgICAgICAgICAgdHlwZTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICByZXR1cm4gb2JqLnRvcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGlnbm1lbnQ6IFt7XG4gICAgICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLmxlZnQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRpbWVuc2lvbnM6IFtmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50Q29tcG9uZW50R3JvdXAoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5nZXRMb2dpY2FsU3BhY2UocGFyZW50LmdldFdpZHRoKCksIHBhcmVudC5nZXRIZWlnaHQoKSk7XG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH1dXG4gICAgICAgIH1dXG4gICAgICB9XSk7XG4gICAgfVxuXG4gICAgc2V0RHJhd2luZ0NvbmZpZ3VyYXRpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQsIGdyb3VwKSB7XG4gICAgICB2YXIgbWVzID0gdGhpcy5tZWFzdXJlbWVudDtcbiAgICAgIG1lcy54ID0geDtcbiAgICAgIG1lcy55ID0geTtcbiAgICAgIG1lcy53aWR0aCA9IHdpZHRoO1xuICAgICAgbWVzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgdGhpcy5wYXJlbnRHcm91cCA9IGdyb3VwO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkcmF3ICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBncm91cCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBjb25maWcgPSBzZWxmLmNvbmZpZyxcbiAgICAgICAgdG9vbGJveENvbXBDb25maWcgPSBjb25maWcudG9vbGJveENvbXBvbmVudC5jb25maWcsXG4gICAgICAgIHRpbWVQZXJpb2RTZWxlY3RNZW51ID0gdG9vbGJveENvbXBDb25maWcudGltZVBlcmlvZFNlbGVjdE1lbnUsXG4gICAgICAgIHRpbWVNdWxTZWxlY3RNZW51ID0gdG9vbGJveENvbXBDb25maWcudGltZU11bFNlbGVjdE1lbnUsXG4gICAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnUgPSB0b29sYm94Q29tcENvbmZpZy5hZ2dNZXRob2RTZWxlY3RNZW51LFxuICAgICAgICBhcHBseUJ1dHRvbiA9IHRvb2xib3hDb21wQ29uZmlnLmFwcGx5QnV0dG9uLFxuICAgICAgICByZXNldEJ1dHRvbiA9IHRvb2xib3hDb21wQ29uZmlnLnJlc2V0QnV0dG9uLFxuICAgICAgICBtZWFzdXJlbWVudCA9IHNlbGYubWVhc3VyZW1lbnQsXG4gICAgICAgIHRvb2xiYXJzID0gc2VsZi50b29sYmFycyxcbiAgICAgICAgbG4sXG4gICAgICAgIGksXG4gICAgICAgIHRvb2xiYXIsXG4gICAgICAgIG1vZGVsID0gY29uZmlnLmNvbXBvc2l0aW9uLnJlYWN0aXZlTW9kZWwsXG4gICAgICAgIGRhdGFBZ2cgPSBjb25maWcuZGF0YUFnZyxcblxuICAgICAgICB0aW1lUGVyaW9kVmFsLFxuICAgICAgICB0aW1lUGVyaW9kU2VsZWN0TWVudU9wdCxcbiAgICAgICAgdmFsaWRUaW1lUGVyaW9kLFxuICAgICAgICBpbmRleE9mVGltZVVuaXQsXG5cbiAgICAgICAgbXVsdGlwbGllclZhbCxcbiAgICAgICAgdGltZU11bFNlbGVjdE1lbnVPcHQsXG4gICAgICAgIHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIsXG5cbiAgICAgICAgYWdnVmFsLFxuICAgICAgICBhZ2dNZXRob2RTZWxlY3RNZW51T3B0LFxuICAgICAgICBhdmxBZ2dNZXRob2RzLFxuICAgICAgICByYW5nZU9uQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgIHZhciBhZ2dyZWdhdGlvbiA9IHNlbGYuYWdncmVnYXRpb24sXG4gICAgICAgICAgICBjdXJyZW50QWdncmVnYXRpb25PYmosXG4gICAgICAgICAgICB0aW1lUGVyaW9kLFxuICAgICAgICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXIsXG4gICAgICAgICAgICBhZ2dyZWdhdGlvbk1ldGhvZDtcblxuICAgICAgICAgIHNlbGYuZ2V0VmFsaWRBZ2dyZWdhdGlvbigpO1xuICAgICAgICAgIGN1cnJlbnRBZ2dyZWdhdGlvbk9iaiA9IHNlbGYuZ2V0Q3VycmVudEFnZ3JlYXRpb24oKTtcbiAgICAgICAgICB0aW1lUGVyaW9kID0gY3VycmVudEFnZ3JlZ2F0aW9uT2JqLnRpbWVQZXJpb2Q7XG4gICAgICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXIgPSBjdXJyZW50QWdncmVnYXRpb25PYmoudGltZVBlcmlvZE11bHRpcGxpZXI7XG4gICAgICAgICAgYWdncmVnYXRpb25NZXRob2QgPSBjdXJyZW50QWdncmVnYXRpb25PYmouYWdncmVnYXRpb25NZXRob2Q7XG5cbiAgICAgICAgICB0aW1lUGVyaW9kU2VsZWN0TWVudU9wdCA9IFtdO1xuICAgICAgICAgIHRpbWVNdWxTZWxlY3RNZW51T3B0ID0gW107XG4gICAgICAgICAgYWdnTWV0aG9kU2VsZWN0TWVudU9wdCA9IFtdO1xuXG4gICAgICAgICAgdmFsaWRUaW1lUGVyaW9kID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZDtcbiAgICAgICAgICB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXI7XG4gICAgICAgICAgYXZsQWdnTWV0aG9kcyA9IGNvbmZpZy5hdmxBZ2dNZXRob2RzO1xuXG4gICAgICAgICAgYXBwbHlCdXR0b24udXBkYXRlVmlzdWFsKCdkaXNhYmxlZCcpO1xuXG4gICAgICAgICAgaWYgKGFnZ3JlZ2F0aW9uLmJpblNpemUgIT09IG1vZGVsLnByb3AoJ2Jpbi1zaXplJykgJiZcbiAgICAgICAgICAgIGFnZ3JlZ2F0aW9uTWV0aG9kLnZhbHVlID09PSBjb25maWcuZGVmYXVsdEFnZ01ldGhvZCkge1xuICAgICAgICAgICAgYWdncmVnYXRpb24uYmluU2l6ZSA9IG51bGw7XG4gICAgICAgICAgICBhZ2dyZWdhdGlvbi5hZ2dyZWdhdGlvbk1ldGhvZCA9IG51bGw7XG4gICAgICAgICAgICByZXNldEJ1dHRvbi51cGRhdGVWaXN1YWwoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc2V0QnV0dG9uLnVwZGF0ZVZpc3VhbCgnZW5hYmxlZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghY29uZmlnLmNhbkFnZ3JlZ2F0ZSkge1xuICAgICAgICAgICAgdGltZVBlcmlvZFNlbGVjdE1lbnUudXBkYXRlVmlzdWFsKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgdGltZU11bFNlbGVjdE1lbnUudXBkYXRlVmlzdWFsKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgYWdnTWV0aG9kU2VsZWN0TWVudS51cGRhdGVWaXN1YWwoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICByZXNldEJ1dHRvbi51cGRhdGVWaXN1YWwoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVQZXJpb2RTZWxlY3RNZW51LnVwZGF0ZVZpc3VhbCgnZW5hYmxlZCcpO1xuICAgICAgICAgICAgdGltZU11bFNlbGVjdE1lbnUudXBkYXRlVmlzdWFsKCdlbmFibGVkJyk7XG4gICAgICAgICAgICBhZ2dNZXRob2RTZWxlY3RNZW51LnVwZGF0ZVZpc3VhbCgnZW5hYmxlZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAodGltZVBlcmlvZFZhbCBvZiB2YWxpZFRpbWVQZXJpb2QpIHtcbiAgICAgICAgICAgIHRpbWVQZXJpb2RTZWxlY3RNZW51T3B0LnB1c2goe1xuICAgICAgICAgICAgICBuYW1lOiB0aW1lUGVyaW9kVmFsLFxuICAgICAgICAgICAgICB2YWx1ZTogdGltZVBlcmlvZFZhbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZVBlcmlvZFNlbGVjdE1lbnUudXBkYXRlTGlzdCh0aW1lUGVyaW9kU2VsZWN0TWVudU9wdCk7XG4gICAgICAgICAgdGltZVBlcmlvZFNlbGVjdE1lbnUudmFsdWUodGltZVBlcmlvZCk7XG5cbiAgICAgICAgICBpbmRleE9mVGltZVVuaXQgPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZih0aW1lUGVyaW9kKTtcblxuICAgICAgICAgIGlmIChpbmRleE9mVGltZVVuaXQgPj0gMCkge1xuICAgICAgICAgICAgZm9yIChtdWx0aXBsaWVyVmFsIG9mIHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XSkge1xuICAgICAgICAgICAgICB0aW1lTXVsU2VsZWN0TWVudU9wdC5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBtdWx0aXBsaWVyVmFsLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdmFsdWU6IG11bHRpcGxpZXJWYWwudG9TdHJpbmcoKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lTXVsU2VsZWN0TWVudS51cGRhdGVMaXN0KHRpbWVNdWxTZWxlY3RNZW51T3B0KTtcbiAgICAgICAgICB0aW1lTXVsU2VsZWN0TWVudS52YWx1ZSh0aW1lUGVyaW9kTXVsdGlwbGllci50b1N0cmluZygpKTtcblxuICAgICAgICAgIGZvciAoYWdnVmFsIGluIGF2bEFnZ01ldGhvZHMpIHtcbiAgICAgICAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnVPcHQucHVzaCh7XG4gICAgICAgICAgICAgIG5hbWU6IGF2bEFnZ01ldGhvZHNbYWdnVmFsXS5mb3JtYWxOYW1lLFxuICAgICAgICAgICAgICB2YWx1ZTogYXZsQWdnTWV0aG9kc1thZ2dWYWxdLm5pY2tOYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZ2dNZXRob2RTZWxlY3RNZW51LnVwZGF0ZUxpc3QoYWdnTWV0aG9kU2VsZWN0TWVudU9wdCk7XG4gICAgICAgICAgYWdnTWV0aG9kU2VsZWN0TWVudS52YWx1ZShhZ2dyZWdhdGlvbk1ldGhvZC52YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgIHNlbGYuZ2V0QXZhaWxhYmxlbEFnZ3JlYWdhdGlvbigpO1xuXG4gICAgICB4ID0geCA9PT0gdW5kZWZpbmVkID8gbWVhc3VyZW1lbnQueCA6IHg7XG4gICAgICB5ID0geSA9PT0gdW5kZWZpbmVkID8gbWVhc3VyZW1lbnQueSA6IHk7XG4gICAgICB3aWR0aCA9IHdpZHRoID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC53aWR0aCA6IHdpZHRoO1xuICAgICAgaGVpZ2h0ID0gaGVpZ2h0ID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC5oZWlnaHQgOiBoZWlnaHQ7XG4gICAgICBncm91cCA9IGdyb3VwID09PSB1bmRlZmluZWQgPyBzZWxmLnBhcmVudEdyb3VwIDogZ3JvdXA7XG4gICAgICBpZiAod2lkdGggJiYgaGVpZ2h0KSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGxuID0gdG9vbGJhcnMubGVuZ3RoOyBpIDwgbG47IGkrKykge1xuICAgICAgICAgIHRvb2xiYXIgPSB0b29sYmFyc1tpXTtcbiAgICAgICAgICB0b29sYmFyLmRyYXcoeCwgeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJhbmdlT25DaGFuZ2UoKTtcbiAgICAgIGFwcGx5QnV0dG9uLnVwZGF0ZVZpc3VhbCgnZGlzYWJsZWQnKTtcbiAgICAgIHJlc2V0QnV0dG9uLnVwZGF0ZVZpc3VhbCgnZGlzYWJsZWQnKTtcbiAgICAgIGNvbmZpZy5kZWZhdWx0QWdnTWV0aG9kID0gZGF0YUFnZy5nZXREZWZhdWx0QWdncmVnYXRpb25NZXRob2QoKS5uaWNrTmFtZTtcblxuICAgICAgbW9kZWwub25Qcm9wc0NoYW5nZShbJ2Jpbi1zaXplJywgJ2FnZ3JlZ2F0aW9uLWZuJ10sIHJhbmdlT25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGRpc3Bvc2UgKCkge1xuICAgICAgLy8gZGlzcG9zZSBleHRlbnNpb25cbiAgICB9XG4gIH1cbiAgcmV0dXJuIEFnZ3JlZ2F0b3I7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2ZjdHMtZXh0LWFnZ3JlZ2F0b3IuanMiXSwic291cmNlUm9vdCI6IiJ9