{"version":3,"sources":["webpack:///data-aggregator-es5.min.js","webpack:///webpack/bootstrap 9b47d33ce1bba4a40538","webpack:///./src/index.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/data-aggregator-ext.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_typeof","Symbol","iterator","obj","constructor","prototype","AggregatorGetter","env","factory","document","win","Error","Aggregator","window","undefined","_window","windowExists","FC","FusionCharts","register","registerComponent","webpackPolyfill","deprecate","paths","children","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","dep","capitalize","string","charAt","toUpperCase","slice","this","appliedAggregation","binSize","aggregationMethod","config","value","len","dataAgg","avlTimePeriods","getAggregationTimeRules","avlTimeMultiplier","push","possibleFactors","j","len1","len2","multipliersArr","currentTimeLength","timePeriod","time","multiplier","minBinSize","self","tsObject","maxNumOfPlot","composition","reactiveModel","model","minimumConsecutiveDifference","dataset","category","globalReactiveModel","maximumAllowedTicks","prop","validTimePeriod","validTimePeriodMultiplier","avlAggMethods","getAllAggregationMethod","name","interval","currentAggMethod","suitableInterval","isFinite","timeRules","getSuitableInterval","timePeriodMultiplier","step","nickName","text","formalName","require","api","store","toolboxComponent","saveTo","requiredParams","ii","param","arguments","usrConfig","extData","chartInstance","apiInstance","getComponentStore","getCanvasByIndex","impl","getDataAggregator","toolbox","getComponent","toolbars","measurement","createToolbar","onPropsChange","execute","setTimeout","rangeOnChange","labelGroup","selectMenuGroup","buttonGroup","toolbar","timeMulSelectMenu","timePeriodSelectMenu","aggMethodSelectMenu","resetButton","applyButton","label","multiplierVal","timeMulSelectMenuOpt","dropDownMenuStyle","applyButtonDisableConfig","resetButtonDisableConfig","displayListAt","position","alignment","style","usrConfigStyle","toolboxCompConfig","HorizontalToolbar","ComponentGroup","SymbolStore","graphics","paper","container","chart","smartLabel","dependencies","chartContainer","timePeriodOnChange","indexOfTimeUnit","indexOfTimeMul","timePeriodVal","timePeriodMultiplierVal","prevTimePeroidMulVal","indexOf","Number","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","toString","err","return","updateList","onChange","type","currentAgg","getCurrentAggreation","updateVisual","defaultAggMethod","hPadding","styles","font-size","font-family","font-weight","fill","height","timeMultiplierInputField","active","labelFill","stroke","strokeWidth","radius","shadow","opacity","width","timePeriodInputField","aggregationMethodInputField","dropDown","normal","hoverFill","hoverLabelFill","hoverStrokeWidth","hoverStroke","inactive","stroke-width","base","font","fontSize","fontFamily","setConfig","borderThickness","disabled","selected","hover","Label","SelectSymbol","assign","btnTextStyle","dropDownMenu","margin","right","attachEventHandlers","click","apply","setStateConfig","addSymbol","x","y","rad","w","h","padX","padY","x1","x2","y1","y2","textOnChange","addComponent","availableWidth","availableHeight","logicalSpace","ln","getLogicalSpace","Math","max","padding","containerInstance","spaceManagerInstance","add","ref","priority","layout","orientation","dimensions","parent","getParentComponentGroup","getWidth","getHeight","group","mes","parentGroup","set","validTimeBin","validMethod","aggMethod","keys","timeInterval","aggregate","aggregation","canvas","drawn","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","lock","unlock","timeUnit","toLowerCase","timeMultiplier","method","getValidAggregation","includes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","resetAggregation","timePeriodSelectMenuOpt","aggVal","aggMethodSelectMenuOpt","currentAggregationObj","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","setPlaceHolderValue","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","getAvailablelAggreagation","draw","getDefaultAggregationMethod","get"],"mappings":"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","file":"data-aggregator-es5.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar AggregatorGetter = __webpack_require__(2);\n\t\n\t;(function (env, factory) {\n\t  if (( false ? 'undefined' : _typeof(module)) === 'object' && module.exports) {\n\t    module.exports = env.document ? factory(env) : function (win) {\n\t      if (!win.document) {\n\t        throw new Error('Window with document not present');\n\t      }\n\t      return factory(win, true);\n\t    };\n\t  } else {\n\t    env.Aggregator = factory(env, true);\n\t  }\n\t})(typeof window !== 'undefined' ? window : undefined, function (_window, windowExists) {\n\t  var FC = _window.FusionCharts;\n\t\n\t  FC.register('extension', ['private', 'data-aggregator', function () {\n\t    FC.registerComponent('extensions', 'data-aggregator', AggregatorGetter({ FC: FC }));\n\t  }]);\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\n\t\tif(!module.webpackPolyfill) {\n\t\t\tmodule.deprecate = function() {};\n\t\t\tmodule.paths = [];\n\t\t\t// module.parent = undefined by default\n\t\t\tmodule.children = [];\n\t\t\tmodule.webpackPolyfill = 1;\n\t\t}\n\t\treturn module;\n\t}\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tmodule.exports = function (dep) {\n\t  /**\n\t   * Capitalize the first letter of a given string and return the string\n\t   * @private\n\t   */\n\t  var capitalize = function capitalize(string) {\n\t    return string.charAt(0).toUpperCase() + string.slice(1);\n\t  };\n\t  /**\n\t   * Class representing the Data Aggregator.\n\t   */\n\t\n\t  var Aggregator = function () {\n\t    /**\n\t     * Create a Aggregator.\n\t     * @typedef {object} Aggregator.aggregation\n\t     * @property {string} binSize - The binSize applied to aggregate.\n\t     * @property {string} aggregationMethod - The method applied to aggregate.\n\t     */\n\t    function Aggregator() {\n\t      _classCallCheck(this, Aggregator);\n\t\n\t      /**\n\t       * @private\n\t       */\n\t      this.appliedAggregation = {\n\t        binSize: null,\n\t        aggregationMethod: null\n\t      };\n\t      this.config = {};\n\t    }\n\t\n\t    /**\n\t     * An object representing the binSize, aggregationMethod.\n\t     * @type {Aggregator.aggregation}\n\t     */\n\t\n\t\n\t    _createClass(Aggregator, [{\n\t      key: 'getAvailablelAggreagation',\n\t\n\t\n\t      /**\n\t       * Sets available aggregation options in configuration of extension\n\t       * @private\n\t       */\n\t      value: function getAvailablelAggreagation() {\n\t        var config = this.config,\n\t            dataAgg = config.dataAgg,\n\t            avlTimePeriods = config.avlTimePeriods = dataAgg.getAggregationTimeRules(),\n\t            i,\n\t            len;\n\t\n\t        config.avlTimeMultiplier = [];\n\t        len = avlTimePeriods.length;\n\t\n\t        for (i = 0; i < len; i++) {\n\t          config.avlTimeMultiplier.push(avlTimePeriods[i].possibleFactors);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Calculates valid aggregation time periods and corresponding multipliers\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'getValidAggregation',\n\t      value: function getValidAggregation() {\n\t        var self = this,\n\t            config = self.config,\n\t            tsObject = self.tsObject,\n\t            dataAgg = config.dataAgg,\n\t            i,\n\t            j,\n\t            len1,\n\t            len2,\n\t            avlTimePeriods,\n\t            avlTimeMultiplier,\n\t            maxNumOfPlot = config.composition.reactiveModel.model['max-plot-point'],\n\t            minimumConsecutiveDifference = config.composition.dataset.category.minimumConsecutiveDifference,\n\t            multipliersArr,\n\t            currentTimeLength,\n\t            timePeriod,\n\t            time,\n\t            binSize,\n\t            multiplier,\n\t            globalReactiveModel = tsObject.globalReactiveModel,\n\t            maximumAllowedTicks = globalReactiveModel.prop('x-axis-maximum-allowed-ticks'),\n\t            minBinSize;\n\t\n\t        config.currentTimeLength = globalReactiveModel.model['x-axis-visible-range-end'] - globalReactiveModel.model['x-axis-visible-range-start'];\n\t\n\t        avlTimePeriods = config.avlTimePeriods;\n\t        avlTimeMultiplier = config.avlTimeMultiplier;\n\t        currentTimeLength = config.currentTimeLength;\n\t\n\t        minBinSize = currentTimeLength / maxNumOfPlot;\n\t\n\t        config.validTimePeriod = [];\n\t        config.validTimePeriodMultiplier = [];\n\t        config.avlAggMethods = dataAgg.getAllAggregationMethod();\n\t\n\t        for (i = 0, len1 = avlTimePeriods.length; i < len1; i++) {\n\t          timePeriod = avlTimePeriods[i].name;\n\t          time = avlTimePeriods[i].interval;\n\t          multipliersArr = [];\n\t\n\t          for (j = 0, len2 = avlTimeMultiplier[i].length; j < len2; j++) {\n\t            multiplier = avlTimeMultiplier[i][j];\n\t            binSize = multiplier * time;\n\t\n\t            if (binSize >= minBinSize && binSize > minimumConsecutiveDifference &&\n\t            // Need to revisit\n\t            currentTimeLength > maximumAllowedTicks * binSize * 0.5) {\n\t              multipliersArr.push(avlTimeMultiplier[i][j]);\n\t            }\n\t          }\n\t          if (multipliersArr.length > 0) {\n\t            config.validTimePeriodMultiplier.push(multipliersArr);\n\t            config.validTimePeriod.push(timePeriod);\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Returns current Aggregation applied to timeseries\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'getCurrentAggreation',\n\t      value: function getCurrentAggreation() {\n\t        var self = this,\n\t            config = self.config,\n\t            dataAgg = config.dataAgg,\n\t            composition = config.composition,\n\t            model = composition.reactiveModel,\n\t            currentAggMethod,\n\t            suitableInterval,\n\t            binSize;\n\t\n\t        binSize = model.prop('bin-size') - 1;\n\t\n\t        if (isFinite(binSize)) {\n\t          suitableInterval = dataAgg.timeRules.getSuitableInterval(binSize);\n\t          currentAggMethod = model.prop('aggregation-fn');\n\t        }\n\t\n\t        return {\n\t          timePeriod: suitableInterval && suitableInterval.name,\n\t          timePeriodMultiplier: suitableInterval && suitableInterval.step,\n\t          aggregationMethod: {\n\t            value: currentAggMethod && currentAggMethod.nickName,\n\t            text: currentAggMethod && currentAggMethod.formalName\n\t          }\n\t        };\n\t      }\n\t    }, {\n\t      key: 'init',\n\t      value: function init(require) {\n\t        var self = this,\n\t            config = self.config,\n\t            tsObject,\n\t            toolboxComponent = config.toolboxComponent = {},\n\t            api,\n\t            store,\n\t            composition,\n\t            saveTo = 'tsObject',\n\t            requiredParams = ['graphics', 'globalReactiveModel', 'chart', 'spaceManagerInstance', 'chartInstance', 'smartLabel', 'extData', function acquire() {\n\t          var i = 0,\n\t              ii = requiredParams.length - 1,\n\t              param = '';\n\t          self[saveTo] = self[saveTo] || {};\n\t          self.requiredParams = {};\n\t          for (i = 0; i < ii; ++i) {\n\t            param = requiredParams[i];\n\t            self[saveTo][param] = arguments[i];\n\t          }\n\t        }];\n\t        require(requiredParams);\n\t\n\t        tsObject = self.tsObject;\n\t        config.usrConfig = tsObject.extData;\n\t\n\t        api = tsObject.chartInstance.apiInstance;\n\t        store = api.getComponentStore();\n\t        config.composition = composition = store.getCanvasByIndex(0).composition;\n\t        config.dataAgg = composition.impl.getDataAggregator();\n\t\n\t        toolboxComponent.toolbox = dep.FC.getComponent('api', 'toolbox');\n\t        toolboxComponent.config = {};\n\t\n\t        self.toolbars = [];\n\t\n\t        self.measurement = {};\n\t\n\t        self.toolbars.push(self.createToolbar());\n\t\n\t        composition.reactiveModel.onPropsChange(['bin-size', 'aggregation-fn'], function () {\n\t          if (config.execute) {\n\t            config.execute = false;\n\t            setTimeout(function () {\n\t              self.rangeOnChange();\n\t            }, 200);\n\t          }\n\t        });\n\t\n\t        window.Aggregator = self;\n\t        return self;\n\t      }\n\t\n\t      /**\n\t       * Create toolbar components\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'createToolbar',\n\t      value: function createToolbar() {\n\t        var self = this,\n\t            labelGroup,\n\t            selectMenuGroup,\n\t            buttonGroup,\n\t            toolbar,\n\t            timeMulSelectMenu,\n\t            timePeriodSelectMenu,\n\t            aggMethodSelectMenu,\n\t            resetButton,\n\t            applyButton,\n\t            config = self.config,\n\t            tsObject = self.tsObject,\n\t            label,\n\t            toolboxComponent = config.toolboxComponent,\n\t            toolbox = toolboxComponent.toolbox,\n\t            toolboxCompConfig = toolboxComponent.config,\n\t            HorizontalToolbar = toolbox.HorizontalToolbar,\n\t            ComponentGroup = toolbox.ComponentGroup,\n\t            SymbolStore = toolbox.SymbolStore,\n\t            graphics = tsObject.graphics,\n\t            paper = graphics.paper,\n\t            container = graphics.container,\n\t            chart = tsObject.chart,\n\t            smartLabel = tsObject.smartLabel,\n\t            multiplierVal,\n\t            timeMulSelectMenuOpt,\n\t            dropDownMenuStyle,\n\t            applyButtonDisableConfig,\n\t            resetButtonDisableConfig,\n\t            displayListAt,\n\t            usrConfig,\n\t            position,\n\t            alignment,\n\t            style,\n\t            usrConfigStyle,\n\t            dependencies = {\n\t          paper: paper,\n\t          chart: chart,\n\t          smartLabel: smartLabel,\n\t          chartContainer: container\n\t        },\n\t\n\t\n\t        /**\n\t         * Sets valid time multiplier on time period change from extension toolbox\n\t         * @private\n\t         */\n\t        timePeriodOnChange = function timePeriodOnChange() {\n\t          var timePeriodVal = timePeriodSelectMenu.value(),\n\t              timePeriodMultiplierVal = timeMulSelectMenu.value(),\n\t              prevTimePeroidMulVal = timePeriodMultiplierVal,\n\t              validTimePeriod = config.validTimePeriod,\n\t              validTimePeriodMultiplier = config.validTimePeriodMultiplier,\n\t              indexOfTimeUnit,\n\t              indexOfTimeMul;\n\t\n\t          indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);\n\t          indexOfTimeMul = validTimePeriodMultiplier[indexOfTimeUnit].indexOf(Number(timePeriodMultiplierVal));\n\t\n\t          timeMulSelectMenuOpt = [];\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\t\n\t          try {\n\t            for (var _iterator = validTimePeriodMultiplier[indexOfTimeUnit][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              multiplierVal = _step.value;\n\t\n\t              timeMulSelectMenuOpt.push({\n\t                name: multiplierVal.toString(),\n\t                value: multiplierVal.toString()\n\t              });\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t\n\t          timeMulSelectMenu.updateList(timeMulSelectMenuOpt);\n\t\n\t          if (indexOfTimeMul < 0) {\n\t            timeMulSelectMenu.value(validTimePeriodMultiplier[indexOfTimeUnit][0].toString());\n\t          } else {\n\t            timeMulSelectMenu.value(prevTimePeroidMulVal);\n\t          }\n\t        },\n\t\n\t\n\t        /**\n\t         * Sets state of applyButton(active/inactive) on change in value in toolbox\n\t         * @private\n\t         */\n\t        onChange = function onChange(type) {\n\t          var currentAgg = self.getCurrentAggreation();\n\t\n\t          currentAgg.timePeriodMultiplier = currentAgg.timePeriodMultiplier && currentAgg.timePeriodMultiplier.toString();\n\t\n\t          if (currentAgg.timePeriodMultiplier !== timeMulSelectMenu.value() || currentAgg.timePeriod !== timePeriodSelectMenu.value() || currentAgg.aggregationMethod.value !== aggMethodSelectMenu.value()) {\n\t            applyButton.updateVisual('enabled');\n\t          } else {\n\t            applyButton.updateVisual('disabled');\n\t          }\n\t\n\t          if (!aggMethodSelectMenu.value()) {\n\t            aggMethodSelectMenu.value(config.defaultAggMethod);\n\t          }\n\t          if (!timePeriodSelectMenu.value() && !timeMulSelectMenu.value()) {\n\t            timePeriodSelectMenu.value(config.validTimePeriod[0]);\n\t            timePeriodOnChange();\n\t          }\n\t        };\n\t\n\t        labelGroup = new ComponentGroup(dependencies, {\n\t          hPadding: 4\n\t        });\n\t        selectMenuGroup = new ComponentGroup(dependencies, {\n\t          hPadding: 0\n\t        });\n\t        buttonGroup = new ComponentGroup(dependencies, {\n\t          hPadding: 0\n\t        });\n\t\n\t        toolbar = new HorizontalToolbar(dependencies);\n\t\n\t        usrConfig = config.usrConfig;\n\t        position = usrConfig.position || 'bottom';\n\t        alignment = usrConfig.alignment || 'right';\n\t\n\t        if (position === 'top' || alignment === 'top') {\n\t          displayListAt = 'bottom';\n\t        } else if (position === 'bottom' || alignment === 'bottom') {\n\t          displayListAt = 'top';\n\t        }\n\t\n\t        usrConfigStyle = usrConfig.styles || {\n\t          label: {\n\t            'font-size': 13,\n\t            'font-family': '\"Lucida Grande\", sans-serif',\n\t            'font-weight': 'normal',\n\t            'fill': '#4b4b4b',\n\t            'height': 22\n\t          },\n\t          timeMultiplierInputField: {\n\t            active: {\n\t              'fill': '#fff',\n\t              'labelFill': '#696969',\n\t              'stroke': '#c8cecd',\n\t              'strokeWidth': 1,\n\t              'radius': 1,\n\t              // 'displayListAt': 'top',\n\t              'shadow': {\n\t                'fill': '#000',\n\t                'opacity': 0.35\n\t              },\n\t              'width': 50,\n\t              'height': 22\n\t            }\n\t          },\n\t          timePeriodInputField: {\n\t            active: {\n\t              'fill': '#fff',\n\t              'labelFill': '#696969',\n\t              'stroke': '#c8cecd',\n\t              'strokeWidth': 1,\n\t              'radius': 1,\n\t              // 'displayListAt': 'top',\n\t              'shadow': {\n\t                'fill': '#000',\n\t                'opacity': 0.35\n\t              },\n\t              'width': 90,\n\t              'height': 22\n\t            }\n\t          },\n\t          aggregationMethodInputField: {\n\t            active: {\n\t              'fill': '#fff',\n\t              'labelFill': '#696969',\n\t              'stroke': '#c8cecd',\n\t              'strokeWidth': 1,\n\t              'radius': 1,\n\t              // 'displayListAt': 'top',\n\t              'shadow': {\n\t                'fill': '#000',\n\t                'opacity': 0.35\n\t              },\n\t              'width': 100,\n\t              'height': 22\n\t            }\n\t          },\n\t          dropDown: {\n\t            active: {\n\t              'fill': '#898b8b',\n\t              'labelFill': '#fff'\n\t            },\n\t            normal: {\n\t              'fill': '#fff',\n\t              'stroke': '#898b8b',\n\t              'radius': 2,\n\t              'labelFill': '#000',\n\t              'hoverFill': '#e6e8e8',\n\t              'hoverLabelFill': '#696969'\n\t            }\n\t          },\n\t          applyButton: {\n\t            active: {\n\t              'fill': '#555',\n\t              'labelFill': '#f3f3f3',\n\t              'stroke': '#ced5d4',\n\t              'strokeWidth': 0,\n\t              'hoverFill': '#555',\n\t              'hoverStrokeWidth': 0,\n\t              'hoverStroke': '',\n\t              'radius': 1,\n\t              'shadow': {\n\t                'fill': '#000',\n\t                'opacity': 0.35\n\t              },\n\t              'width': 54,\n\t              'height': 22\n\t            },\n\t            inactive: {\n\t              'fill': '#bebebe',\n\t              'stroke-width': 0,\n\t              'stroke': '#ced5d4',\n\t              'labelFill': '#f3f3f3'\n\t            }\n\t          },\n\t          resetButton: {\n\t            active: {\n\t              'fill': '#898b8b',\n\t              'labelFill': '#f3f3f3',\n\t              'stroke': '#ced5d4',\n\t              'strokeWidth': 0,\n\t              'hoverFill': '#898b8b',\n\t              'hoverStrokeWidth': 0,\n\t              'hoverStroke': '',\n\t              'radius': 1,\n\t              'shadow': {\n\t                'fill': '#000',\n\t                'opacity': 0.35\n\t              },\n\t              'width': 54,\n\t              'height': 22\n\t            },\n\t            inactive: {\n\t              'fill': '#bebebe',\n\t              'stroke-width': 0,\n\t              'stroke': '#ced5d4',\n\t              'labelFill': '#f3f3f3'\n\t            }\n\t          },\n\t          base: {\n\t            font: {\n\t              'fontSize': 11,\n\t              // 'fontWeight': 'bold',\n\t              'fontFamily': '\"Lucida Grande\", sans-serif'\n\t              // 'fontStyle': 'italic'\n\t            }\n\t          }\n\t        };\n\t\n\t        style = usrConfigStyle || {};\n\t\n\t        style = {\n\t          label: style.label || {},\n\t          timeMultiplierInputField: {\n\t            active: style.timeMultiplierInputField && style.timeMultiplierInputField.active || {}\n\t          },\n\t          timePeriodInputField: {\n\t            active: style.timePeriodInputField && style.timePeriodInputField.active || {}\n\t          },\n\t          aggregationMethodInputField: {\n\t            active: style.aggregationMethodInputField && style.aggregationMethodInputField.active || {}\n\t          },\n\t          dropDown: {\n\t            active: style.dropDown && style.dropDown.active || {},\n\t            normal: style.dropDown && style.dropDown.normal || {}\n\t          },\n\t          applyButton: {\n\t            active: style.applyButton && style.applyButton.active || {},\n\t            inactive: style.applyButton && style.applyButton.inactive || {}\n\t          },\n\t          resetButton: {\n\t            active: style.resetButton && style.resetButton.active || {},\n\t            inactive: style.resetButton && style.resetButton.inactive || {}\n\t          },\n\t          base: {\n\t            font: style.base && style.base.font || {}\n\t          }\n\t        };\n\t\n\t        labelGroup.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t        selectMenuGroup.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t        buttonGroup.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t\n\t        toolbar.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t\n\t        applyButtonDisableConfig = {\n\t          disabled: {\n\t            config: {\n\t              disabled: style.applyButton.inactive\n\t            }\n\t          }\n\t        };\n\t\n\t        resetButtonDisableConfig = {\n\t          disabled: {\n\t            config: {\n\t              disabled: style.resetButton.inactive\n\t            }\n\t          }\n\t        };\n\t\n\t        dropDownMenuStyle = {\n\t          selected: {\n\t            container: {\n\t              style: {\n\t                fill: style.dropDown.active.fill\n\t              }\n\t            },\n\t            text: {\n\t              style: {\n\t                fill: style.dropDown.active.labelFill\n\t              }\n\t            }\n\t          },\n\t          normal: {\n\t            container: {\n\t              style: {\n\t                fill: style.dropDown.normal.fill,\n\t                stroke: style.dropDown.normal.stroke,\n\t                radius: style.dropDown.normal.radius\n\t              }\n\t            },\n\t            text: {\n\t              style: {\n\t                fill: style.dropDown.normal.labelFill\n\t              }\n\t            }\n\t          },\n\t          hover: {\n\t            container: {\n\t              style: {\n\t                fill: style.dropDown.normal.hoverFill\n\t              }\n\t            },\n\t            text: {\n\t              style: {\n\t                fill: style.dropDown.normal.hoverLabelFill\n\t              }\n\t            }\n\t          }\n\t        };\n\t\n\t        label = new toolbox.Label('Aggregate Data:', dependencies, {\n\t          container: {\n\t            height: style.label.height\n\t          },\n\t          text: {\n\t            style: style.label\n\t          }\n\t        });\n\t\n\t        toolboxCompConfig.timePeriodSelectMenu = timePeriodSelectMenu = new toolbox.SelectSymbol({}, dependencies, [], Object.assign(style.timePeriodInputField.active, {\n\t          btnTextStyle: style.base.font,\n\t          dropDownMenu: dropDownMenuStyle,\n\t          displayListAt: style.timePeriodInputField.active.displayListAt || displayListAt,\n\t          margin: {\n\t            right: 8\n\t          }\n\t        }));\n\t\n\t        toolboxCompConfig.timeMulSelectMenu = timeMulSelectMenu = new toolbox.SelectSymbol({}, dependencies, [], Object.assign(style.timeMultiplierInputField.active, {\n\t          btnTextStyle: style.base.font,\n\t          dropDownMenu: dropDownMenuStyle,\n\t          displayListAt: style.timeMultiplierInputField.active.displayListAt || displayListAt,\n\t          margin: {\n\t            right: 3\n\t          }\n\t        }));\n\t\n\t        toolboxCompConfig.aggMethodSelectMenu = aggMethodSelectMenu = new toolbox.SelectSymbol({}, dependencies, [], Object.assign(style.aggregationMethodInputField.active, {\n\t          btnTextStyle: style.base.font,\n\t          displayListAt: style.aggregationMethodInputField.active.displayListAt || displayListAt,\n\t          margin: {\n\t            right: 11\n\t          },\n\t          dropDownMenu: dropDownMenuStyle\n\t        }));\n\t\n\t        toolboxCompConfig.applyButton = applyButton = new toolbox.Symbol('APPLY', true, dependencies, Object.assign(style.applyButton.active, {\n\t          btnTextStyle: style.base.font,\n\t          margin: {\n\t            right: 3\n\t          }\n\t        })).attachEventHandlers({\n\t          click: function click() {\n\t            self.apply(1);\n\t          }\n\t        });\n\t        applyButton.setStateConfig(applyButtonDisableConfig);\n\t\n\t        toolboxCompConfig.resetButton = resetButton = new toolbox.Symbol('RESET', true, dependencies, Object.assign(style.resetButton.active, {\n\t          btnTextStyle: style.base.font,\n\t          margin: {\n\t            right: 3\n\t          }\n\t        })).attachEventHandlers({\n\t          click: function click() {\n\t            self.apply(0);\n\t          }\n\t        });\n\t        resetButton.setStateConfig(resetButtonDisableConfig);\n\t\n\t        labelGroup.addSymbol(label);\n\t        selectMenuGroup.addSymbol(timeMulSelectMenu);\n\t        selectMenuGroup.addSymbol(timePeriodSelectMenu);\n\t        selectMenuGroup.addSymbol(aggMethodSelectMenu);\n\t        buttonGroup.addSymbol(applyButton);\n\t        buttonGroup.addSymbol(resetButton);\n\t\n\t        SymbolStore.register('textBoxIcon', function (x, y, rad, w, h, padX, padY) {\n\t          var x1 = x - w / 2 + padX / 2,\n\t              x2 = x + w / 2 - padX / 2,\n\t              y1 = y - h / 2 + padY / 2,\n\t              y2 = y + h / 2 - padY / 2;\n\t\n\t          return ['M', x1, y1, 'L', x2, y1, 'L', x2, y2, 'L', x1, y2, 'Z'];\n\t        });\n\t\n\t        timePeriodSelectMenu.attachEventHandlers({\n\t          textOnChange: function textOnChange() {\n\t            timePeriodOnChange();\n\t            onChange();\n\t          }\n\t        });\n\t\n\t        timeMulSelectMenu.attachEventHandlers({\n\t          textOnChange: function textOnChange() {\n\t            onChange();\n\t          }\n\t        });\n\t\n\t        aggMethodSelectMenu.attachEventHandlers({\n\t          textOnChange: function textOnChange() {\n\t            onChange();\n\t          }\n\t        });\n\t\n\t        toolbar.addComponent(labelGroup);\n\t        toolbar.addComponent(selectMenuGroup);\n\t        toolbar.addComponent(buttonGroup);\n\t\n\t        return toolbar;\n\t      }\n\t    }, {\n\t      key: 'getLogicalSpace',\n\t      value: function getLogicalSpace(availableWidth, availableHeight) {\n\t        var logicalSpace,\n\t            width = 0,\n\t            height = 0,\n\t            i,\n\t            ln;\n\t\n\t        for (i = 0, ln = this.toolbars.length; i < ln; i++) {\n\t          logicalSpace = this.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n\t          width = Math.max(logicalSpace.width, width);\n\t          height += logicalSpace.height;\n\t          this.toolbars[i].width = logicalSpace.width;\n\t          this.toolbars[i].height = logicalSpace.height;\n\t        }\n\t        height += this.padding;\n\t        return {\n\t          width: width,\n\t          height: height\n\t        };\n\t      }\n\t    }, {\n\t      key: 'placeInCanvas',\n\t      value: function placeInCanvas(containerInstance) {\n\t        var _self = this,\n\t            tsObject = _self.tsObject,\n\t            usrConfig = _self.config.usrConfig;\n\t\n\t        _self.padding = 5;\n\t        tsObject.spaceManagerInstance.add([{\n\t          name: function name() {\n\t            return 'data-aggregator';\n\t          },\n\t          ref: function ref(obj) {\n\t            return obj['0'];\n\t          },\n\t          self: function self() {\n\t            return _self;\n\t          },\n\t          priority: function priority() {\n\t            return 2;\n\t          },\n\t          layout: function layout(obj) {\n\t            return obj[usrConfig.layout || 'inline'];\n\t          },\n\t          orientation: [{\n\t            type: function type(obj) {\n\t              return obj[usrConfig.orientation || 'horizontal'];\n\t            },\n\t            position: [{\n\t              type: function type(obj) {\n\t                return obj[usrConfig.position || 'bottom'];\n\t              },\n\t              alignment: [{\n\t                type: function type(obj) {\n\t                  return obj[usrConfig.alignment || 'right'];\n\t                },\n\t                dimensions: [function () {\n\t                  var parent = this.getParentComponentGroup();\n\t                  return _self.getLogicalSpace(parent.getWidth(), parent.getHeight());\n\t                }]\n\t              }]\n\t            }]\n\t          }]\n\t        }]);\n\t      }\n\t    }, {\n\t      key: 'setDrawingConfiguration',\n\t      value: function setDrawingConfiguration(x, y, width, height, group) {\n\t        var mes = this.measurement;\n\t        mes.x = x;\n\t        mes.y = y;\n\t        mes.width = width;\n\t        mes.height = height;\n\t\n\t        this.parentGroup = group;\n\t\n\t        return this;\n\t      }\n\t\n\t      /**\n\t       * Apply or Reset Aggregation applied through extension in timeseries\n\t       * @param {number} set - Flag to set or reset. '1' to set, '0' to reset\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'apply',\n\t      value: function apply(set) {\n\t        var self = this,\n\t            config = self.config,\n\t            toolboxCompConfig = config.toolboxComponent.config,\n\t            timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,\n\t            timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,\n\t            aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,\n\t            applyButton = toolboxCompConfig.applyButton,\n\t            resetButton = toolboxCompConfig.resetButton,\n\t            aggregate = self.tsObject.extData.aggregate || {},\n\t            validTimePeriod,\n\t            validTimePeriodMultiplier,\n\t            avlAggMethods,\n\t            indexOfTimeUnit,\n\t            validTimeBin,\n\t            validMethod,\n\t            model = config.composition.reactiveModel,\n\t            timePeriodVal,\n\t            timePeriodMultiplierVal,\n\t            aggMethod,\n\t            keys,\n\t            binSize,\n\t            timeInterval,\n\t            aggregation = self.aggregation,\n\t            canvas = config.composition.impl;\n\t\n\t        if (set) {\n\t          if (!config.drawn) {\n\t            timePeriodVal = aggregate.timeUnit && aggregate.timeUnit.toString().toLowerCase();\n\t            timePeriodMultiplierVal = aggregate.timeMultiplier;\n\t            aggMethod = aggregate.method && aggregate.method.toString();\n\t\n\t            self.getValidAggregation();\n\t            validTimePeriod = config.validTimePeriod;\n\t            validTimePeriodMultiplier = config.validTimePeriodMultiplier;\n\t            avlAggMethods = config.avlAggMethods;\n\t\n\t            if (validTimePeriod.includes(timePeriodVal)) {\n\t              indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);\n\t              if (!validTimePeriodMultiplier[indexOfTimeUnit].includes(Number(timePeriodMultiplierVal))) {\n\t                timePeriodMultiplierVal = validTimePeriodMultiplier[indexOfTimeUnit][0];\n\t              }\n\t              validTimeBin = true;\n\t            }\n\t\n\t            if (avlAggMethods[aggMethod]) {\n\t              validMethod = true;\n\t            }\n\t\n\t            if (validTimeBin || validMethod) {\n\t              if (validTimeBin) {\n\t                var _iteratorNormalCompletion2 = true;\n\t                var _didIteratorError2 = false;\n\t                var _iteratorError2 = undefined;\n\t\n\t                try {\n\t                  for (var _iterator2 = config.avlTimePeriods[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t                    keys = _step2.value;\n\t\n\t                    if (keys.name === timePeriodVal) {\n\t                      timeInterval = keys.interval;\n\t                      break;\n\t                    }\n\t                  }\n\t                } catch (err) {\n\t                  _didIteratorError2 = true;\n\t                  _iteratorError2 = err;\n\t                } finally {\n\t                  try {\n\t                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t                      _iterator2.return();\n\t                    }\n\t                  } finally {\n\t                    if (_didIteratorError2) {\n\t                      throw _iteratorError2;\n\t                    }\n\t                  }\n\t                }\n\t\n\t                binSize = timeInterval * Number(timePeriodMultiplierVal);\n\t                model.lock().prop('bin-size-ext', binSize).unlock();\n\t                aggregation.binSize = binSize;\n\t              }\n\t\n\t              if (validMethod) {\n\t                model.lock().prop('aggregation-fn-ext', config.avlAggMethods[aggMethod]).unlock();\n\t                aggregation.aggregationMethod = aggMethod;\n\t              }\n\t              applyButton.updateVisual('disabled');\n\t              resetButton.updateVisual('enabled');\n\t            }\n\t          } else {\n\t            timePeriodVal = timePeriodSelectMenu.value();\n\t            timePeriodMultiplierVal = timeMulSelectMenu.value();\n\t            aggMethod = aggMethodSelectMenu.value();\n\t\n\t            var _iteratorNormalCompletion3 = true;\n\t            var _didIteratorError3 = false;\n\t            var _iteratorError3 = undefined;\n\t\n\t            try {\n\t              for (var _iterator3 = config.avlTimePeriods[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t                keys = _step3.value;\n\t\n\t                if (keys.name === timePeriodVal) {\n\t                  timeInterval = keys.interval;\n\t                  break;\n\t                }\n\t              }\n\t            } catch (err) {\n\t              _didIteratorError3 = true;\n\t              _iteratorError3 = err;\n\t            } finally {\n\t              try {\n\t                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t                  _iterator3.return();\n\t                }\n\t              } finally {\n\t                if (_didIteratorError3) {\n\t                  throw _iteratorError3;\n\t                }\n\t              }\n\t            }\n\t\n\t            binSize = timeInterval * Number(timePeriodMultiplierVal);\n\t            model.lock().prop('bin-size-ext', binSize).prop('aggregation-fn-ext', config.avlAggMethods[aggMethod]).unlock();\n\t            aggregation.binSize = binSize;\n\t            aggregation.aggregationMethod = aggMethod;\n\t            applyButton.updateVisual('disabled');\n\t            resetButton.updateVisual('enabled');\n\t          }\n\t        } else {\n\t          canvas.resetAggregation();\n\t          aggregation.binSize = null;\n\t          aggregation.aggregationMethod = null;\n\t          resetButton.updateVisual('disabled');\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Compute and populate toolboxes with valid values on change in range of visual window\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'rangeOnChange',\n\t      value: function rangeOnChange() {\n\t        var self = this,\n\t            config = self.config,\n\t            toolboxCompConfig = config.toolboxComponent.config,\n\t            timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,\n\t            timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,\n\t            aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,\n\t            applyButton = toolboxCompConfig.applyButton,\n\t            resetButton = toolboxCompConfig.resetButton,\n\t            model = config.composition.reactiveModel,\n\t            timePeriodVal,\n\t            timePeriodSelectMenuOpt,\n\t            validTimePeriod,\n\t            indexOfTimeUnit,\n\t            multiplierVal,\n\t            timeMulSelectMenuOpt,\n\t            validTimePeriodMultiplier,\n\t            aggVal,\n\t            aggMethodSelectMenuOpt,\n\t            avlAggMethods,\n\t            aggregation = self.aggregation,\n\t            currentAggregationObj,\n\t            timePeriod,\n\t            timePeriodMultiplier,\n\t            aggregationMethod;\n\t\n\t        self.getValidAggregation();\n\t        currentAggregationObj = self.getCurrentAggreation();\n\t        timePeriod = currentAggregationObj.timePeriod;\n\t        timePeriodMultiplier = currentAggregationObj.timePeriodMultiplier;\n\t        aggregationMethod = currentAggregationObj.aggregationMethod;\n\t\n\t        timePeriodSelectMenuOpt = [];\n\t        timeMulSelectMenuOpt = [];\n\t        aggMethodSelectMenuOpt = [];\n\t\n\t        validTimePeriod = config.validTimePeriod;\n\t        validTimePeriodMultiplier = config.validTimePeriodMultiplier;\n\t        avlAggMethods = config.avlAggMethods;\n\t\n\t        applyButton.updateVisual('disabled');\n\t\n\t        if (aggregation.binSize !== model.prop('bin-size') && (aggregationMethod.value === config.defaultAggMethod || !aggregationMethod.value)) {\n\t          aggregation.binSize = null;\n\t          aggregation.aggregationMethod = null;\n\t          resetButton.updateVisual('disabled');\n\t        } else {\n\t          resetButton.updateVisual('enabled');\n\t        }\n\t\n\t        var _iteratorNormalCompletion4 = true;\n\t        var _didIteratorError4 = false;\n\t        var _iteratorError4 = undefined;\n\t\n\t        try {\n\t          for (var _iterator4 = validTimePeriod[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t            timePeriodVal = _step4.value;\n\t\n\t            timePeriodSelectMenuOpt.push({\n\t              name: capitalize(timePeriodVal),\n\t              value: timePeriodVal\n\t            });\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError4 = true;\n\t          _iteratorError4 = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t              _iterator4.return();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError4) {\n\t              throw _iteratorError4;\n\t            }\n\t          }\n\t        }\n\t\n\t        timePeriodSelectMenu.updateList(timePeriodSelectMenuOpt);\n\t        timePeriod ? timePeriodSelectMenu.value(timePeriod) : timePeriodSelectMenu.setPlaceHolderValue('');\n\t\n\t        indexOfTimeUnit = validTimePeriod.indexOf(timePeriod);\n\t\n\t        if (indexOfTimeUnit >= 0) {\n\t          var _iteratorNormalCompletion5 = true;\n\t          var _didIteratorError5 = false;\n\t          var _iteratorError5 = undefined;\n\t\n\t          try {\n\t            for (var _iterator5 = validTimePeriodMultiplier[indexOfTimeUnit][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n\t              multiplierVal = _step5.value;\n\t\n\t              timeMulSelectMenuOpt.push({\n\t                name: multiplierVal.toString(),\n\t                value: multiplierVal.toString()\n\t              });\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError5 = true;\n\t            _iteratorError5 = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n\t                _iterator5.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError5) {\n\t                throw _iteratorError5;\n\t              }\n\t            }\n\t          }\n\t        }\n\t\n\t        timeMulSelectMenu.updateList(timeMulSelectMenuOpt);\n\t        timePeriodMultiplier ? timeMulSelectMenu.value(timePeriodMultiplier.toString()) : timeMulSelectMenu.setPlaceHolderValue('');\n\t\n\t        for (aggVal in avlAggMethods) {\n\t          aggMethodSelectMenuOpt.push({\n\t            name: capitalize(avlAggMethods[aggVal].formalName),\n\t            value: avlAggMethods[aggVal].nickName\n\t          });\n\t        }\n\t\n\t        aggMethodSelectMenu.updateList(aggMethodSelectMenuOpt);\n\t        aggregationMethod.value ? aggMethodSelectMenu.value(aggregationMethod.value) : aggMethodSelectMenu.setPlaceHolderValue('');\n\t        config.execute = true;\n\t      }\n\t    }, {\n\t      key: 'draw',\n\t      value: function draw(x, y, width, height, group) {\n\t        var self = this,\n\t            config = self.config,\n\t            measurement = self.measurement,\n\t            toolbars = self.toolbars,\n\t            ln,\n\t            i,\n\t            toolbar,\n\t            dataAgg = config.dataAgg;\n\t\n\t        self.getAvailablelAggreagation();\n\t\n\t        x = x === undefined ? measurement.x : x;\n\t        y = y === undefined ? measurement.y : y;\n\t        width = width === undefined ? measurement.width : width;\n\t        height = height === undefined ? measurement.height : height;\n\t        group = group === undefined ? self.parentGroup : group;\n\t        if (width && height) {\n\t          for (i = 0, ln = toolbars.length; i < ln; i++) {\n\t            toolbar = toolbars[i];\n\t            toolbar.draw(x, y, group);\n\t          }\n\t\n\t          config.defaultAggMethod = dataAgg.getDefaultAggregationMethod().nickName;\n\t          !config.drawn && self.apply(1);\n\t          self.rangeOnChange();\n\t          config.drawn = true;\n\t        }\n\t      }\n\t    }, {\n\t      key: 'dispose',\n\t      value: function dispose() {\n\t        // dispose extension\n\t      }\n\t    }, {\n\t      key: 'aggregation',\n\t      get: function get() {\n\t        return this.appliedAggregation;\n\t      },\n\t      set: function set(obj) {\n\t        this.appliedAggregation.timePeriod = obj.timePeriod;\n\t        this.appliedAggregation.timePeriodMultiplier = obj.timePeriodMultiplier;\n\t        this.appliedAggregation.aggregationMethod = obj.aggregationMethod;\n\t      }\n\t    }]);\n\t\n\t    return Aggregator;\n\t  }();\n\t\n\t  return Aggregator;\n\t};\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// data-aggregator-es5.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9b47d33ce1bba4a40538","'use strict';\nconst AggregatorGetter = require('./data-aggregator-ext');\n\n;(function (env, factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = env.document\n       ? factory(env) : function (win) {\n         if (!win.document) {\n           throw new Error('Window with document not present');\n         }\n         return factory(win, true);\n       };\n  } else {\n    env.Aggregator = factory(env, true);\n  }\n})(typeof window !== 'undefined' ? window : this, function (_window, windowExists) {\n  var FC = _window.FusionCharts;\n\n  FC.register('extension', ['private', 'data-aggregator', function () {\n    FC.registerComponent('extensions', 'data-aggregator', AggregatorGetter({FC: FC}));\n  }]);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tmodule.children = [];\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nmodule.exports = function (dep) {\n  /**\n   * Capitalize the first letter of a given string and return the string\n   * @private\n   */\n  var capitalize = function (string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  /**\n   * Class representing the Data Aggregator.\n   */\n  class Aggregator {\n    /**\n     * Create a Aggregator.\n     * @typedef {object} Aggregator.aggregation\n     * @property {string} binSize - The binSize applied to aggregate.\n     * @property {string} aggregationMethod - The method applied to aggregate.\n     */\n    constructor () {\n      /**\n       * @private\n       */\n      this.appliedAggregation = {\n        binSize: null,\n        aggregationMethod: null\n      };\n      this.config = {};\n    }\n\n    /**\n     * An object representing the binSize, aggregationMethod.\n     * @type {Aggregator.aggregation}\n     */\n    get aggregation () {\n      return this.appliedAggregation;\n    }\n\n    set aggregation (obj) {\n      this.appliedAggregation.timePeriod = obj.timePeriod;\n      this.appliedAggregation.timePeriodMultiplier = obj.timePeriodMultiplier;\n      this.appliedAggregation.aggregationMethod = obj.aggregationMethod;\n    }\n\n    /**\n     * Sets available aggregation options in configuration of extension\n     * @private\n     */\n    getAvailablelAggreagation () {\n      var config = this.config,\n        dataAgg = config.dataAgg,\n        avlTimePeriods = config.avlTimePeriods = dataAgg.getAggregationTimeRules(),\n        i,\n        len;\n\n      config.avlTimeMultiplier = [];\n      len = avlTimePeriods.length;\n\n      for (i = 0; i < len; i++) {\n        config.avlTimeMultiplier.push(avlTimePeriods[i].possibleFactors);\n      }\n    }\n\n    /**\n     * Calculates valid aggregation time periods and corresponding multipliers\n     * @private\n     */\n    getValidAggregation () {\n      var self = this,\n        config = self.config,\n        tsObject = self.tsObject,\n        dataAgg = config.dataAgg,\n        i,\n        j,\n        len1,\n        len2,\n        avlTimePeriods,\n        avlTimeMultiplier,\n        maxNumOfPlot = config.composition.reactiveModel.model['max-plot-point'],\n        minimumConsecutiveDifference = config.composition.dataset.category.minimumConsecutiveDifference,\n        multipliersArr,\n        currentTimeLength,\n        timePeriod,\n        time,\n        binSize,\n        multiplier,\n        globalReactiveModel = tsObject.globalReactiveModel,\n        maximumAllowedTicks = globalReactiveModel.prop('x-axis-maximum-allowed-ticks'),\n        minBinSize;\n\n      config.currentTimeLength = globalReactiveModel.model['x-axis-visible-range-end'] -\n        globalReactiveModel.model['x-axis-visible-range-start'];\n\n      avlTimePeriods = config.avlTimePeriods;\n      avlTimeMultiplier = config.avlTimeMultiplier;\n      currentTimeLength = config.currentTimeLength;\n\n      minBinSize = currentTimeLength / maxNumOfPlot;\n\n      config.validTimePeriod = [];\n      config.validTimePeriodMultiplier = [];\n      config.avlAggMethods = dataAgg.getAllAggregationMethod();\n\n      for (i = 0, len1 = avlTimePeriods.length; i < len1; i++) {\n        timePeriod = avlTimePeriods[i].name;\n        time = avlTimePeriods[i].interval;\n        multipliersArr = [];\n\n        for (j = 0, len2 = avlTimeMultiplier[i].length; j < len2; j++) {\n          multiplier = avlTimeMultiplier[i][j];\n          binSize = multiplier * time;\n\n          if ((binSize >= minBinSize) && (binSize > minimumConsecutiveDifference) &&\n            // Need to revisit\n            (currentTimeLength > maximumAllowedTicks * binSize * 0.5)) {\n            multipliersArr.push(avlTimeMultiplier[i][j]);\n          }\n        }\n        if (multipliersArr.length > 0) {\n          config.validTimePeriodMultiplier.push(multipliersArr);\n          config.validTimePeriod.push(timePeriod);\n        }\n      }\n    }\n\n    /**\n     * Returns current Aggregation applied to timeseries\n     * @private\n     */\n    getCurrentAggreation () {\n      var self = this,\n        config = self.config,\n        dataAgg = config.dataAgg,\n        composition = config.composition,\n        model = composition.reactiveModel,\n        currentAggMethod,\n        suitableInterval,\n        binSize;\n\n      binSize = model.prop('bin-size') - 1;\n\n      if (isFinite(binSize)) {\n        suitableInterval = dataAgg.timeRules.getSuitableInterval(binSize);\n        currentAggMethod = model.prop('aggregation-fn');\n      }\n\n      return {\n        timePeriod: suitableInterval && suitableInterval.name,\n        timePeriodMultiplier: suitableInterval && suitableInterval.step,\n        aggregationMethod: {\n          value: currentAggMethod && currentAggMethod.nickName,\n          text: currentAggMethod && currentAggMethod.formalName\n        }\n      };\n    }\n\n    init (require) {\n      var self = this,\n        config = self.config,\n        tsObject,\n        toolboxComponent = config.toolboxComponent = {},\n        api,\n        store,\n        composition,\n        saveTo = 'tsObject',\n        requiredParams = [\n          'graphics',\n          'globalReactiveModel',\n          'chart',\n          'spaceManagerInstance',\n          'chartInstance',\n          'smartLabel',\n          'extData',\n          function acquire () {\n            let i = 0,\n              ii = requiredParams.length - 1,\n              param = '';\n            self[saveTo] = self[saveTo] || {};\n            self.requiredParams = {};\n            for (i = 0; i < ii; ++i) {\n              param = requiredParams[i];\n              self[saveTo][param] = arguments[i];\n            }\n          }\n        ];\n      require(requiredParams);\n\n      tsObject = self.tsObject;\n      config.usrConfig = tsObject.extData;\n\n      api = tsObject.chartInstance.apiInstance;\n      store = api.getComponentStore();\n      config.composition = composition = store.getCanvasByIndex(0).composition;\n      config.dataAgg = composition.impl.getDataAggregator();\n\n      toolboxComponent.toolbox = dep.FC.getComponent('api', 'toolbox');\n      toolboxComponent.config = {};\n\n      self.toolbars = [];\n\n      self.measurement = {};\n\n      self.toolbars.push(self.createToolbar());\n\n      composition.reactiveModel.onPropsChange(['bin-size', 'aggregation-fn'], function () {\n        if (config.execute) {\n          config.execute = false;\n          setTimeout(() => {\n            self.rangeOnChange();\n          }, 200);\n        }\n      });\n\n      window.Aggregator = self;\n      return self;\n    }\n\n    /**\n     * Create toolbar components\n     * @private\n     */\n    createToolbar () {\n      var self = this,\n        labelGroup,\n        selectMenuGroup,\n        buttonGroup,\n        toolbar,\n        timeMulSelectMenu,\n        timePeriodSelectMenu,\n        aggMethodSelectMenu,\n        resetButton,\n        applyButton,\n        config = self.config,\n        tsObject = self.tsObject,\n        label,\n\n        toolboxComponent = config.toolboxComponent,\n        toolbox = toolboxComponent.toolbox,\n        toolboxCompConfig = toolboxComponent.config,\n        HorizontalToolbar = toolbox.HorizontalToolbar,\n        ComponentGroup = toolbox.ComponentGroup,\n        SymbolStore = toolbox.SymbolStore,\n\n        graphics = tsObject.graphics,\n        paper = graphics.paper,\n        container = graphics.container,\n        chart = tsObject.chart,\n        smartLabel = tsObject.smartLabel,\n\n        multiplierVal,\n        timeMulSelectMenuOpt,\n        dropDownMenuStyle,\n        applyButtonDisableConfig,\n        resetButtonDisableConfig,\n        displayListAt,\n\n        usrConfig,\n        position,\n        alignment,\n\n        style,\n        usrConfigStyle,\n\n        dependencies = {\n          paper: paper,\n          chart: chart,\n          smartLabel: smartLabel,\n          chartContainer: container\n        },\n\n        /**\n         * Sets valid time multiplier on time period change from extension toolbox\n         * @private\n         */\n        timePeriodOnChange = () => {\n          var timePeriodVal = timePeriodSelectMenu.value(),\n            timePeriodMultiplierVal = timeMulSelectMenu.value(),\n            prevTimePeroidMulVal = timePeriodMultiplierVal,\n            validTimePeriod = config.validTimePeriod,\n            validTimePeriodMultiplier = config.validTimePeriodMultiplier,\n            indexOfTimeUnit,\n            indexOfTimeMul;\n\n          indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);\n          indexOfTimeMul = validTimePeriodMultiplier[indexOfTimeUnit].indexOf(Number(timePeriodMultiplierVal));\n\n          timeMulSelectMenuOpt = [];\n          for (multiplierVal of validTimePeriodMultiplier[indexOfTimeUnit]) {\n            timeMulSelectMenuOpt.push({\n              name: multiplierVal.toString(),\n              value: multiplierVal.toString()\n            });\n          }\n\n          timeMulSelectMenu.updateList(timeMulSelectMenuOpt);\n\n          if (indexOfTimeMul < 0) {\n            timeMulSelectMenu.value(validTimePeriodMultiplier[indexOfTimeUnit][0].toString());\n          } else {\n            timeMulSelectMenu.value(prevTimePeroidMulVal);\n          }\n        },\n\n        /**\n         * Sets state of applyButton(active/inactive) on change in value in toolbox\n         * @private\n         */\n        onChange = (type) => {\n          var currentAgg = self.getCurrentAggreation();\n\n          currentAgg.timePeriodMultiplier = currentAgg.timePeriodMultiplier &&\n            currentAgg.timePeriodMultiplier.toString();\n\n          if (currentAgg.timePeriodMultiplier !== timeMulSelectMenu.value() ||\n            currentAgg.timePeriod !== timePeriodSelectMenu.value() ||\n            currentAgg.aggregationMethod.value !== aggMethodSelectMenu.value()) {\n            applyButton.updateVisual('enabled');\n          } else {\n            applyButton.updateVisual('disabled');\n          }\n\n          if (!aggMethodSelectMenu.value()) {\n            aggMethodSelectMenu.value(config.defaultAggMethod);\n          }\n          if (!timePeriodSelectMenu.value() && !timeMulSelectMenu.value()) {\n            timePeriodSelectMenu.value(config.validTimePeriod[0]);\n            timePeriodOnChange();\n          }\n        };\n\n      labelGroup = new ComponentGroup(dependencies, {\n        hPadding: 4\n      });\n      selectMenuGroup = new ComponentGroup(dependencies, {\n        hPadding: 0\n      });\n      buttonGroup = new ComponentGroup(dependencies, {\n        hPadding: 0\n      });\n\n      toolbar = new HorizontalToolbar(dependencies);\n\n      usrConfig = config.usrConfig;\n      position = usrConfig.position || 'bottom';\n      alignment = usrConfig.alignment || 'right';\n\n      if (position === 'top' || alignment === 'top') {\n        displayListAt = 'bottom';\n      } else if (position === 'bottom' || alignment === 'bottom') {\n        displayListAt = 'top';\n      }\n\n      usrConfigStyle = usrConfig.styles || {\n        label: {\n          'font-size': 13,\n          'font-family': '\"Lucida Grande\", sans-serif',\n          'font-weight': 'normal',\n          'fill': '#4b4b4b',\n          'height': 22\n        },\n        timeMultiplierInputField: {\n          active: {\n            'fill': '#fff',\n            'labelFill': '#696969',\n            'stroke': '#c8cecd',\n            'strokeWidth': 1,\n            'radius': 1,\n            // 'displayListAt': 'top',\n            'shadow': {\n              'fill': '#000',\n              'opacity': 0.35\n            },\n            'width': 50,\n            'height': 22\n          }\n        },\n        timePeriodInputField: {\n          active: {\n            'fill': '#fff',\n            'labelFill': '#696969',\n            'stroke': '#c8cecd',\n            'strokeWidth': 1,\n            'radius': 1,\n            // 'displayListAt': 'top',\n            'shadow': {\n              'fill': '#000',\n              'opacity': 0.35\n            },\n            'width': 90,\n            'height': 22\n          }\n        },\n        aggregationMethodInputField: {\n          active: {\n            'fill': '#fff',\n            'labelFill': '#696969',\n            'stroke': '#c8cecd',\n            'strokeWidth': 1,\n            'radius': 1,\n            // 'displayListAt': 'top',\n            'shadow': {\n              'fill': '#000',\n              'opacity': 0.35\n            },\n            'width': 100,\n            'height': 22\n          }\n        },\n        dropDown: {\n          active: {\n            'fill': '#898b8b',\n            'labelFill': '#fff'\n          },\n          normal: {\n            'fill': '#fff',\n            'stroke': '#898b8b',\n            'radius': 2,\n            'labelFill': '#000',\n            'hoverFill': '#e6e8e8',\n            'hoverLabelFill': '#696969'\n          }\n        },\n        applyButton: {\n          active: {\n            'fill': '#555',\n            'labelFill': '#f3f3f3',\n            'stroke': '#ced5d4',\n            'strokeWidth': 0,\n            'hoverFill': '#555',\n            'hoverStrokeWidth': 0,\n            'hoverStroke': '',\n            'radius': 1,\n            'shadow': {\n              'fill': '#000',\n              'opacity': 0.35\n            },\n            'width': 54,\n            'height': 22\n          },\n          inactive: {\n            'fill': '#bebebe',\n            'stroke-width': 0,\n            'stroke': '#ced5d4',\n            'labelFill': '#f3f3f3'\n          }\n        },\n        resetButton: {\n          active: {\n            'fill': '#898b8b',\n            'labelFill': '#f3f3f3',\n            'stroke': '#ced5d4',\n            'strokeWidth': 0,\n            'hoverFill': '#898b8b',\n            'hoverStrokeWidth': 0,\n            'hoverStroke': '',\n            'radius': 1,\n            'shadow': {\n              'fill': '#000',\n              'opacity': 0.35\n            },\n            'width': 54,\n            'height': 22\n          },\n          inactive: {\n            'fill': '#bebebe',\n            'stroke-width': 0,\n            'stroke': '#ced5d4',\n            'labelFill': '#f3f3f3'\n          }\n        },\n        base: {\n          font: {\n            'fontSize': 11,\n            // 'fontWeight': 'bold',\n            'fontFamily': '\"Lucida Grande\", sans-serif'\n            // 'fontStyle': 'italic'\n          }\n        }\n      };\n\n      style = usrConfigStyle || {};\n\n      style = {\n        label: style.label || {},\n        timeMultiplierInputField: {\n          active: (style.timeMultiplierInputField && style.timeMultiplierInputField.active) || {}\n        },\n        timePeriodInputField: {\n          active: (style.timePeriodInputField && style.timePeriodInputField.active) || {}\n        },\n        aggregationMethodInputField: {\n          active: (style.aggregationMethodInputField && style.aggregationMethodInputField.active) || {}\n        },\n        dropDown: {\n          active: (style.dropDown && style.dropDown.active) || {},\n          normal: (style.dropDown && style.dropDown.normal) || {}\n        },\n        applyButton: {\n          active: (style.applyButton && style.applyButton.active) || {},\n          inactive: (style.applyButton && style.applyButton.inactive) || {}\n        },\n        resetButton: {\n          active: (style.resetButton && style.resetButton.active) || {},\n          inactive: (style.resetButton && style.resetButton.inactive) || {}\n        },\n        base: {\n          font: (style.base && style.base.font) || {}\n        }\n      };\n\n      labelGroup.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n      selectMenuGroup.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n      buttonGroup.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n\n      toolbar.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n\n      applyButtonDisableConfig = {\n        disabled: {\n          config: {\n            disabled: style.applyButton.inactive\n          }\n        }\n      };\n\n      resetButtonDisableConfig = {\n        disabled: {\n          config: {\n            disabled: style.resetButton.inactive\n          }\n        }\n      };\n\n      dropDownMenuStyle = {\n        selected: {\n          container: {\n            style: {\n              fill: style.dropDown.active.fill\n            }\n          },\n          text: {\n            style: {\n              fill: style.dropDown.active.labelFill\n            }\n          }\n        },\n        normal: {\n          container: {\n            style: {\n              fill: style.dropDown.normal.fill,\n              stroke: style.dropDown.normal.stroke,\n              radius: style.dropDown.normal.radius\n            }\n          },\n          text: {\n            style: {\n              fill: style.dropDown.normal.labelFill\n            }\n          }\n        },\n        hover: {\n          container: {\n            style: {\n              fill: style.dropDown.normal.hoverFill\n            }\n          },\n          text: {\n            style: {\n              fill: style.dropDown.normal.hoverLabelFill\n            }\n          }\n        }\n      };\n\n      label = new toolbox.Label('Aggregate Data:', dependencies, {\n        container: {\n          height: style.label.height\n        },\n        text: {\n          style: style.label\n        }\n      });\n\n      toolboxCompConfig.timePeriodSelectMenu = timePeriodSelectMenu = new toolbox.SelectSymbol({}, dependencies, [],\n      Object.assign(style.timePeriodInputField.active, {\n        btnTextStyle: style.base.font,\n        dropDownMenu: dropDownMenuStyle,\n        displayListAt: style.timePeriodInputField.active.displayListAt || displayListAt,\n        margin: {\n          right: 8\n        }\n      }));\n\n      toolboxCompConfig.timeMulSelectMenu = timeMulSelectMenu = new toolbox.SelectSymbol({}, dependencies, [],\n      Object.assign(style.timeMultiplierInputField.active, {\n        btnTextStyle: style.base.font,\n        dropDownMenu: dropDownMenuStyle,\n        displayListAt: style.timeMultiplierInputField.active.displayListAt || displayListAt,\n        margin: {\n          right: 3\n        }\n      }));\n\n      toolboxCompConfig.aggMethodSelectMenu = aggMethodSelectMenu = new toolbox.SelectSymbol({}, dependencies, [],\n      Object.assign(style.aggregationMethodInputField.active, {\n        btnTextStyle: style.base.font,\n        displayListAt: style.aggregationMethodInputField.active.displayListAt || displayListAt,\n        margin: {\n          right: 11\n        },\n        dropDownMenu: dropDownMenuStyle\n      }));\n\n      toolboxCompConfig.applyButton = applyButton = new toolbox.Symbol('APPLY', true, dependencies,\n        Object.assign(style.applyButton.active, {\n          btnTextStyle: style.base.font,\n          margin: {\n            right: 3\n          }\n        }))\n        .attachEventHandlers({\n          click: function () {\n            self.apply(1);\n          }\n        });\n      applyButton.setStateConfig(applyButtonDisableConfig);\n\n      toolboxCompConfig.resetButton = resetButton = new toolbox.Symbol('RESET', true, dependencies,\n        Object.assign(style.resetButton.active, {\n          btnTextStyle: style.base.font,\n          margin: {\n            right: 3\n          }\n        }))\n        .attachEventHandlers({\n          click: function () {\n            self.apply(0);\n          }\n        });\n      resetButton.setStateConfig(resetButtonDisableConfig);\n\n      labelGroup.addSymbol(label);\n      selectMenuGroup.addSymbol(timeMulSelectMenu);\n      selectMenuGroup.addSymbol(timePeriodSelectMenu);\n      selectMenuGroup.addSymbol(aggMethodSelectMenu);\n      buttonGroup.addSymbol(applyButton);\n      buttonGroup.addSymbol(resetButton);\n\n      SymbolStore.register('textBoxIcon', function (x, y, rad, w, h, padX, padY) {\n        var x1 = x - w / 2 + padX / 2,\n          x2 = x + w / 2 - padX / 2,\n          y1 = y - h / 2 + padY / 2,\n          y2 = y + h / 2 - padY / 2;\n\n        return ['M', x1, y1, 'L', x2, y1, 'L', x2, y2, 'L', x1, y2, 'Z'];\n      });\n\n      timePeriodSelectMenu.attachEventHandlers({\n        textOnChange: function () {\n          timePeriodOnChange();\n          onChange();\n        }\n      });\n\n      timeMulSelectMenu.attachEventHandlers({\n        textOnChange: function () {\n          onChange();\n        }\n      });\n\n      aggMethodSelectMenu.attachEventHandlers({\n        textOnChange: function () {\n          onChange();\n        }\n      });\n\n      toolbar.addComponent(labelGroup);\n      toolbar.addComponent(selectMenuGroup);\n      toolbar.addComponent(buttonGroup);\n\n      return toolbar;\n    }\n\n    getLogicalSpace (availableWidth, availableHeight) {\n      var logicalSpace,\n        width = 0,\n        height = 0,\n        i,\n        ln;\n\n      for (i = 0, ln = this.toolbars.length; i < ln; i++) {\n        logicalSpace = this.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n        width = Math.max(logicalSpace.width, width);\n        height += logicalSpace.height;\n        this.toolbars[i].width = logicalSpace.width;\n        this.toolbars[i].height = logicalSpace.height;\n      }\n      height += this.padding;\n      return {\n        width: width,\n        height: height\n      };\n    }\n\n    placeInCanvas (containerInstance) {\n      var self = this,\n        tsObject = self.tsObject,\n        usrConfig = self.config.usrConfig;\n\n      self.padding = 5;\n      tsObject.spaceManagerInstance.add([{\n        name: function () {\n          return 'data-aggregator';\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj[usrConfig.layout || 'inline'];\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj[usrConfig.orientation || 'horizontal'];\n          },\n          position: [{\n            type: function (obj) {\n              return obj[usrConfig.position || 'bottom'];\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj[usrConfig.alignment || 'right'];\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                return self.getLogicalSpace(parent.getWidth(), parent.getHeight());\n              }]\n            }]\n          }]\n        }]\n      }]);\n    }\n\n    setDrawingConfiguration (x, y, width, height, group) {\n      var mes = this.measurement;\n      mes.x = x;\n      mes.y = y;\n      mes.width = width;\n      mes.height = height;\n\n      this.parentGroup = group;\n\n      return this;\n    }\n\n    /**\n     * Apply or Reset Aggregation applied through extension in timeseries\n     * @param {number} set - Flag to set or reset. '1' to set, '0' to reset\n     * @private\n     */\n    apply (set) {\n      var self = this,\n        config = self.config,\n        toolboxCompConfig = config.toolboxComponent.config,\n        timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,\n        timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,\n        aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,\n        applyButton = toolboxCompConfig.applyButton,\n        resetButton = toolboxCompConfig.resetButton,\n\n        aggregate = self.tsObject.extData.aggregate || {},\n        validTimePeriod,\n        validTimePeriodMultiplier,\n        avlAggMethods,\n\n        indexOfTimeUnit,\n        validTimeBin,\n        validMethod,\n\n        model = config.composition.reactiveModel,\n        timePeriodVal,\n        timePeriodMultiplierVal,\n        aggMethod,\n        keys,\n        binSize,\n        timeInterval,\n        aggregation = self.aggregation,\n        canvas = config.composition.impl;\n\n      if (set) {\n        if (!config.drawn) {\n          timePeriodVal = aggregate.timeUnit && aggregate.timeUnit.toString().toLowerCase();\n          timePeriodMultiplierVal = aggregate.timeMultiplier;\n          aggMethod = aggregate.method && aggregate.method.toString();\n\n          self.getValidAggregation();\n          validTimePeriod = config.validTimePeriod;\n          validTimePeriodMultiplier = config.validTimePeriodMultiplier;\n          avlAggMethods = config.avlAggMethods;\n\n          if (validTimePeriod.includes(timePeriodVal)) {\n            indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);\n            if (!validTimePeriodMultiplier[indexOfTimeUnit].includes(Number(timePeriodMultiplierVal))) {\n              timePeriodMultiplierVal = validTimePeriodMultiplier[indexOfTimeUnit][0];\n            }\n            validTimeBin = true;\n          }\n\n          if (avlAggMethods[aggMethod]) {\n            validMethod = true;\n          }\n\n          if (validTimeBin || validMethod) {\n            if (validTimeBin) {\n              for (keys of config.avlTimePeriods) {\n                if (keys.name === timePeriodVal) {\n                  timeInterval = keys.interval;\n                  break;\n                }\n              }\n              binSize = timeInterval * Number(timePeriodMultiplierVal);\n              model\n                .lock()\n                .prop('bin-size-ext', binSize)\n                .unlock();\n              aggregation.binSize = binSize;\n            }\n\n            if (validMethod) {\n              model\n                .lock()\n                .prop('aggregation-fn-ext', config.avlAggMethods[aggMethod])\n                .unlock();\n              aggregation.aggregationMethod = aggMethod;\n            }\n            applyButton.updateVisual('disabled');\n            resetButton.updateVisual('enabled');\n          }\n        } else {\n          timePeriodVal = timePeriodSelectMenu.value();\n          timePeriodMultiplierVal = timeMulSelectMenu.value();\n          aggMethod = aggMethodSelectMenu.value();\n\n          for (keys of config.avlTimePeriods) {\n            if (keys.name === timePeriodVal) {\n              timeInterval = keys.interval;\n              break;\n            }\n          }\n          binSize = timeInterval * Number(timePeriodMultiplierVal);\n          model\n            .lock()\n            .prop('bin-size-ext', binSize)\n            .prop('aggregation-fn-ext', config.avlAggMethods[aggMethod])\n            .unlock();\n          aggregation.binSize = binSize;\n          aggregation.aggregationMethod = aggMethod;\n          applyButton.updateVisual('disabled');\n          resetButton.updateVisual('enabled');\n        }\n      } else {\n        canvas.resetAggregation();\n        aggregation.binSize = null;\n        aggregation.aggregationMethod = null;\n        resetButton.updateVisual('disabled');\n      }\n    }\n\n    /**\n     * Compute and populate toolboxes with valid values on change in range of visual window\n     * @private\n     */\n    rangeOnChange () {\n      var self = this,\n        config = self.config,\n        toolboxCompConfig = config.toolboxComponent.config,\n        timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,\n        timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,\n        aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,\n        applyButton = toolboxCompConfig.applyButton,\n        resetButton = toolboxCompConfig.resetButton,\n        model = config.composition.reactiveModel,\n\n        timePeriodVal,\n        timePeriodSelectMenuOpt,\n        validTimePeriod,\n        indexOfTimeUnit,\n\n        multiplierVal,\n        timeMulSelectMenuOpt,\n        validTimePeriodMultiplier,\n\n        aggVal,\n        aggMethodSelectMenuOpt,\n        avlAggMethods,\n\n        aggregation = self.aggregation,\n        currentAggregationObj,\n        timePeriod,\n        timePeriodMultiplier,\n        aggregationMethod;\n\n      self.getValidAggregation();\n      currentAggregationObj = self.getCurrentAggreation();\n      timePeriod = currentAggregationObj.timePeriod;\n      timePeriodMultiplier = currentAggregationObj.timePeriodMultiplier;\n      aggregationMethod = currentAggregationObj.aggregationMethod;\n\n      timePeriodSelectMenuOpt = [];\n      timeMulSelectMenuOpt = [];\n      aggMethodSelectMenuOpt = [];\n\n      validTimePeriod = config.validTimePeriod;\n      validTimePeriodMultiplier = config.validTimePeriodMultiplier;\n      avlAggMethods = config.avlAggMethods;\n\n      applyButton.updateVisual('disabled');\n\n      if (aggregation.binSize !== model.prop('bin-size') &&\n        (aggregationMethod.value === config.defaultAggMethod || !aggregationMethod.value)) {\n        aggregation.binSize = null;\n        aggregation.aggregationMethod = null;\n        resetButton.updateVisual('disabled');\n      } else {\n        resetButton.updateVisual('enabled');\n      }\n\n      for (timePeriodVal of validTimePeriod) {\n        timePeriodSelectMenuOpt.push({\n          name: capitalize(timePeriodVal),\n          value: timePeriodVal\n        });\n      }\n\n      timePeriodSelectMenu.updateList(timePeriodSelectMenuOpt);\n      timePeriod ? timePeriodSelectMenu.value(timePeriod) : timePeriodSelectMenu.setPlaceHolderValue('');\n\n      indexOfTimeUnit = validTimePeriod.indexOf(timePeriod);\n\n      if (indexOfTimeUnit >= 0) {\n        for (multiplierVal of validTimePeriodMultiplier[indexOfTimeUnit]) {\n          timeMulSelectMenuOpt.push({\n            name: multiplierVal.toString(),\n            value: multiplierVal.toString()\n          });\n        }\n      }\n\n      timeMulSelectMenu.updateList(timeMulSelectMenuOpt);\n      timePeriodMultiplier ? timeMulSelectMenu.value(timePeriodMultiplier.toString())\n        : timeMulSelectMenu.setPlaceHolderValue('');\n\n      for (aggVal in avlAggMethods) {\n        aggMethodSelectMenuOpt.push({\n          name: capitalize(avlAggMethods[aggVal].formalName),\n          value: avlAggMethods[aggVal].nickName\n        });\n      }\n\n      aggMethodSelectMenu.updateList(aggMethodSelectMenuOpt);\n      aggregationMethod.value ? aggMethodSelectMenu.value(aggregationMethod.value)\n        : aggMethodSelectMenu.setPlaceHolderValue('');\n      config.execute = true;\n    }\n\n    draw (x, y, width, height, group) {\n      var self = this,\n        config = self.config,\n        measurement = self.measurement,\n        toolbars = self.toolbars,\n        ln,\n        i,\n        toolbar,\n        dataAgg = config.dataAgg;\n\n      self.getAvailablelAggreagation();\n\n      x = x === undefined ? measurement.x : x;\n      y = y === undefined ? measurement.y : y;\n      width = width === undefined ? measurement.width : width;\n      height = height === undefined ? measurement.height : height;\n      group = group === undefined ? self.parentGroup : group;\n      if (width && height) {\n        for (i = 0, ln = toolbars.length; i < ln; i++) {\n          toolbar = toolbars[i];\n          toolbar.draw(x, y, group);\n        }\n\n        config.defaultAggMethod = dataAgg.getDefaultAggregationMethod().nickName;\n        !config.drawn && self.apply(1);\n        self.rangeOnChange();\n        config.drawn = true;\n      }\n    }\n\n    dispose () {\n      // dispose extension\n    }\n  }\n  return Aggregator;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/data-aggregator-ext.js"],"sourceRoot":""}