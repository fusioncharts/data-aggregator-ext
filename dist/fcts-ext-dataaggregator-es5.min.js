!function(t){function e(i){if(n[i])return n[i].exports;var o=n[i]={exports:{},id:i,loaded:!1};return t[i].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";var i=n(1),o=n(2),r=new o;r.register("extension",["data-aggregator",function(t){var e=this,n=e.extAPI;console.log(t),n(new i)}])},function(t,e){(function(e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function(){function t(){n(this,t),this.appliedAggregation={timePeriod:null,timePeriodMultiplier:0,aggregationMethod:null}}return i(t,[{key:"setAggregation",value:function(t){return this.aggregation=t,!0}},{key:"reset",value:function(){}},{key:"init",value:function(t){t("X-Axis","Y-Axis",function(t,n){e.x=t,e.y=n})}},{key:"placeInCanvas",value:function(){var t=this.setAggregation({timePeriod:"month",timePeriodMultiplier:3,aggregationMethod:"sum"});console.log(this.aggregation,t)}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}},{key:"aggregation",get:function(){return this.appliedAggregation},set:function(t){this.appliedAggregation.timePeriod=t.timePeriod,this.appliedAggregation.timePeriodMultiplier=t.timePeriodMultiplier,this.appliedAggregation.aggregationMethod=t.aggregationMethod}}]),t}();t.exports=o}).call(e,function(){return this}())},function(t,e){"use strict";var n=function(){};n.prototype.register=function(t,e){var n=e[0],i=e[1];console.log("Currently active extension: "+n),i.bind(this,565)()},n.prototype.getComponent=function(t,e){var n={x:24,y:56,width:100,height:20,index:4};return"api"===t&&"toolbox"===e?n:null},n.prototype.extAPI=function(t){t.init(function(){for(var t=[],e=arguments[arguments.length-1],n=0;n<arguments.length-1;n++)"X-Axis"===arguments[n]?t.push(156772):"Y-Axis"===arguments[n]&&t.push(156765);e.apply(this,t)}),t.placeInCanvas(),t.draw(),t.dispose()},t.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,