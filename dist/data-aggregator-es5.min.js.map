{"version":3,"sources":["webpack:///data-aggregator-es5.min.js","webpack:///webpack/bootstrap 3bbaff825c8916f44249","webpack:///./src/index.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/data-aggregator-ext.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_typeof","Symbol","iterator","obj","constructor","prototype","AggregatorGetter","env","factory","document","win","Error","Aggregator","window","undefined","_window","windowExists","FC","FusionCharts","register","registerComponent","webpackPolyfill","deprecate","paths","children","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","dep","capitalize","string","charAt","toUpperCase","slice","isPlainObject","o","mergeRecursively","recParsing","sink","source","lib","prop","extend2","Array","includes","value","searchElement","fromIndex","this","len","n","k","Math","max","abs","appliedAggregation","binSize","aggregationMethod","config","dataAgg","avlTimePeriods","getAggregationTimeRules","avlTimeMultiplier","push","possibleFactors","j","len1","len2","multipliersArr","currentTimeLength","timePeriod","time","multiplier","minBinSize","self","tsObject","maxNumOfPlot","composition","reactiveModel","model","minimumConsecutiveDifference","dataset","category","globalReactiveModel","validTimePeriod","validTimePeriodMultiplier","avlAggMethods","getAllAggregationMethod","name","interval","currentAggMethod","suitableInterval","isFinite","timeRules","getSuitableInterval","timePeriodMultiplier","step","nickName","text","formalName","require","api","store","toolboxComponent","saveTo","requiredParams","ii","param","arguments","usrConfig","extData","chartInstance","apiInstance","getComponentStore","getCanvasByIndex","impl","getDataAggregator","toolbox","getComponent","toolbars","measurement","createToolbar","onPropsChange","execute","setTimeout","rangeOnChange","applyClassName","state","_style","style","states","paper","cssAddRule","cb","options","sm","toolboxCompConfig","setConfig","attrs","setParentGroup","parentGroup","className","namespace","appendSelector","count","getIndividualClassNames","getClassName","classNames","dm","dropDownMenu","components","component","dropDown","container","listItem","eventListeners","event","type","attachEventHandlers","createSelectButton","d3","selectButton","createButton","button","label","labelGroup","selectMenuGroup","buttonGroup","toolbar","timeMulSelectMenu","timePeriodSelectMenu","aggMethodSelectMenu","resetButton","applyButton","timeMulSelectMenuOpt","HorizontalToolbar","ComponentGroup","graphics","getInstances","chart","smartLabel","dependencies","chartContainer","timePeriodOnChange","indexOfTimeUnit","indexOfTimeMul","multiplierVal","arr","timePeriodVal","timePeriodMultiplierVal","prevTimePeroidMulVal","indexOf","Number","toString","updateList","onChange","currentAgg","getCurrentAggreation","removeState","setState","defaultAggMethod","hPadding","selectConf","fill","stroke","stroke-width","selected","hover","cursor","font-size","font-family","arrow","radius","width","height","margin","right","defaultStyle","font-weight","left","padding","background","border-color","border-radius","border-style","border-width","color","disabled","fontSize","fontFamily","apply","strokeWidth","shadow","opacity","styles","Label","addSymbol","addComponent","availableWidth","availableHeight","logicalSpace","ln","getLogicalSpace","containerInstance","spaceManagerInstance","add","ref","priority","layout","orientation","position","alignment","dimensions","parent","getParentComponentGroup","getWidth","getHeight","x","y","group","mes","set","validTimeBin","validMethod","aggMethod","keys","timeInterval","aggregate","aggregation","canvas","drawn","lock","unlock","timeUnit","toLowerCase","timeMultiplier","method","getValidAggregation","resetAggregation","timePeriodSelectMenuOpt","aggVal","aggMethodSelectMenuOpt","currentAggregationObj","setPlaceHolderValue","getAvailablelAggreagation","draw","getDefaultAggregationMethod","get"],"mappings":"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","file":"data-aggregator-es5.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar AggregatorGetter = __webpack_require__(2);\n\t\n\t;(function (env, factory) {\n\t  if (( false ? 'undefined' : _typeof(module)) === 'object' && module.exports) {\n\t    module.exports = env.document ? factory(env) : function (win) {\n\t      if (!win.document) {\n\t        throw new Error('Window with document not present');\n\t      }\n\t      return factory(win, true);\n\t    };\n\t  } else {\n\t    env.Aggregator = factory(env, true);\n\t  }\n\t})(typeof window !== 'undefined' ? window : undefined, function (_window, windowExists) {\n\t  var FC = _window.FusionCharts;\n\t\n\t  FC.register('extension', ['private', 'data-aggregator', function () {\n\t    FC.registerComponent('extensions', 'data-aggregator', AggregatorGetter({ FC: FC }));\n\t  }]);\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\n\t\tif(!module.webpackPolyfill) {\n\t\t\tmodule.deprecate = function() {};\n\t\t\tmodule.paths = [];\n\t\t\t// module.parent = undefined by default\n\t\t\tmodule.children = [];\n\t\t\tmodule.webpackPolyfill = 1;\n\t\t}\n\t\treturn module;\n\t}\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tmodule.exports = function (dep) {\n\t  /**\n\t   * Capitalize the first letter of a given string and return the string\n\t   * @private\n\t   */\n\t  var capitalize = function capitalize(string) {\n\t    return string.charAt(0).toUpperCase() + string.slice(1);\n\t  },\n\t      isPlainObject = function isPlainObject(o) {\n\t    return (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && o.constructor === Object;\n\t  },\n\t      mergeRecursively = function recParsing(sink, source, lib) {\n\t    var prop;\n\t    for (prop in source) {\n\t      if (prop in sink) {\n\t        if (_typeof(source[prop]) === 'object') {\n\t          recParsing(sink[prop], source[prop], lib);\n\t        }\n\t      } else {\n\t        if (isPlainObject(source[prop])) {\n\t          sink[prop] = lib.extend2({}, source[prop]);\n\t        } else {\n\t          sink[prop] = source[prop];\n\t        }\n\t      }\n\t    }\n\t  };\n\t  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n\t  if (!Array.prototype.includes) {\n\t    Object.defineProperty(Array.prototype, 'includes', {\n\t      value: function value(searchElement, fromIndex) {\n\t        // 1. Let O be ? ToObject(this value).\n\t        if (this == null) {\n\t          throw new TypeError('\"this\" is null or not defined');\n\t        }\n\t\n\t        var o = Object(this);\n\t\n\t        // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\t        var len = o.length >>> 0;\n\t\n\t        // 3. If len is 0, return false.\n\t        if (len === 0) {\n\t          return false;\n\t        }\n\t\n\t        // 4. Let n be ? ToInteger(fromIndex).\n\t        //    (If fromIndex is undefined, this step produces the value 0.)\n\t        var n = fromIndex | 0;\n\t\n\t        // 5. If n ≥ 0, then\n\t        //  a. Let k be n.\n\t        // 6. Else n < 0,\n\t        //  a. Let k be len + n.\n\t        //  b. If k < 0, let k be 0.\n\t        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\t\n\t        // 7. Repeat, while k < len\n\t        while (k < len) {\n\t          // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n\t          // b. If SameValueZero(searchElement, elementK) is true, return true.\n\t          // c. Increase k by 1.\n\t          // NOTE: === provides the correct \"SameValueZero\" comparison needed here.\n\t          if (o[k] === searchElement) {\n\t            return true;\n\t          }\n\t          k++;\n\t        }\n\t\n\t        // 8. Return false\n\t        return false;\n\t      }\n\t    });\n\t  }\n\t  /**\n\t   * Class representing the Data Aggregator.\n\t   */\n\t\n\t  var Aggregator = function () {\n\t    /**\n\t     * Create a Aggregator.\n\t     * @typedef {object} Aggregator.aggregation\n\t     * @property {string} binSize - The binSize applied to aggregate.\n\t     * @property {string} aggregationMethod - The method applied to aggregate.\n\t     */\n\t    function Aggregator() {\n\t      _classCallCheck(this, Aggregator);\n\t\n\t      /**\n\t       * @private\n\t       */\n\t      this.appliedAggregation = {\n\t        binSize: null,\n\t        aggregationMethod: null\n\t      };\n\t      this.config = {};\n\t    }\n\t\n\t    /**\n\t     * An object representing the binSize, aggregationMethod.\n\t     * @type {Aggregator.aggregation}\n\t     */\n\t\n\t\n\t    _createClass(Aggregator, [{\n\t      key: 'getAvailablelAggreagation',\n\t\n\t\n\t      /**\n\t       * Sets available aggregation options in configuration of extension\n\t       * @private\n\t       */\n\t      value: function getAvailablelAggreagation() {\n\t        var config = this.config,\n\t            dataAgg = config.dataAgg,\n\t            avlTimePeriods = config.avlTimePeriods = dataAgg.getAggregationTimeRules(),\n\t            i,\n\t            len;\n\t\n\t        config.avlTimeMultiplier = [];\n\t        len = avlTimePeriods.length;\n\t\n\t        for (i = 0; i < len; i++) {\n\t          config.avlTimeMultiplier.push(avlTimePeriods[i].possibleFactors);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Calculates valid aggregation time periods and corresponding multipliers\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'getValidAggregation',\n\t      value: function getValidAggregation() {\n\t        var self = this,\n\t            config = self.config,\n\t            tsObject = self.tsObject,\n\t            dataAgg = config.dataAgg,\n\t            i,\n\t            j,\n\t            len1,\n\t            len2,\n\t            avlTimePeriods,\n\t            avlTimeMultiplier,\n\t            maxNumOfPlot = config.composition.reactiveModel.model['max-plot-point'],\n\t            minimumConsecutiveDifference = config.composition.dataset.category.minimumConsecutiveDifference,\n\t            multipliersArr,\n\t            currentTimeLength,\n\t            timePeriod,\n\t            time,\n\t            binSize,\n\t            multiplier,\n\t            globalReactiveModel = tsObject.globalReactiveModel,\n\t            maximumAllowedTicks = globalReactiveModel.prop('x-axis-maximum-allowed-ticks'),\n\t            minBinSize;\n\t\n\t        config.currentTimeLength = globalReactiveModel.model['x-axis-visible-range-end'] - globalReactiveModel.model['x-axis-visible-range-start'];\n\t\n\t        avlTimePeriods = config.avlTimePeriods;\n\t        avlTimeMultiplier = config.avlTimeMultiplier;\n\t        currentTimeLength = config.currentTimeLength;\n\t\n\t        minBinSize = currentTimeLength / maxNumOfPlot;\n\t\n\t        config.validTimePeriod = [];\n\t        config.validTimePeriodMultiplier = [];\n\t        config.avlAggMethods = dataAgg.getAllAggregationMethod();\n\t\n\t        for (i = 0, len1 = avlTimePeriods.length; i < len1; i++) {\n\t          timePeriod = avlTimePeriods[i].name;\n\t          time = avlTimePeriods[i].interval;\n\t          multipliersArr = [];\n\t\n\t          for (j = 0, len2 = avlTimeMultiplier[i].length; j < len2; j++) {\n\t            multiplier = avlTimeMultiplier[i][j];\n\t            binSize = multiplier * time;\n\t\n\t            if (binSize >= minBinSize && binSize > minimumConsecutiveDifference) {\n\t              // Need to revisit\n\t              // && (currentTimeLength > maximumAllowedTicks * binSize * 0.5)) {\n\t              multipliersArr.push(avlTimeMultiplier[i][j]);\n\t            }\n\t          }\n\t          if (multipliersArr.length > 0) {\n\t            config.validTimePeriodMultiplier.push(multipliersArr);\n\t            config.validTimePeriod.push(timePeriod);\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Returns current Aggregation applied to timeseries\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'getCurrentAggreation',\n\t      value: function getCurrentAggreation() {\n\t        var self = this,\n\t            config = self.config,\n\t            dataAgg = config.dataAgg,\n\t            composition = config.composition,\n\t            model = composition.reactiveModel,\n\t            currentAggMethod,\n\t            suitableInterval,\n\t            binSize;\n\t\n\t        binSize = model.prop('bin-size') - 1;\n\t\n\t        if (isFinite(binSize)) {\n\t          suitableInterval = dataAgg.timeRules.getSuitableInterval(binSize);\n\t          currentAggMethod = model.prop('aggregation-fn');\n\t        }\n\t\n\t        return {\n\t          timePeriod: suitableInterval && suitableInterval.name,\n\t          timePeriodMultiplier: suitableInterval && suitableInterval.step,\n\t          aggregationMethod: {\n\t            value: currentAggMethod && currentAggMethod.nickName,\n\t            text: currentAggMethod && currentAggMethod.formalName\n\t          }\n\t        };\n\t      }\n\t    }, {\n\t      key: 'init',\n\t      value: function init(require) {\n\t        var self = this,\n\t            config = self.config,\n\t            tsObject,\n\t            toolboxComponent = config.toolboxComponent = {},\n\t            api,\n\t            store,\n\t            composition,\n\t            saveTo = 'tsObject',\n\t            requiredParams = ['graphics', 'globalReactiveModel', 'chart', 'spaceManagerInstance', 'chartInstance', 'smartLabel', 'extData', 'parentGroup', 'lib', function acquire() {\n\t          var i = 0,\n\t              ii = requiredParams.length - 1,\n\t              param = '';\n\t          self[saveTo] = self[saveTo] || {};\n\t          self.requiredParams = {};\n\t          for (i = 0; i < ii; ++i) {\n\t            param = requiredParams[i];\n\t            self[saveTo][param] = arguments[i];\n\t          }\n\t        }];\n\t        require(requiredParams);\n\t\n\t        tsObject = self.tsObject;\n\t        config.usrConfig = tsObject.extData;\n\t\n\t        api = tsObject.chartInstance.apiInstance;\n\t        store = api.getComponentStore();\n\t        config.composition = composition = store.getCanvasByIndex(0).composition;\n\t        config.dataAgg = composition.impl.getDataAggregator();\n\t\n\t        toolboxComponent.toolbox = dep.FC.getComponent('api', 'toolbox');\n\t        toolboxComponent.config = {};\n\t\n\t        self.toolbars = [];\n\t\n\t        self.measurement = {};\n\t\n\t        self.toolbars.push(self.createToolbar());\n\t\n\t        composition.reactiveModel.onPropsChange(['bin-size', 'aggregation-fn'], function () {\n\t          if (config.execute) {\n\t            config.execute = false;\n\t            setTimeout(function () {\n\t              self.rangeOnChange();\n\t            }, 200);\n\t          }\n\t        });\n\t\n\t        window.Aggregator = self;\n\t        return self;\n\t      }\n\t\n\t      /**\n\t       * Create toolbar components\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'createToolbar',\n\t      value: function createToolbar() {\n\t        var self = this,\n\t            labelGroup,\n\t            selectMenuGroup,\n\t            buttonGroup,\n\t            toolbar,\n\t            timeMulSelectMenu,\n\t            timePeriodSelectMenu,\n\t            aggMethodSelectMenu,\n\t            resetButton,\n\t            applyButton,\n\t            config = self.config,\n\t            tsObject = self.tsObject,\n\t            label,\n\t            toolboxComponent = config.toolboxComponent,\n\t            toolbox = toolboxComponent.toolbox,\n\t            toolboxCompConfig = toolboxComponent.config,\n\t            HorizontalToolbar = toolbox.HorizontalToolbar,\n\t            ComponentGroup = toolbox.ComponentGroup,\n\t            graphics = tsObject.graphics,\n\t            paper = graphics.paper,\n\t            d3 = paper.getInstances().d3,\n\t            container = graphics.container,\n\t            chart = tsObject.chart,\n\t            smartLabel = tsObject.smartLabel,\n\t            timeMulSelectMenuOpt,\n\t            usrConfig,\n\t            style,\n\t            dependencies = {\n\t          paper: paper,\n\t          chart: chart,\n\t          smartLabel: smartLabel,\n\t          chartContainer: container\n\t        },\n\t\n\t\n\t        /**\n\t         * Sets valid time multiplier on time period change from extension toolbox\n\t         * @private\n\t         */\n\t        timePeriodOnChange = function timePeriodOnChange() {\n\t          var timePeriodVal = timePeriodSelectMenu.value(),\n\t              timePeriodMultiplierVal = timeMulSelectMenu.value(),\n\t              prevTimePeroidMulVal = timePeriodMultiplierVal,\n\t              validTimePeriod = config.validTimePeriod,\n\t              validTimePeriodMultiplier = config.validTimePeriodMultiplier,\n\t              indexOfTimeUnit,\n\t              indexOfTimeMul,\n\t              multiplierVal,\n\t              len,\n\t              arr,\n\t              i = 0;\n\t\n\t          indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);\n\t          indexOfTimeMul = validTimePeriodMultiplier[indexOfTimeUnit].indexOf(Number(timePeriodMultiplierVal));\n\t\n\t          timeMulSelectMenuOpt = [];\n\t          arr = validTimePeriodMultiplier[indexOfTimeUnit];\n\t          for (i = 0, len = arr.length; i < len; i++) {\n\t            multiplierVal = arr[i];\n\t            timeMulSelectMenuOpt.push({\n\t              name: multiplierVal.toString(),\n\t              value: multiplierVal.toString()\n\t            });\n\t          }\n\t\n\t          timeMulSelectMenu.updateList(timeMulSelectMenuOpt);\n\t\n\t          if (indexOfTimeMul < 0) {\n\t            timeMulSelectMenu.value(validTimePeriodMultiplier[indexOfTimeUnit][0].toString());\n\t          } else {\n\t            timeMulSelectMenu.value(prevTimePeroidMulVal);\n\t          }\n\t        },\n\t\n\t\n\t        /**\n\t         * Sets state of applyButton(active/inactive) on change in value in toolbox\n\t         * @private\n\t         */\n\t        onChange = function onChange(type) {\n\t          var currentAgg = self.getCurrentAggreation();\n\t          currentAgg.timePeriodMultiplier = currentAgg.timePeriodMultiplier && currentAgg.timePeriodMultiplier.toString();\n\t\n\t          if (currentAgg.timePeriodMultiplier !== timeMulSelectMenu.value() || currentAgg.timePeriod !== timePeriodSelectMenu.value() || currentAgg.aggregationMethod.value !== aggMethodSelectMenu.value()) {\n\t            applyButton.removeState('disabled');\n\t          } else {\n\t            applyButton.setState('disabled');\n\t          }\n\t\n\t          if (!aggMethodSelectMenu.value()) {\n\t            aggMethodSelectMenu.value(config.defaultAggMethod);\n\t          }\n\t          if (!timePeriodSelectMenu.value() && !timeMulSelectMenu.value()) {\n\t            timePeriodSelectMenu.value(config.validTimePeriod[0]);\n\t            timePeriodOnChange();\n\t          }\n\t        };\n\t\n\t        labelGroup = new ComponentGroup(dependencies, {\n\t          hPadding: 4\n\t        });\n\t        selectMenuGroup = new ComponentGroup(dependencies, {\n\t          hPadding: 0\n\t        });\n\t        buttonGroup = new ComponentGroup(dependencies, {\n\t          hPadding: 0\n\t        });\n\t\n\t        toolbar = new HorizontalToolbar(dependencies);\n\t        usrConfig = config.usrConfig;\n\t\n\t        var selectConf = {\n\t          container: {\n\t            style: {\n\t              'fill': '#fff',\n\t              'stroke': '#c8cecd',\n\t              'stroke-width': '1'\n\t            },\n\t            states: {\n\t              selected: {\n\t                stroke: '#1e1f1f'\n\t              },\n\t              hover: {\n\t                cursor: 'pointer'\n\t              }\n\t            }\n\t          },\n\t          text: {\n\t            style: {\n\t              fill: '#696969',\n\t              'font-size': '11px',\n\t              'font-family': '\"Lucida Grande\", sans-serif'\n\t            }\n\t          },\n\t          arrow: {\n\t            style: {\n\t              fill: '#696969'\n\t            }\n\t          },\n\t          attrs: {\n\t            'radius': 2,\n\t            'width': 50,\n\t            'height': 22,\n\t            'margin': {\n\t              right: 3\n\t            }\n\t          }\n\t        };\n\t\n\t        var defaultStyle = {\n\t          label: {\n\t            container: {\n\t              height: 22,\n\t              style: {}\n\t            },\n\t            margin: {\n\t              right: 2\n\t            },\n\t            text: {\n\t              style: {\n\t                'font-size': '13px',\n\t                'font-family': '\"Lucida Grande\", sans-serif',\n\t                'font-weight': 'bold',\n\t                'fill': '#4b4b4b'\n\t              }\n\t            }\n\t          },\n\t          timeMulSelectMenu: {\n\t            container: selectConf.container,\n\t            text: selectConf.text,\n\t            arrow: selectConf.arrow,\n\t            attrs: {\n\t              'radius': 2,\n\t              'width': 50,\n\t              'height': 22,\n\t              'margin': {\n\t                right: 3,\n\t                left: 0\n\t              },\n\t              padding: {\n\t                left: 10,\n\t                right: 8\n\t              }\n\t            },\n\t            eventListeners: [{\n\t              type: 'change',\n\t              cb: onChange\n\t            }]\n\t          },\n\t          timePeriodSelectMenu: {\n\t            container: selectConf.container,\n\t            text: selectConf.text,\n\t            arrow: selectConf.arrow,\n\t            attrs: {\n\t              'radius': 2,\n\t              'width': 90,\n\t              'height': 22,\n\t              'margin': {\n\t                right: 9,\n\t                left: 0\n\t              },\n\t              padding: {\n\t                left: 10,\n\t                right: 8\n\t              }\n\t            },\n\t            eventListeners: [{\n\t              type: 'change',\n\t              cb: function cb() {\n\t                timePeriodOnChange();\n\t                onChange();\n\t              }\n\t            }]\n\t          },\n\t          aggMethodSelectMenu: {\n\t            container: selectConf.container,\n\t            text: selectConf.text,\n\t            arrow: selectConf.arrow,\n\t            attrs: {\n\t              'radius': 2,\n\t              'width': 100,\n\t              'height': 22,\n\t              margin: {\n\t                right: 8,\n\t                left: 0\n\t              },\n\t              padding: {\n\t                left: 10,\n\t                right: 8\n\t              }\n\t            },\n\t            eventListeners: [{\n\t              type: 'change',\n\t              cb: onChange\n\t            }]\n\t          },\n\t          dropDown: {\n\t            container: {\n\t              style: {\n\t                background: '#fff',\n\t                'border-color': '#898b8b',\n\t                'border-radius': '1px',\n\t                'border-style': 'solid',\n\t                'border-width': '2px',\n\t                'font-size': '11px',\n\t                'font-family': '\"Lucida Grande\", sans-serif'\n\t              }\n\t            },\n\t            listItem: {\n\t              style: {},\n\t              states: {\n\t                hover: {\n\t                  className: undefined,\n\t                  style: {\n\t                    'background': '#e6e8e8',\n\t                    'color': '#696969',\n\t                    'cursor': 'pointer'\n\t                  }\n\t                },\n\t                selected: {\n\t                  className: undefined,\n\t                  style: {\n\t                    'background': '#898b8b',\n\t                    'color': '#fff'\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          },\n\t          applyButton: {\n\t            container: {\n\t              style: {\n\t                'fill': '#555',\n\t                'stroke': '#ced5d4',\n\t                'stroke-width': 0\n\t              },\n\t              states: {\n\t                disabled: {\n\t                  'fill': '#bebebe',\n\t                  'stroke-width': 0,\n\t                  'stroke': '#ced5d4'\n\t                },\n\t                hover: {\n\t                  cursor: 'pointer'\n\t                }\n\t              }\n\t            },\n\t            text: {\n\t              style: {\n\t                'fill': '#f3f3f3',\n\t                'fontSize': '11px',\n\t                'fontFamily': '\"Lucida Grande\", sans-serif'\n\t              },\n\t              states: {\n\t                disabled: {\n\t                  'fill': '#f3f3f3'\n\t                }\n\t              }\n\t            },\n\t            attrs: {\n\t              'radius': 1,\n\t              'width': 54,\n\t              'height': 22,\n\t              margin: {\n\t                right: 3,\n\t                left: 0\n\t              },\n\t              label: 'APPLY'\n\t            },\n\t            eventListeners: [{\n\t              type: 'click',\n\t              cb: function cb() {\n\t                self.apply(1);\n\t              }\n\t            }]\n\t          },\n\t          resetButton: {\n\t            container: {\n\t              style: {\n\t                'fill': '#898b8b',\n\t                'stroke': '#ced5d4',\n\t                'strokeWidth': 0\n\t              },\n\t              states: {\n\t                hover: {\n\t                  cursor: 'pointer'\n\t                },\n\t                disabled: {\n\t                  'fill': '#bebebe',\n\t                  'stroke-width': 0,\n\t                  'stroke': '#ced5d4',\n\t                  cursor: 'default'\n\t                }\n\t              }\n\t            },\n\t            text: {\n\t              style: {\n\t                fill: '#f3f3f3',\n\t                'fontSize': '11px',\n\t                'fontFamily': '\"Lucida Grande\", sans-serif'\n\t              },\n\t              states: {\n\t                disabled: {\n\t                  fill: '#f3f3f3'\n\t                }\n\t              }\n\t            },\n\t            attrs: {\n\t              'radius': 1,\n\t              'shadow': {\n\t                'fill': '#000',\n\t                'opacity': 0.35\n\t              },\n\t              'width': 54,\n\t              'height': 22,\n\t              margin: {\n\t                right: 3,\n\t                left: 0\n\t              },\n\t              label: 'RESET'\n\t            },\n\t            eventListeners: [{\n\t              type: 'click',\n\t              cb: function cb() {\n\t                self.apply(0);\n\t              }\n\t            }]\n\t          }\n\t        };\n\t\n\t        style = defaultStyle;\n\t\n\t        if (usrConfig.styles) {\n\t          mergeRecursively(usrConfig.styles, defaultStyle, this.tsObject.lib);\n\t          style = usrConfig.styles;\n\t        }\n\t\n\t        label = new toolbox.Label('Aggregation: ', dependencies, style.label);\n\t\n\t        label.setConfig({\n\t          className: style.label.className\n\t        });\n\t\n\t        applyClassName(label.getIndividualClassNames(label.getClassName()), 'label');\n\t\n\t        var parentGroup = tsObject.parentGroup;\n\t        var count = 0;\n\t\n\t        function applyClassName(obj, prop, state) {\n\t          var _style;\n\t          for (var key in obj) {\n\t            if (style[prop][key]) {\n\t              if (state && style[prop][key].states && style[prop][key].states[state]) {\n\t                _style = style[prop][key].states[state];\n\t              } else {\n\t                _style = style[prop][key].style;\n\t              }\n\t            }\n\t            _style && paper.cssAddRule('.' + obj[key], _style);\n\t          }\n\t        }\n\t\n\t        function factory(prop, cb, options) {\n\t          var sm = toolboxCompConfig[prop] = cb(options).setConfig(style[prop].attrs);\n\t\n\t          sm.setParentGroup(parentGroup);\n\t          sm.setConfig({\n\t            className: style[prop].className\n\t          });\n\t\n\t          sm.namespace('fusioncharts');\n\t          sm.appendSelector('ext1-' + count++);\n\t\n\t          applyClassName(sm.getIndividualClassNames(sm.getClassName()), prop);\n\t          var classNames = sm.config.states;\n\t          for (var key in classNames) {\n\t            applyClassName(sm.getIndividualClassNames(classNames[key]), prop, key);\n\t          }\n\t\n\t          var dm = sm.config.dropDownMenu;\n\t          for (var components in dm) {\n\t            var component = dm[components];\n\t            switch (components) {\n\t              case 'container':\n\t                paper.cssAddRule('.' + component.className, style.dropDown.container.style);\n\t                break;\n\t              case 'listItem':\n\t                paper.cssAddRule('.' + component.className, style.dropDown.listItem.style);\n\t                var states = component.states;\n\t                for (var state in states) {\n\t                  paper.cssAddRule('.' + states[state], style.dropDown.listItem.states[state].style);\n\t                }\n\t                break;\n\t            }\n\t          }\n\t\n\t          var eventListeners = style[prop].eventListeners;\n\t          for (var i = 0, len = eventListeners.length; i < len; i += 1) {\n\t            var event = eventListeners[i];\n\t            var obj = {};\n\t            obj[event.type] = event.cb;\n\t            sm.attachEventHandlers(obj);\n\t          }\n\t          return sm;\n\t        }\n\t\n\t        function createSelectButton(prop) {\n\t          return factory(prop, d3.selectButton, []);\n\t        }\n\t\n\t        function createButton(prop) {\n\t          return factory(prop, d3.button, style[prop].attrs.label);\n\t        }\n\t\n\t        labelGroup.addSymbol(label);\n\t        labelGroup.setConfig({\n\t          margin: {\n\t            right: 0\n\t          }\n\t        });\n\t\n\t        timeMulSelectMenu = createSelectButton('timeMulSelectMenu');\n\t        timePeriodSelectMenu = createSelectButton('timePeriodSelectMenu');\n\t        aggMethodSelectMenu = createSelectButton('aggMethodSelectMenu');\n\t\n\t        applyButton = createButton('applyButton');\n\t        resetButton = createButton('resetButton');\n\t\n\t        selectMenuGroup.addSymbol(timeMulSelectMenu);\n\t        selectMenuGroup.addSymbol(timePeriodSelectMenu);\n\t        selectMenuGroup.addSymbol(aggMethodSelectMenu);\n\t        buttonGroup.addSymbol(applyButton);\n\t        buttonGroup.addSymbol(resetButton);\n\t\n\t        toolbar.addComponent(labelGroup);\n\t        toolbar.addComponent(selectMenuGroup);\n\t        toolbar.addComponent(buttonGroup);\n\t        return toolbar;\n\t      }\n\t    }, {\n\t      key: 'getLogicalSpace',\n\t      value: function getLogicalSpace(availableWidth, availableHeight) {\n\t        var logicalSpace,\n\t            width = 0,\n\t            height = 0,\n\t            i,\n\t            ln;\n\t\n\t        for (i = 0, ln = this.toolbars.length; i < ln; i++) {\n\t          logicalSpace = this.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n\t          width = Math.max(logicalSpace.width, width);\n\t          height += logicalSpace.height;\n\t          this.toolbars[i].width = logicalSpace.width;\n\t          this.toolbars[i].height = logicalSpace.height;\n\t        }\n\t        height += this.padding;\n\t        return {\n\t          width: width,\n\t          height: height\n\t        };\n\t      }\n\t    }, {\n\t      key: 'placeInCanvas',\n\t      value: function placeInCanvas(containerInstance) {\n\t        var _self = this,\n\t            tsObject = _self.tsObject,\n\t            usrConfig = _self.config.usrConfig;\n\t\n\t        _self.padding = 5;\n\t        tsObject.spaceManagerInstance.add([{\n\t          name: function name() {\n\t            return 'data-aggregator';\n\t          },\n\t          ref: function ref(obj) {\n\t            return obj['0'];\n\t          },\n\t          self: function self() {\n\t            return _self;\n\t          },\n\t          priority: function priority() {\n\t            return 2;\n\t          },\n\t          layout: function layout(obj) {\n\t            return obj[usrConfig.layout || 'inline'];\n\t          },\n\t          orientation: [{\n\t            type: function type(obj) {\n\t              return obj[usrConfig.orientation || 'horizontal'];\n\t            },\n\t            position: [{\n\t              type: function type(obj) {\n\t                return obj[usrConfig.position || 'bottom'];\n\t              },\n\t              alignment: [{\n\t                type: function type(obj) {\n\t                  return obj[usrConfig.alignment || 'right'];\n\t                },\n\t                dimensions: [function () {\n\t                  var parent = this.getParentComponentGroup();\n\t                  return _self.getLogicalSpace(parent.getWidth(), parent.getHeight());\n\t                }]\n\t              }]\n\t            }]\n\t          }]\n\t        }]);\n\t      }\n\t    }, {\n\t      key: 'setDrawingConfiguration',\n\t      value: function setDrawingConfiguration(x, y, width, height, group) {\n\t        var mes = this.measurement;\n\t        mes.x = x;\n\t        mes.y = y;\n\t        mes.width = width;\n\t        mes.height = height;\n\t\n\t        this.parentGroup = group;\n\t\n\t        return this;\n\t      }\n\t\n\t      /**\n\t       * Apply or Reset Aggregation applied through extension in timeseries\n\t       * @param {number} set - Flag to set or reset. '1' to set, '0' to reset\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'apply',\n\t      value: function apply(set) {\n\t        var self = this,\n\t            config = self.config,\n\t            toolboxCompConfig = config.toolboxComponent.config,\n\t            timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,\n\t            timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,\n\t            aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,\n\t            applyButton = toolboxCompConfig.applyButton,\n\t            resetButton = toolboxCompConfig.resetButton,\n\t            aggregate = self.tsObject.extData.aggregate || {},\n\t            validTimePeriod,\n\t            validTimePeriodMultiplier,\n\t            avlAggMethods,\n\t            indexOfTimeUnit,\n\t            validTimeBin,\n\t            validMethod,\n\t            model = config.composition.reactiveModel,\n\t            timePeriodVal,\n\t            timePeriodMultiplierVal,\n\t            aggMethod,\n\t            keys,\n\t            binSize,\n\t            timeInterval,\n\t            aggregation = self.aggregation,\n\t            arr,\n\t            i,\n\t            len,\n\t            canvas = config.composition.impl;\n\t\n\t        if (set) {\n\t          if (!config.drawn) {\n\t            timePeriodVal = aggregate.timeUnit && aggregate.timeUnit.toString().toLowerCase();\n\t            timePeriodMultiplierVal = aggregate.timeMultiplier;\n\t            aggMethod = aggregate.method && aggregate.method.toString();\n\t\n\t            self.getValidAggregation();\n\t            validTimePeriod = config.validTimePeriod;\n\t            validTimePeriodMultiplier = config.validTimePeriodMultiplier;\n\t            avlAggMethods = config.avlAggMethods;\n\t\n\t            if (validTimePeriod.includes(timePeriodVal)) {\n\t              indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);\n\t              if (!validTimePeriodMultiplier[indexOfTimeUnit].includes(Number(timePeriodMultiplierVal))) {\n\t                timePeriodMultiplierVal = validTimePeriodMultiplier[indexOfTimeUnit][0];\n\t              }\n\t              validTimeBin = true;\n\t            }\n\t\n\t            if (avlAggMethods[aggMethod]) {\n\t              validMethod = true;\n\t            }\n\t\n\t            if (validTimeBin || validMethod) {\n\t              if (validTimeBin) {\n\t                arr = config.avlTimePeriods;\n\t                for (i = 0, len = arr.length; i < len; i++) {\n\t                  keys = arr[i];\n\t                  if (keys.name === timePeriodVal) {\n\t                    timeInterval = keys.interval;\n\t                    break;\n\t                  }\n\t                }\n\t                binSize = timeInterval * Number(timePeriodMultiplierVal);\n\t                model.lock().prop('bin-size-ext', binSize).unlock();\n\t                aggregation.binSize = binSize;\n\t              }\n\t\n\t              if (validMethod) {\n\t                model.lock().prop('aggregation-fn-ext', config.avlAggMethods[aggMethod]).unlock();\n\t                aggregation.aggregationMethod = aggMethod;\n\t              }\n\t              applyButton.setState('disabled');\n\t              resetButton.removeState('disabled');\n\t            }\n\t          } else {\n\t            timePeriodVal = timePeriodSelectMenu.value();\n\t            timePeriodMultiplierVal = timeMulSelectMenu.value();\n\t            aggMethod = aggMethodSelectMenu.value();\n\t            arr = config.avlTimePeriods;\n\t            for (i = 0, len = arr.length; i < len; i++) {\n\t              keys = arr[i];\n\t              if (keys.name === timePeriodVal) {\n\t                timeInterval = keys.interval;\n\t                break;\n\t              }\n\t            }\n\t            binSize = timeInterval * Number(timePeriodMultiplierVal);\n\t            model.lock().prop('bin-size-ext', binSize).prop('aggregation-fn-ext', config.avlAggMethods[aggMethod]).unlock();\n\t            aggregation.binSize = binSize;\n\t            aggregation.aggregationMethod = aggMethod;\n\t            applyButton.setState('disabled');\n\t            resetButton.removeState('disabled');\n\t          }\n\t        } else {\n\t          canvas.resetAggregation();\n\t          aggregation.binSize = null;\n\t          aggregation.aggregationMethod = null;\n\t          resetButton.setState('disabled');\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Compute and populate toolboxes with valid values on change in range of visual window\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: 'rangeOnChange',\n\t      value: function rangeOnChange() {\n\t        var self = this,\n\t            config = self.config,\n\t            toolboxCompConfig = config.toolboxComponent.config,\n\t            timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,\n\t            timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,\n\t            aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,\n\t            applyButton = toolboxCompConfig.applyButton,\n\t            resetButton = toolboxCompConfig.resetButton,\n\t            model = config.composition.reactiveModel,\n\t            timePeriodVal,\n\t            timePeriodSelectMenuOpt,\n\t            validTimePeriod,\n\t            indexOfTimeUnit,\n\t            multiplierVal,\n\t            timeMulSelectMenuOpt,\n\t            validTimePeriodMultiplier,\n\t            aggVal,\n\t            aggMethodSelectMenuOpt,\n\t            avlAggMethods,\n\t            aggregation = self.aggregation,\n\t            currentAggregationObj,\n\t            timePeriod,\n\t            timePeriodMultiplier,\n\t            aggregationMethod,\n\t            i,\n\t            len,\n\t            arr;\n\t\n\t        self.getValidAggregation();\n\t        currentAggregationObj = self.getCurrentAggreation();\n\t        timePeriod = currentAggregationObj.timePeriod;\n\t        timePeriodMultiplier = currentAggregationObj.timePeriodMultiplier;\n\t        aggregationMethod = currentAggregationObj.aggregationMethod;\n\t\n\t        timePeriodSelectMenuOpt = [];\n\t        timeMulSelectMenuOpt = [];\n\t        aggMethodSelectMenuOpt = [];\n\t\n\t        validTimePeriod = config.validTimePeriod;\n\t        validTimePeriodMultiplier = config.validTimePeriodMultiplier;\n\t        avlAggMethods = config.avlAggMethods;\n\t\n\t        applyButton.setState('disabled');\n\t\n\t        if (aggregation.binSize !== model.prop('bin-size') && (aggregationMethod.value === config.defaultAggMethod || !aggregationMethod.value)) {\n\t          aggregation.binSize = null;\n\t          aggregation.aggregationMethod = null;\n\t          resetButton.setState('disabled');\n\t        } else {\n\t          resetButton.removeState('disabled');\n\t        }\n\t\n\t        for (i = 0, len = validTimePeriod.length; i < len; i++) {\n\t          timePeriodVal = validTimePeriod[i];\n\t          timePeriodSelectMenuOpt.push({\n\t            name: capitalize(timePeriodVal),\n\t            value: timePeriodVal\n\t          });\n\t        }\n\t\n\t        timePeriodSelectMenu.updateList(timePeriodSelectMenuOpt);\n\t        timePeriod ? timePeriodSelectMenu.value(timePeriod) : timePeriodSelectMenu.setPlaceHolderValue('');\n\t\n\t        indexOfTimeUnit = validTimePeriod.indexOf(timePeriod);\n\t\n\t        if (indexOfTimeUnit >= 0) {\n\t          arr = validTimePeriodMultiplier[indexOfTimeUnit];\n\t          for (i = 0, len = arr.length; i < len; i++) {\n\t            multiplierVal = arr[i];\n\t            timeMulSelectMenuOpt.push({\n\t              name: multiplierVal.toString(),\n\t              value: multiplierVal.toString()\n\t            });\n\t          }\n\t        }\n\t\n\t        timeMulSelectMenu.updateList(timeMulSelectMenuOpt);\n\t        timePeriodMultiplier ? timeMulSelectMenu.value(timePeriodMultiplier.toString()) : timeMulSelectMenu.setPlaceHolderValue('');\n\t\n\t        for (aggVal in avlAggMethods) {\n\t          aggMethodSelectMenuOpt.push({\n\t            name: capitalize(avlAggMethods[aggVal].formalName),\n\t            value: avlAggMethods[aggVal].nickName\n\t          });\n\t        }\n\t\n\t        aggMethodSelectMenu.updateList(aggMethodSelectMenuOpt);\n\t        aggregationMethod.value ? aggMethodSelectMenu.value(aggregationMethod.value) : aggMethodSelectMenu.setPlaceHolderValue('');\n\t        config.execute = true;\n\t      }\n\t    }, {\n\t      key: 'draw',\n\t      value: function draw(x, y, width, height, group) {\n\t        var self = this,\n\t            config = self.config,\n\t            measurement = self.measurement,\n\t            toolbars = self.toolbars,\n\t            ln,\n\t            i,\n\t            toolbar,\n\t            dataAgg = config.dataAgg;\n\t\n\t        self.getAvailablelAggreagation();\n\t\n\t        x = x === undefined ? measurement.x : x;\n\t        y = y === undefined ? measurement.y : y;\n\t        width = width === undefined ? measurement.width : width;\n\t        height = height === undefined ? measurement.height : height;\n\t        group = group === undefined ? self.parentGroup : group;\n\t        if (width && height) {\n\t          for (i = 0, ln = toolbars.length; i < ln; i++) {\n\t            toolbar = toolbars[i];\n\t            toolbar.draw(x, y, group);\n\t          }\n\t\n\t          config.defaultAggMethod = dataAgg.getDefaultAggregationMethod().nickName;\n\t          !config.drawn && self.apply(1);\n\t          self.rangeOnChange();\n\t          config.drawn = true;\n\t        }\n\t      }\n\t    }, {\n\t      key: 'dispose',\n\t      value: function dispose() {\n\t        // dispose extension\n\t      }\n\t    }, {\n\t      key: 'aggregation',\n\t      get: function get() {\n\t        return this.appliedAggregation;\n\t      },\n\t      set: function set(obj) {\n\t        this.appliedAggregation.timePeriod = obj.timePeriod;\n\t        this.appliedAggregation.timePeriodMultiplier = obj.timePeriodMultiplier;\n\t        this.appliedAggregation.aggregationMethod = obj.aggregationMethod;\n\t      }\n\t    }]);\n\t\n\t    return Aggregator;\n\t  }();\n\t\n\t  return Aggregator;\n\t};\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// data-aggregator-es5.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3bbaff825c8916f44249","'use strict';\nconst AggregatorGetter = require('./data-aggregator-ext');\n\n;(function (env, factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = env.document\n       ? factory(env) : function (win) {\n         if (!win.document) {\n           throw new Error('Window with document not present');\n         }\n         return factory(win, true);\n       };\n  } else {\n    env.Aggregator = factory(env, true);\n  }\n})(typeof window !== 'undefined' ? window : this, function (_window, windowExists) {\n  var FC = _window.FusionCharts;\n\n  FC.register('extension', ['private', 'data-aggregator', function () {\n    FC.registerComponent('extensions', 'data-aggregator', AggregatorGetter({FC: FC}));\n  }]);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tmodule.children = [];\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nmodule.exports = function (dep) {\n  /**\n   * Capitalize the first letter of a given string and return the string\n   * @private\n   */\n  var capitalize = function (string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    },\n    isPlainObject = function (o) {\n      return typeof o === 'object' && o.constructor === Object;\n    },\n    mergeRecursively = function recParsing (sink, source, lib) {\n      var prop;\n      for (prop in source) {\n        if (prop in sink) {\n          if (typeof source[prop] === 'object') {\n            recParsing(sink[prop], source[prop], lib);\n          }\n        } else {\n          if (isPlainObject(source[prop])) {\n            sink[prop] = lib.extend2({}, source[prop]);\n          } else {\n            sink[prop] = source[prop];\n          }\n        }\n      }\n    };\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n  if (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, 'includes', {\n      value: function (searchElement, fromIndex) {\n        // 1. Let O be ? ToObject(this value).\n        if (this == null) {\n          throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var o = Object(this);\n\n        // 2. Let len be ? ToLength(? Get(O, \"length\")).\n        var len = o.length >>> 0;\n\n        // 3. If len is 0, return false.\n        if (len === 0) {\n          return false;\n        }\n\n        // 4. Let n be ? ToInteger(fromIndex).\n        //    (If fromIndex is undefined, this step produces the value 0.)\n        var n = fromIndex | 0;\n\n        // 5. If n ≥ 0, then\n        //  a. Let k be n.\n        // 6. Else n < 0,\n        //  a. Let k be len + n.\n        //  b. If k < 0, let k be 0.\n        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n        // 7. Repeat, while k < len\n        while (k < len) {\n          // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n          // b. If SameValueZero(searchElement, elementK) is true, return true.\n          // c. Increase k by 1.\n          // NOTE: === provides the correct \"SameValueZero\" comparison needed here.\n          if (o[k] === searchElement) {\n            return true;\n          }\n          k++;\n        }\n\n        // 8. Return false\n        return false;\n      }\n    });\n  }\n  /**\n   * Class representing the Data Aggregator.\n   */\n  class Aggregator {\n    /**\n     * Create a Aggregator.\n     * @typedef {object} Aggregator.aggregation\n     * @property {string} binSize - The binSize applied to aggregate.\n     * @property {string} aggregationMethod - The method applied to aggregate.\n     */\n    constructor () {\n      /**\n       * @private\n       */\n      this.appliedAggregation = {\n        binSize: null,\n        aggregationMethod: null\n      };\n      this.config = {};\n    }\n\n    /**\n     * An object representing the binSize, aggregationMethod.\n     * @type {Aggregator.aggregation}\n     */\n    get aggregation () {\n      return this.appliedAggregation;\n    }\n\n    set aggregation (obj) {\n      this.appliedAggregation.timePeriod = obj.timePeriod;\n      this.appliedAggregation.timePeriodMultiplier = obj.timePeriodMultiplier;\n      this.appliedAggregation.aggregationMethod = obj.aggregationMethod;\n    }\n\n    /**\n     * Sets available aggregation options in configuration of extension\n     * @private\n     */\n    getAvailablelAggreagation () {\n      var config = this.config,\n        dataAgg = config.dataAgg,\n        avlTimePeriods = config.avlTimePeriods = dataAgg.getAggregationTimeRules(),\n        i,\n        len;\n\n      config.avlTimeMultiplier = [];\n      len = avlTimePeriods.length;\n\n      for (i = 0; i < len; i++) {\n        config.avlTimeMultiplier.push(avlTimePeriods[i].possibleFactors);\n      }\n    }\n\n    /**\n     * Calculates valid aggregation time periods and corresponding multipliers\n     * @private\n     */\n    getValidAggregation () {\n      var self = this,\n        config = self.config,\n        tsObject = self.tsObject,\n        dataAgg = config.dataAgg,\n        i,\n        j,\n        len1,\n        len2,\n        avlTimePeriods,\n        avlTimeMultiplier,\n        maxNumOfPlot = config.composition.reactiveModel.model['max-plot-point'],\n        minimumConsecutiveDifference = config.composition.dataset.category.minimumConsecutiveDifference,\n        multipliersArr,\n        currentTimeLength,\n        timePeriod,\n        time,\n        binSize,\n        multiplier,\n        globalReactiveModel = tsObject.globalReactiveModel,\n        maximumAllowedTicks = globalReactiveModel.prop('x-axis-maximum-allowed-ticks'),\n        minBinSize;\n\n      config.currentTimeLength = globalReactiveModel.model['x-axis-visible-range-end'] -\n        globalReactiveModel.model['x-axis-visible-range-start'];\n\n      avlTimePeriods = config.avlTimePeriods;\n      avlTimeMultiplier = config.avlTimeMultiplier;\n      currentTimeLength = config.currentTimeLength;\n\n      minBinSize = currentTimeLength / maxNumOfPlot;\n\n      config.validTimePeriod = [];\n      config.validTimePeriodMultiplier = [];\n      config.avlAggMethods = dataAgg.getAllAggregationMethod();\n\n      for (i = 0, len1 = avlTimePeriods.length; i < len1; i++) {\n        timePeriod = avlTimePeriods[i].name;\n        time = avlTimePeriods[i].interval;\n        multipliersArr = [];\n\n        for (j = 0, len2 = avlTimeMultiplier[i].length; j < len2; j++) {\n          multiplier = avlTimeMultiplier[i][j];\n          binSize = multiplier * time;\n\n          if ((binSize >= minBinSize) && (binSize > minimumConsecutiveDifference)) {\n            // Need to revisit\n            // && (currentTimeLength > maximumAllowedTicks * binSize * 0.5)) {\n            multipliersArr.push(avlTimeMultiplier[i][j]);\n          }\n        }\n        if (multipliersArr.length > 0) {\n          config.validTimePeriodMultiplier.push(multipliersArr);\n          config.validTimePeriod.push(timePeriod);\n        }\n      }\n    }\n\n    /**\n     * Returns current Aggregation applied to timeseries\n     * @private\n     */\n    getCurrentAggreation () {\n      var self = this,\n        config = self.config,\n        dataAgg = config.dataAgg,\n        composition = config.composition,\n        model = composition.reactiveModel,\n        currentAggMethod,\n        suitableInterval,\n        binSize;\n\n      binSize = model.prop('bin-size') - 1;\n\n      if (isFinite(binSize)) {\n        suitableInterval = dataAgg.timeRules.getSuitableInterval(binSize);\n        currentAggMethod = model.prop('aggregation-fn');\n      }\n\n      return {\n        timePeriod: suitableInterval && suitableInterval.name,\n        timePeriodMultiplier: suitableInterval && suitableInterval.step,\n        aggregationMethod: {\n          value: currentAggMethod && currentAggMethod.nickName,\n          text: currentAggMethod && currentAggMethod.formalName\n        }\n      };\n    }\n\n    init (require) {\n      var self = this,\n        config = self.config,\n        tsObject,\n        toolboxComponent = config.toolboxComponent = {},\n        api,\n        store,\n        composition,\n        saveTo = 'tsObject',\n        requiredParams = [\n          'graphics',\n          'globalReactiveModel',\n          'chart',\n          'spaceManagerInstance',\n          'chartInstance',\n          'smartLabel',\n          'extData',\n          'parentGroup',\n          'lib',\n          function acquire () {\n            let i = 0,\n              ii = requiredParams.length - 1,\n              param = '';\n            self[saveTo] = self[saveTo] || {};\n            self.requiredParams = {};\n            for (i = 0; i < ii; ++i) {\n              param = requiredParams[i];\n              self[saveTo][param] = arguments[i];\n            }\n          }\n        ];\n      require(requiredParams);\n\n      tsObject = self.tsObject;\n      config.usrConfig = tsObject.extData;\n\n      api = tsObject.chartInstance.apiInstance;\n      store = api.getComponentStore();\n      config.composition = composition = store.getCanvasByIndex(0).composition;\n      config.dataAgg = composition.impl.getDataAggregator();\n\n      toolboxComponent.toolbox = dep.FC.getComponent('api', 'toolbox');\n      toolboxComponent.config = {};\n\n      self.toolbars = [];\n\n      self.measurement = {};\n\n      self.toolbars.push(self.createToolbar());\n\n      composition.reactiveModel.onPropsChange(['bin-size', 'aggregation-fn'], function () {\n        if (config.execute) {\n          config.execute = false;\n          setTimeout(() => {\n            self.rangeOnChange();\n          }, 200);\n        }\n      });\n\n      window.Aggregator = self;\n      return self;\n    }\n\n    /**\n     * Create toolbar components\n     * @private\n     */\n    createToolbar () {\n      var self = this,\n        labelGroup,\n        selectMenuGroup,\n        buttonGroup,\n        toolbar,\n        timeMulSelectMenu,\n        timePeriodSelectMenu,\n        aggMethodSelectMenu,\n        resetButton,\n        applyButton,\n        config = self.config,\n        tsObject = self.tsObject,\n        label,\n\n        toolboxComponent = config.toolboxComponent,\n        toolbox = toolboxComponent.toolbox,\n        toolboxCompConfig = toolboxComponent.config,\n        HorizontalToolbar = toolbox.HorizontalToolbar,\n        ComponentGroup = toolbox.ComponentGroup,\n\n        graphics = tsObject.graphics,\n        paper = graphics.paper,\n        d3 = paper.getInstances().d3,\n        container = graphics.container,\n        chart = tsObject.chart,\n        smartLabel = tsObject.smartLabel,\n\n        timeMulSelectMenuOpt,\n\n        usrConfig,\n        style,\n\n        dependencies = {\n          paper: paper,\n          chart: chart,\n          smartLabel: smartLabel,\n          chartContainer: container\n        },\n\n        /**\n         * Sets valid time multiplier on time period change from extension toolbox\n         * @private\n         */\n        timePeriodOnChange = () => {\n          var timePeriodVal = timePeriodSelectMenu.value(),\n            timePeriodMultiplierVal = timeMulSelectMenu.value(),\n            prevTimePeroidMulVal = timePeriodMultiplierVal,\n            validTimePeriod = config.validTimePeriod,\n            validTimePeriodMultiplier = config.validTimePeriodMultiplier,\n            indexOfTimeUnit,\n            indexOfTimeMul,\n            multiplierVal,\n            len,\n            arr,\n            i = 0;\n\n          indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);\n          indexOfTimeMul = validTimePeriodMultiplier[indexOfTimeUnit].indexOf(Number(timePeriodMultiplierVal));\n\n          timeMulSelectMenuOpt = [];\n          arr = validTimePeriodMultiplier[indexOfTimeUnit];\n          for (i = 0, len = arr.length; i < len; i++) {\n            multiplierVal = arr[i];\n            timeMulSelectMenuOpt.push({\n              name: multiplierVal.toString(),\n              value: multiplierVal.toString()\n            });\n          }\n\n          timeMulSelectMenu.updateList(timeMulSelectMenuOpt);\n\n          if (indexOfTimeMul < 0) {\n            timeMulSelectMenu.value(validTimePeriodMultiplier[indexOfTimeUnit][0].toString());\n          } else {\n            timeMulSelectMenu.value(prevTimePeroidMulVal);\n          }\n        },\n\n        /**\n         * Sets state of applyButton(active/inactive) on change in value in toolbox\n         * @private\n         */\n        onChange = (type) => {\n          var currentAgg = self.getCurrentAggreation();\n          currentAgg.timePeriodMultiplier = currentAgg.timePeriodMultiplier &&\n            currentAgg.timePeriodMultiplier.toString();\n\n          if (currentAgg.timePeriodMultiplier !== timeMulSelectMenu.value() ||\n            currentAgg.timePeriod !== timePeriodSelectMenu.value() ||\n            currentAgg.aggregationMethod.value !== aggMethodSelectMenu.value()) {\n            applyButton.removeState('disabled');\n          } else {\n            applyButton.setState('disabled');\n          }\n\n          if (!aggMethodSelectMenu.value()) {\n            aggMethodSelectMenu.value(config.defaultAggMethod);\n          }\n          if (!timePeriodSelectMenu.value() && !timeMulSelectMenu.value()) {\n            timePeriodSelectMenu.value(config.validTimePeriod[0]);\n            timePeriodOnChange();\n          }\n        };\n\n      labelGroup = new ComponentGroup(dependencies, {\n        hPadding: 4\n      });\n      selectMenuGroup = new ComponentGroup(dependencies, {\n        hPadding: 0\n      });\n      buttonGroup = new ComponentGroup(dependencies, {\n        hPadding: 0\n      });\n\n      toolbar = new HorizontalToolbar(dependencies);\n      usrConfig = config.usrConfig;\n\n      var selectConf = {\n        container: {\n          style: {\n            'fill': '#fff',\n            'stroke': '#c8cecd',\n            'stroke-width': '1'\n          },\n          states: {\n            selected: {\n              stroke: '#1e1f1f'\n            },\n            hover: {\n              cursor: 'pointer'\n            }\n          }\n        },\n        text: {\n          style: {\n            fill: '#696969',\n            'font-size': '11px',\n            'font-family': '\"Lucida Grande\", sans-serif'\n          }\n        },\n        arrow: {\n          style: {\n            fill: '#696969'\n          }\n        },\n        attrs: {\n          'radius': 2,\n          'width': 50,\n          'height': 22,\n          'margin': {\n            right: 3\n          }\n        }\n      };\n\n      var defaultStyle = {\n        label: {\n          container: {\n            height: 22,\n            style: {\n\n            }\n          },\n          margin: {\n            right: 2\n          },\n          text: {\n            style: {\n              'font-size': '13px',\n              'font-family': '\"Lucida Grande\", sans-serif',\n              'font-weight': 'bold',\n              'fill': '#4b4b4b'\n            }\n          }\n        },\n        timeMulSelectMenu: {\n          container: selectConf.container,\n          text: selectConf.text,\n          arrow: selectConf.arrow,\n          attrs: {\n            'radius': 2,\n            'width': 50,\n            'height': 22,\n            'margin': {\n              right: 3,\n              left: 0\n            },\n            padding: {\n              left: 10,\n              right: 8\n            }\n          },\n          eventListeners: [{\n            type: 'change',\n            cb: onChange\n          }]\n        },\n        timePeriodSelectMenu: {\n          container: selectConf.container,\n          text: selectConf.text,\n          arrow: selectConf.arrow,\n          attrs: {\n            'radius': 2,\n            'width': 90,\n            'height': 22,\n            'margin': {\n              right: 9,\n              left: 0\n            },\n            padding: {\n              left: 10,\n              right: 8\n            }\n          },\n          eventListeners: [{\n            type: 'change',\n            cb: function () {\n              timePeriodOnChange();\n              onChange();\n            }\n          }]\n        },\n        aggMethodSelectMenu: {\n          container: selectConf.container,\n          text: selectConf.text,\n          arrow: selectConf.arrow,\n          attrs: {\n            'radius': 2,\n            'width': 100,\n            'height': 22,\n            margin: {\n              right: 8,\n              left: 0\n            },\n            padding: {\n              left: 10,\n              right: 8\n            }\n          },\n          eventListeners: [{\n            type: 'change',\n            cb: onChange\n          }]\n        },\n        dropDown: {\n          container: {\n            style: {\n              background: '#fff',\n              'border-color': '#898b8b',\n              'border-radius': '1px',\n              'border-style': 'solid',\n              'border-width': '2px',\n              'font-size': '11px',\n              'font-family': '\"Lucida Grande\", sans-serif'\n            }\n          },\n          listItem: {\n            style: {\n            },\n            states: {\n              hover: {\n                className: undefined,\n                style: {\n                  'background': '#e6e8e8',\n                  'color': '#696969',\n                  'cursor': 'pointer'\n                }\n              },\n              selected: {\n                className: undefined,\n                style: {\n                  'background': '#898b8b',\n                  'color': '#fff'\n                }\n              }\n            }\n          }\n        },\n        applyButton: {\n          container: {\n            style: {\n              'fill': '#555',\n              'stroke': '#ced5d4',\n              'stroke-width': 0\n            },\n            states: {\n              disabled: {\n                'fill': '#bebebe',\n                'stroke-width': 0,\n                'stroke': '#ced5d4'\n              },\n              hover: {\n                cursor: 'pointer'\n              }\n            }\n          },\n          text: {\n            style: {\n              'fill': '#f3f3f3',\n              'fontSize': '11px',\n              'fontFamily': '\"Lucida Grande\", sans-serif'\n            },\n            states: {\n              disabled: {\n                'fill': '#f3f3f3'\n              }\n            }\n          },\n          attrs: {\n            'radius': 1,\n            'width': 54,\n            'height': 22,\n            margin: {\n              right: 3,\n              left: 0\n            },\n            label: 'APPLY'\n          },\n          eventListeners: [{\n            type: 'click',\n            cb: function () {\n              self.apply(1);\n            }\n          }]\n        },\n        resetButton: {\n          container: {\n            style: {\n              'fill': '#898b8b',\n              'stroke': '#ced5d4',\n              'strokeWidth': 0\n            },\n            states: {\n              hover: {\n                cursor: 'pointer'\n              },\n              disabled: {\n                'fill': '#bebebe',\n                'stroke-width': 0,\n                'stroke': '#ced5d4',\n                cursor: 'default'\n              }\n            }\n          },\n          text: {\n            style: {\n              fill: '#f3f3f3',\n              'fontSize': '11px',\n              'fontFamily': '\"Lucida Grande\", sans-serif'\n            },\n            states: {\n              disabled: {\n                fill: '#f3f3f3'\n              }\n            }\n          },\n          attrs: {\n            'radius': 1,\n            'shadow': {\n              'fill': '#000',\n              'opacity': 0.35\n            },\n            'width': 54,\n            'height': 22,\n            margin: {\n              right: 3,\n              left: 0\n            },\n            label: 'RESET'\n          },\n          eventListeners: [{\n            type: 'click',\n            cb: function () {\n              self.apply(0);\n            }\n          }]\n        }\n      };\n\n      style = defaultStyle;\n\n      if (usrConfig.styles) {\n        mergeRecursively(usrConfig.styles, defaultStyle, this.tsObject.lib);\n        style = usrConfig.styles;\n      }\n\n      label = new toolbox.Label('Aggregation: ', dependencies, style.label);\n\n      label.setConfig({\n        className: style.label.className\n      });\n\n      applyClassName(label.getIndividualClassNames(label.getClassName()), 'label');\n\n      var parentGroup = tsObject.parentGroup;\n      var count = 0;\n\n      function applyClassName (obj, prop, state) {\n        var _style;\n        for (var key in obj) {\n          if (style[prop][key]) {\n            if (state && style[prop][key].states && style[prop][key].states[state]) {\n              _style = style[prop][key].states[state];\n            } else {\n              _style = style[prop][key].style;\n            }\n          }\n          _style && paper.cssAddRule('.' + obj[key], _style);\n        }\n      }\n\n      function factory (prop, cb, options) {\n        var sm = toolboxCompConfig[prop] = cb(options)\n        .setConfig(style[prop].attrs);\n\n        sm.setParentGroup(parentGroup);\n        sm.setConfig({\n          className: style[prop].className\n        });\n\n        sm.namespace('fusioncharts');\n        sm.appendSelector('ext1-' + (count++));\n\n        applyClassName(sm.getIndividualClassNames(sm.getClassName()), prop);\n        var classNames = sm.config.states;\n        for (var key in classNames) {\n          applyClassName(sm.getIndividualClassNames(classNames[key]), prop, key);\n        }\n\n        var dm = sm.config.dropDownMenu;\n        for (var components in dm) {\n          var component = dm[components];\n          switch (components) {\n            case 'container':\n              paper.cssAddRule('.' + component.className, style.dropDown.container.style);\n              break;\n            case 'listItem':\n              paper.cssAddRule('.' + component.className, style.dropDown.listItem.style);\n              var states = component.states;\n              for (var state in states) {\n                paper.cssAddRule('.' + states[state], style.dropDown.listItem.states[state].style);\n              }\n              break;\n          }\n        }\n\n        var eventListeners = style[prop].eventListeners;\n        for (var i = 0, len = eventListeners.length; i < len; i += 1) {\n          var event = eventListeners[i];\n          var obj = {};\n          obj[event.type] = event.cb;\n          sm.attachEventHandlers(obj);\n        }\n        return sm;\n      }\n\n      function createSelectButton (prop) {\n        return factory(prop, d3.selectButton, []);\n      }\n\n      function createButton (prop) {\n        return factory(prop, d3.button, style[prop].attrs.label);\n      }\n\n      labelGroup.addSymbol(label);\n      labelGroup.setConfig({\n        margin: {\n          right: 0\n        }\n      });\n\n      timeMulSelectMenu = createSelectButton('timeMulSelectMenu');\n      timePeriodSelectMenu = createSelectButton('timePeriodSelectMenu');\n      aggMethodSelectMenu = createSelectButton('aggMethodSelectMenu');\n\n      applyButton = createButton('applyButton');\n      resetButton = createButton('resetButton');\n\n      selectMenuGroup.addSymbol(timeMulSelectMenu);\n      selectMenuGroup.addSymbol(timePeriodSelectMenu);\n      selectMenuGroup.addSymbol(aggMethodSelectMenu);\n      buttonGroup.addSymbol(applyButton);\n      buttonGroup.addSymbol(resetButton);\n\n      toolbar.addComponent(labelGroup);\n      toolbar.addComponent(selectMenuGroup);\n      toolbar.addComponent(buttonGroup);\n      return toolbar;\n    }\n\n    getLogicalSpace (availableWidth, availableHeight) {\n      var logicalSpace,\n        width = 0,\n        height = 0,\n        i,\n        ln;\n\n      for (i = 0, ln = this.toolbars.length; i < ln; i++) {\n        logicalSpace = this.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n        width = Math.max(logicalSpace.width, width);\n        height += logicalSpace.height;\n        this.toolbars[i].width = logicalSpace.width;\n        this.toolbars[i].height = logicalSpace.height;\n      }\n      height += this.padding;\n      return {\n        width: width,\n        height: height\n      };\n    }\n\n    placeInCanvas (containerInstance) {\n      var self = this,\n        tsObject = self.tsObject,\n        usrConfig = self.config.usrConfig;\n\n      self.padding = 5;\n      tsObject.spaceManagerInstance.add([{\n        name: function () {\n          return 'data-aggregator';\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj[usrConfig.layout || 'inline'];\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj[usrConfig.orientation || 'horizontal'];\n          },\n          position: [{\n            type: function (obj) {\n              return obj[usrConfig.position || 'bottom'];\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj[usrConfig.alignment || 'right'];\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                return self.getLogicalSpace(parent.getWidth(), parent.getHeight());\n              }]\n            }]\n          }]\n        }]\n      }]);\n    }\n\n    setDrawingConfiguration (x, y, width, height, group) {\n      var mes = this.measurement;\n      mes.x = x;\n      mes.y = y;\n      mes.width = width;\n      mes.height = height;\n\n      this.parentGroup = group;\n\n      return this;\n    }\n\n    /**\n     * Apply or Reset Aggregation applied through extension in timeseries\n     * @param {number} set - Flag to set or reset. '1' to set, '0' to reset\n     * @private\n     */\n    apply (set) {\n      var self = this,\n        config = self.config,\n        toolboxCompConfig = config.toolboxComponent.config,\n        timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,\n        timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,\n        aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,\n        applyButton = toolboxCompConfig.applyButton,\n        resetButton = toolboxCompConfig.resetButton,\n\n        aggregate = self.tsObject.extData.aggregate || {},\n        validTimePeriod,\n        validTimePeriodMultiplier,\n        avlAggMethods,\n\n        indexOfTimeUnit,\n        validTimeBin,\n        validMethod,\n\n        model = config.composition.reactiveModel,\n        timePeriodVal,\n        timePeriodMultiplierVal,\n        aggMethod,\n        keys,\n        binSize,\n        timeInterval,\n        aggregation = self.aggregation,\n        arr,\n        i,\n        len,\n        canvas = config.composition.impl;\n\n      if (set) {\n        if (!config.drawn) {\n          timePeriodVal = aggregate.timeUnit && aggregate.timeUnit.toString().toLowerCase();\n          timePeriodMultiplierVal = aggregate.timeMultiplier;\n          aggMethod = aggregate.method && aggregate.method.toString();\n\n          self.getValidAggregation();\n          validTimePeriod = config.validTimePeriod;\n          validTimePeriodMultiplier = config.validTimePeriodMultiplier;\n          avlAggMethods = config.avlAggMethods;\n\n          if (validTimePeriod.includes(timePeriodVal)) {\n            indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);\n            if (!validTimePeriodMultiplier[indexOfTimeUnit].includes(Number(timePeriodMultiplierVal))) {\n              timePeriodMultiplierVal = validTimePeriodMultiplier[indexOfTimeUnit][0];\n            }\n            validTimeBin = true;\n          }\n\n          if (avlAggMethods[aggMethod]) {\n            validMethod = true;\n          }\n\n          if (validTimeBin || validMethod) {\n            if (validTimeBin) {\n              arr = config.avlTimePeriods;\n              for (i = 0, len = arr.length; i < len; i++) {\n                keys = arr[i];\n                if (keys.name === timePeriodVal) {\n                  timeInterval = keys.interval;\n                  break;\n                }\n              }\n              binSize = timeInterval * Number(timePeriodMultiplierVal);\n              model\n                .lock()\n                .prop('bin-size-ext', binSize)\n                .unlock();\n              aggregation.binSize = binSize;\n            }\n\n            if (validMethod) {\n              model\n                .lock()\n                .prop('aggregation-fn-ext', config.avlAggMethods[aggMethod])\n                .unlock();\n              aggregation.aggregationMethod = aggMethod;\n            }\n            applyButton.setState('disabled');\n            resetButton.removeState('disabled');\n          }\n        } else {\n          timePeriodVal = timePeriodSelectMenu.value();\n          timePeriodMultiplierVal = timeMulSelectMenu.value();\n          aggMethod = aggMethodSelectMenu.value();\n          arr = config.avlTimePeriods;\n          for (i = 0, len = arr.length; i < len; i++) {\n            keys = arr[i];\n            if (keys.name === timePeriodVal) {\n              timeInterval = keys.interval;\n              break;\n            }\n          }\n          binSize = timeInterval * Number(timePeriodMultiplierVal);\n          model\n            .lock()\n            .prop('bin-size-ext', binSize)\n            .prop('aggregation-fn-ext', config.avlAggMethods[aggMethod])\n            .unlock();\n          aggregation.binSize = binSize;\n          aggregation.aggregationMethod = aggMethod;\n          applyButton.setState('disabled');\n          resetButton.removeState('disabled');\n        }\n      } else {\n        canvas.resetAggregation();\n        aggregation.binSize = null;\n        aggregation.aggregationMethod = null;\n        resetButton.setState('disabled');\n      }\n    }\n\n    /**\n     * Compute and populate toolboxes with valid values on change in range of visual window\n     * @private\n     */\n    rangeOnChange () {\n      var self = this,\n        config = self.config,\n        toolboxCompConfig = config.toolboxComponent.config,\n        timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,\n        timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,\n        aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,\n        applyButton = toolboxCompConfig.applyButton,\n        resetButton = toolboxCompConfig.resetButton,\n        model = config.composition.reactiveModel,\n\n        timePeriodVal,\n        timePeriodSelectMenuOpt,\n        validTimePeriod,\n        indexOfTimeUnit,\n\n        multiplierVal,\n        timeMulSelectMenuOpt,\n        validTimePeriodMultiplier,\n\n        aggVal,\n        aggMethodSelectMenuOpt,\n        avlAggMethods,\n\n        aggregation = self.aggregation,\n        currentAggregationObj,\n        timePeriod,\n        timePeriodMultiplier,\n        aggregationMethod,\n        i,\n        len,\n        arr;\n\n      self.getValidAggregation();\n      currentAggregationObj = self.getCurrentAggreation();\n      timePeriod = currentAggregationObj.timePeriod;\n      timePeriodMultiplier = currentAggregationObj.timePeriodMultiplier;\n      aggregationMethod = currentAggregationObj.aggregationMethod;\n\n      timePeriodSelectMenuOpt = [];\n      timeMulSelectMenuOpt = [];\n      aggMethodSelectMenuOpt = [];\n\n      validTimePeriod = config.validTimePeriod;\n      validTimePeriodMultiplier = config.validTimePeriodMultiplier;\n      avlAggMethods = config.avlAggMethods;\n\n      applyButton.setState('disabled');\n\n      if (aggregation.binSize !== model.prop('bin-size') &&\n        (aggregationMethod.value === config.defaultAggMethod || !aggregationMethod.value)) {\n        aggregation.binSize = null;\n        aggregation.aggregationMethod = null;\n        resetButton.setState('disabled');\n      } else {\n        resetButton.removeState('disabled');\n      }\n\n      for (i = 0, len = validTimePeriod.length; i < len; i++) {\n        timePeriodVal = validTimePeriod[i];\n        timePeriodSelectMenuOpt.push({\n          name: capitalize(timePeriodVal),\n          value: timePeriodVal\n        });\n      }\n\n      timePeriodSelectMenu.updateList(timePeriodSelectMenuOpt);\n      timePeriod ? timePeriodSelectMenu.value(timePeriod) : timePeriodSelectMenu.setPlaceHolderValue('');\n\n      indexOfTimeUnit = validTimePeriod.indexOf(timePeriod);\n\n      if (indexOfTimeUnit >= 0) {\n        arr = validTimePeriodMultiplier[indexOfTimeUnit];\n        for (i = 0, len = arr.length; i < len; i++) {\n          multiplierVal = arr[i];\n          timeMulSelectMenuOpt.push({\n            name: multiplierVal.toString(),\n            value: multiplierVal.toString()\n          });\n        }\n      }\n\n      timeMulSelectMenu.updateList(timeMulSelectMenuOpt);\n      timePeriodMultiplier ? timeMulSelectMenu.value(timePeriodMultiplier.toString())\n        : timeMulSelectMenu.setPlaceHolderValue('');\n\n      for (aggVal in avlAggMethods) {\n        aggMethodSelectMenuOpt.push({\n          name: capitalize(avlAggMethods[aggVal].formalName),\n          value: avlAggMethods[aggVal].nickName\n        });\n      }\n\n      aggMethodSelectMenu.updateList(aggMethodSelectMenuOpt);\n      aggregationMethod.value ? aggMethodSelectMenu.value(aggregationMethod.value)\n        : aggMethodSelectMenu.setPlaceHolderValue('');\n      config.execute = true;\n    }\n\n    draw (x, y, width, height, group) {\n      var self = this,\n        config = self.config,\n        measurement = self.measurement,\n        toolbars = self.toolbars,\n        ln,\n        i,\n        toolbar,\n        dataAgg = config.dataAgg;\n\n      self.getAvailablelAggreagation();\n\n      x = x === undefined ? measurement.x : x;\n      y = y === undefined ? measurement.y : y;\n      width = width === undefined ? measurement.width : width;\n      height = height === undefined ? measurement.height : height;\n      group = group === undefined ? self.parentGroup : group;\n      if (width && height) {\n        for (i = 0, ln = toolbars.length; i < ln; i++) {\n          toolbar = toolbars[i];\n          toolbar.draw(x, y, group);\n        }\n\n        config.defaultAggMethod = dataAgg.getDefaultAggregationMethod().nickName;\n        !config.drawn && self.apply(1);\n        self.rangeOnChange();\n        config.drawn = true;\n      }\n    }\n\n    dispose () {\n      // dispose extension\n    }\n  }\n  return Aggregator;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/data-aggregator-ext.js"],"sourceRoot":""}