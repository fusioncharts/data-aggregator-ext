/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var AggregatorGetter = __webpack_require__(2);
	
	;(function (env, factory) {
	  if (( false ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
	    module.exports = env.document ? factory(env) : function (win) {
	      if (!win.document) {
	        throw new Error('Window with document not present');
	      }
	      return factory(win, true);
	    };
	  } else {
	    env.Aggregator = factory(env, true);
	  }
	})(typeof window !== 'undefined' ? window : undefined, function (_window, windowExists) {
	  var FC = _window.FusionCharts;
	
	  FC.register('extension', ['private', 'data-aggregator', function () {
	    FC.registerComponent('extensions', 'data-aggregator', AggregatorGetter({ FC: FC }));
	  }]);
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	module.exports = function (dep) {
	  /**
	   * Class representing the Data Aggregator.
	   */
	  var Aggregator = function () {
	    /**
	     * Create a Aggregator.
	     * @typedef {object} Aggregator.aggregation
	     * @property {string} timePeriod - The time interval of aggregation.
	     * @property {number} timePeriodMultiplier - The multiplier of time interval.
	     * @property {string} aggregationMethod - The method applied to aggregate.
	     */
	    function Aggregator() {
	      _classCallCheck(this, Aggregator);
	
	      /**
	       * @private
	       */
	      this.appliedAggregation = {
	        timePeriod: null,
	        timePeriodMultiplier: null,
	        aggregationMethod: null
	      };
	      this.config = {};
	    }
	
	    /**
	     * An object representing the timePeriod, timePeriodMultiplier, aggregationMethod.
	     * @type {Aggregator.aggregation}
	     */
	
	
	    _createClass(Aggregator, [{
	      key: 'getAvailablelAggreagation',
	
	
	      /**
	       * Sets available aggregation options in configuration of extension
	       * @private
	       */
	      value: function getAvailablelAggreagation() {
	        var config = this.config,
	            dataAgg = config.dataAgg,
	            avlTimePeriods = config.avlTimePeriods = dataAgg.getAggregationTimeRules(),
	            i,
	            len;
	
	        config.avlTimeMultiplier = [];
	        len = avlTimePeriods.length;
	
	        for (i = 0; i < len; i++) {
	          config.avlTimeMultiplier.push(avlTimePeriods[i].possibleFactors);
	        }
	      }
	
	      /**
	       * Calculates valid aggregation time periods and corresponding multipliers
	       * @private
	       */
	
	    }, {
	      key: 'getValidAggregation',
	      value: function getValidAggregation() {
	        var self = this,
	            config = self.config,
	            tsObject = self.tsObject,
	            dataAgg = config.dataAgg,
	            i,
	            j,
	            len1,
	            len2,
	            avlTimePeriods,
	            avlTimeMultiplier,
	
	        // minNumOfPlot = 5,
	        maxNumOfPlot = config.composition.reactiveModel.model['max-plot-point'],
	            multipliersArr,
	            currentTimeLength,
	            timePeriod,
	            time,
	            expectedTime,
	            multiplier,
	            minBinSize;
	        // maxBinSize;
	
	        config.currentTimeLength = tsObject.globalReactiveModel.model['x-axis-visible-range-end'] - tsObject.globalReactiveModel.model['x-axis-visible-range-start'];
	
	        avlTimePeriods = config.avlTimePeriods;
	        avlTimeMultiplier = config.avlTimeMultiplier;
	        currentTimeLength = config.currentTimeLength;
	
	        config.minBinSize = minBinSize = currentTimeLength / maxNumOfPlot;
	        // config.maxBinSize = maxBinSize = currentTimeLength / minNumOfPlot;
	
	        config.validTimePeriod = [];
	        config.validTimePeriodMultiplier = [];
	        config.avlAggMethods = dataAgg.getAllAggregationMethod();
	
	        for (i = 0, len1 = avlTimePeriods.length; i < len1; i++) {
	          timePeriod = avlTimePeriods[i].name;
	          time = avlTimePeriods[i].interval;
	          multipliersArr = [];
	
	          for (j = 0, len2 = avlTimeMultiplier[i].length; j < len2; j++) {
	            multiplier = avlTimeMultiplier[i][j];
	            expectedTime = multiplier * time;
	
	            // if ((expectedTime >= minBinSize) && (expectedTime <= maxBinSize)) {
	            if (expectedTime >= minBinSize) {
	              multipliersArr.push(avlTimeMultiplier[i][j]);
	            }
	          }
	          if (multipliersArr.length > 0) {
	            config.validTimePeriodMultiplier.push(multipliersArr);
	            config.validTimePeriod.push(timePeriod);
	          }
	        }
	        // console.log('Time Period: ', config.validTimePeriod);
	        // console.log('Number Of Multipliers: ', config.validTimePeriodMultiplier);
	        // console.log('Methods: ', config.avlAggMethods);
	      }
	    }, {
	      key: 'getCurrentAggreation',
	      value: function getCurrentAggreation() {
	        var self = this,
	            config = self.config,
	            dataAgg = config.dataAgg,
	            composition = config.composition,
	            model = composition.reactiveModel,
	            currentAggMethod,
	            suitableInterval,
	            binSize;
	
	        binSize = model.prop('bin-size') - 1;
	
	        if (isFinite(binSize)) {
	          config.canAggregate = true;
	          suitableInterval = dataAgg.timeRules.getSuitableInterval(binSize);
	          currentAggMethod = model.prop('aggregation-fn');
	        } else {
	          config.canAggregate = false;
	          suitableInterval = composition.xAxis.getScaleObj().getIntervalObj().getConfig('intervals').minor.timeUnit;
	          config.validTimePeriod = [suitableInterval.name];
	          config.validTimePeriodMultiplier = [[suitableInterval.step]];
	          config.avlAggMethods = {
	            'invalid': {
	              formalName: 'invalid',
	              nickName: 'invalid'
	            }
	          };
	          currentAggMethod = config.avlAggMethods['invalid'];
	        }
	
	        return {
	          timePeriod: suitableInterval.name,
	          timePeriodMultiplier: suitableInterval.step,
	          aggregationMethod: {
	            value: currentAggMethod.nickName,
	            text: currentAggMethod.formalName
	          }
	        };
	      }
	
	      /**
	       * Set Aggregation on time series
	       * @param  {object} obj
	       * @property {string} timePeriod - The time interval of aggregation.
	       * @property {number} timePeriodMultiplier - The multiplier of time interval.
	       * @property {string} aggregationMethod - The method applied to aggregate.
	       */
	
	    }, {
	      key: 'setAggregation',
	      value: function setAggregation(obj) {
	        var avlAggMethods,
	            validTimePeriod,
	            timePeriodIndex,
	            validTimePeriodMultiplier,
	            config = this.config;
	
	        avlAggMethods = config.avlAggMethods;
	        validTimePeriod = config.validTimePeriod;
	        validTimePeriodMultiplier = config.validTimePeriodMultiplier;
	
	        // if (avlAggMethods.includes(obj.aggregationMethod) && validTimePeriod.includes(obj.timePeriod)) {
	        //   timePeriodIndex = validTimePeriod.indexOf(obj.timePeriod);
	        //   if (validTimePeriodMultiplier[timePeriodIndex].includes(Number(obj.timePeriodMultiplier))) {
	        //     this.aggregation = obj;
	        //     console.log(this.aggregation);
	        //     return true;
	        //   } else {
	        //     console.log(this.aggregation);
	        //     return false;
	        //   }
	        // } else {
	        //   console.log(this.aggregation);
	        //   return false;
	        // }
	      }
	
	      /**
	       * Reset Applied Aggregation
	       */
	
	    }, {
	      key: 'resetAggregation',
	      value: function resetAggregation() {}
	    }, {
	      key: 'init',
	      value: function init(require) {
	        var self = this,
	            config = self.config,
	            toolboxComponent = config.toolboxComponent = {},
	            api,
	            store,
	            composition,
	            saveTo = 'tsObject',
	            requiredParams = ['graphics', 'globalReactiveModel', 'chart', 'spaceManagerInstance', 'chartInstance', 'smartLabel', function acquire() {
	          var i = 0,
	              ii = requiredParams.length - 1,
	              param = '';
	          self[saveTo] = self[saveTo] || {};
	          self.requiredParams = {};
	          for (i = 0; i < ii; ++i) {
	            param = requiredParams[i];
	            self[saveTo][param] = arguments[i];
	          }
	          // onInit(self[saveTo]);
	        }];
	        require(requiredParams);
	
	        api = self.tsObject.chartInstance.apiInstance;
	        store = api.getComponentStore();
	        config.composition = composition = store.getCanvasByIndex(0).composition;
	        config.dataAgg = composition.impl.getDataAggregator();
	
	        toolboxComponent.toolbox = dep.FC.getComponent('api', 'toolbox');
	        toolboxComponent.config = {};
	
	        self.toolbars = [];
	
	        self.measurement = {};
	
	        self.toolbars.push(self.createToolbar());
	
	        window.Aggregator = self;
	        return self;
	      }
	    }, {
	      key: 'createToolbar',
	      value: function createToolbar() {
	        var self = this,
	            group,
	            toolbar,
	            timeMulSelectMenu,
	            timePeriodSelectMenu,
	            aggMethodSelectMenu,
	            resetButton,
	            applyButton,
	            config = self.config,
	            tsObject = self.tsObject,
	            label,
	            toolboxComponent = config.toolboxComponent,
	            toolbox = toolboxComponent.toolbox,
	            toolboxCompConfig = toolboxComponent.config,
	            HorizontalToolbar = toolbox.HorizontalToolbar,
	            ComponentGroup = toolbox.ComponentGroup,
	            SymbolStore = toolbox.SymbolStore,
	            graphics = tsObject.graphics,
	            paper = graphics.paper,
	            container = graphics.container,
	            chart = tsObject.chart,
	            smartLabel = tsObject.smartLabel,
	            multiplierVal,
	            timeMulSelectMenuOpt = '',
	            dependencies = {
	          paper: paper,
	          chart: chart,
	          smartLabel: smartLabel,
	          chartContainer: container
	        },
	            apply = function apply(set) {
	          var model = config.composition.reactiveModel,
	              timePeriodVal = timePeriodSelectMenu.value(),
	              timePeriodMultiplierVal = timeMulSelectMenu.value(),
	              aggMethodSelectMenuVal = aggMethodSelectMenu.value(),
	              keys,
	              timeInterval,
	              canvas = config.composition.impl;
	
	          var _iteratorNormalCompletion = true;
	          var _didIteratorError = false;
	          var _iteratorError = undefined;
	
	          try {
	            for (var _iterator = config.avlTimePeriods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	              keys = _step.value;
	
	              if (keys.name === timePeriodVal) {
	                timeInterval = keys.interval;
	                break;
	              }
	            }
	          } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	              }
	            } finally {
	              if (_didIteratorError) {
	                throw _iteratorError;
	              }
	            }
	          }
	
	          if (set && isFinite(model.prop('bin-size'))) {
	            model.lock().prop('bin-size-ext', timeInterval * Number(timePeriodMultiplierVal)).prop('aggregation-fn-ext', config.avlAggMethods[aggMethodSelectMenuVal]).unlock();
	          } else {
	            canvas.resetAggregation();
	          }
	          // applyButton.updateVisual('disable');
	          // applyButton.updateVisual('enable');
	        },
	            timePeriodOnChange = function timePeriodOnChange() {
	          var timePeriodVal = timePeriodSelectMenu.value(),
	              timePeriodMultiplierVal = timeMulSelectMenu.value(),
	              prevTimePeroidMulVal = timePeriodMultiplierVal,
	              validTimePeriod = config.validTimePeriod,
	              validTimePeriodMultiplier = config.validTimePeriodMultiplier,
	              indexOfTimeUnit,
	              indexOfTimeMul;
	
	          indexOfTimeUnit = validTimePeriod.indexOf(timePeriodVal);
	          indexOfTimeMul = validTimePeriodMultiplier[indexOfTimeUnit].indexOf(Number(timePeriodMultiplierVal));
	
	          // console.log(indexOfTimeUnit, indexOfTimeMul);
	          timeMulSelectMenuOpt = '';
	          var _iteratorNormalCompletion2 = true;
	          var _didIteratorError2 = false;
	          var _iteratorError2 = undefined;
	
	          try {
	            for (var _iterator2 = validTimePeriodMultiplier[indexOfTimeUnit][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	              multiplierVal = _step2.value;
	
	              timeMulSelectMenuOpt += '<option value="' + multiplierVal + '">' + multiplierVal + '</option>';
	            }
	          } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                _iterator2.return();
	              }
	            } finally {
	              if (_didIteratorError2) {
	                throw _iteratorError2;
	              }
	            }
	          }
	
	          timeMulSelectMenu.updateList(timeMulSelectMenuOpt);
	
	          if (indexOfTimeMul < 0) {
	            timeMulSelectMenu.value(validTimePeriodMultiplier[indexOfTimeUnit][0].toString());
	          } else {
	            timeMulSelectMenu.value(prevTimePeroidMulVal);
	          }
	        };
	
	        group = new ComponentGroup(dependencies);
	        toolbar = new HorizontalToolbar(dependencies);
	
	        group.setConfig({
	          fill: '#fff',
	          borderThickness: 0
	        });
	
	        toolbar.setConfig({
	          fill: '#fff',
	          borderThickness: 0
	        });
	
	        label = new toolbox.Label('Aggregate Data:', dependencies, {
	          text: {
	            style: {
	              'font-size': '14',
	              'fill': '#696969'
	            }
	          }
	        });
	
	        toolboxCompConfig.timePeriodSelectMenu = timePeriodSelectMenu = new toolbox.SelectSymbol({
	          width: 90,
	          height: 20
	        }, dependencies, {
	          innerHTML: '<option value="time">Time Period</option>'
	        }, {
	          strokeWidth: 1,
	          stroke: 'rgba(102,102,102,0.5)',
	          symbolStrokeWidth: 0,
	          btnTextStyle: {
	            fontSize: 11
	          },
	          hoverFill: '#1e1f1f'
	        });
	
	        toolboxCompConfig.timeMulSelectMenu = timeMulSelectMenu = new toolbox.SelectSymbol({
	          width: 50,
	          height: 20
	        }, dependencies, {
	          innerHTML: '<option value="number">Multiplier</option>'
	        }, {
	          strokeWidth: 1,
	          stroke: 'rgba(102,102,102,0.5)',
	          symbolStrokeWidth: 0,
	          btnTextStyle: {
	            fontSize: 11
	          },
	          hoverFill: '#1e1f1f'
	        });
	
	        toolboxCompConfig.aggMethodSelectMenu = aggMethodSelectMenu = new toolbox.SelectSymbol({
	          width: 90,
	          height: 20
	        }, dependencies, {
	          innerHTML: '<option value="Formula">Method</option>'
	        }, {
	          strokeWidth: 1,
	          stroke: 'rgba(102,102,102,0.5)',
	          symbolStrokeWidth: 0,
	          btnTextStyle: {
	            fontSize: 11
	          },
	          hoverFill: '#1e1f1f'
	        });
	
	        toolboxCompConfig.applyButton = applyButton = new toolbox.Symbol('APPLY', true, dependencies, {
	          fill: '#555',
	          labelFill: '#fff',
	          hoverFill: '#555',
	          width: 30,
	          height: 20,
	          btnTextStyle: {
	            fontSize: 11
	          }
	        }).attachEventHandlers({
	          click: function click() {
	            apply(1);
	          }
	        });
	        toolboxCompConfig.resetButton = resetButton = new toolbox.Symbol('RESET', true, dependencies, {
	          fill: '#898b8b',
	          labelFill: '#fff',
	          hoverFill: '#898b8b',
	          width: 30,
	          height: 20,
	          btnTextStyle: {
	            fontSize: 11
	          }
	        }).attachEventHandlers({
	          click: function click() {
	            apply(0);
	          }
	        });
	
	        group.addSymbol(label);
	        group.addSymbol(timeMulSelectMenu);
	        group.addSymbol(timePeriodSelectMenu);
	        group.addSymbol(aggMethodSelectMenu);
	        group.addSymbol(applyButton);
	        group.addSymbol(resetButton);
	
	        SymbolStore.register('textBoxIcon', function (x, y, rad, w, h, padX, padY) {
	          var x1 = x - w / 2 + padX / 2,
	              x2 = x + w / 2 - padX / 2,
	              y1 = y - h / 2 + padY / 2,
	              y2 = y + h / 2 - padY / 2;
	
	          return ['M', x1, y1, 'L', x2, y1, 'L', x2, y2, 'L', x1, y2, 'Z'];
	        });
	
	        timeMulSelectMenu.attachEventHandlers({
	          click: {
	            fn: timeMulSelectMenu.edit
	          },
	          textOnBlur: function textOnBlur() {
	            timeMulSelectMenu.blur();
	          }
	        });
	        timePeriodSelectMenu.attachEventHandlers({
	          click: {
	            fn: timePeriodSelectMenu.edit
	          },
	          textOnBlur: function textOnBlur() {
	            timePeriodSelectMenu.blur();
	          },
	          textOnChange: function textOnChange() {
	            timePeriodSelectMenu.blur();
	            timePeriodOnChange();
	          }
	        });
	        aggMethodSelectMenu.attachEventHandlers({
	          click: {
	            fn: aggMethodSelectMenu.edit
	          },
	          textOnBlur: function textOnBlur() {
	            aggMethodSelectMenu.blur();
	          }
	        });
	
	        toolbar.addComponent(group);
	
	        return toolbar;
	      }
	    }, {
	      key: 'getLogicalSpace',
	      value: function getLogicalSpace(availableWidth, availableHeight) {
	        var logicalSpace,
	            width = 0,
	            height = 0,
	            i,
	            ln;
	
	        for (i = 0, ln = this.toolbars.length; i < ln; i++) {
	          logicalSpace = this.toolbars[i].getLogicalSpace();
	          width = Math.max(logicalSpace.width, width);
	          height += logicalSpace.height;
	          this.toolbars[i].width = logicalSpace.width;
	          this.toolbars[i].height = logicalSpace.height;
	        }
	        height += this.padding;
	        return {
	          width: width > availableWidth ? 0 : width,
	          height: height > availableHeight ? 0 : height
	        };
	      }
	    }, {
	      key: 'placeInCanvas',
	      value: function placeInCanvas(containerInstance) {
	        var _self = this,
	            tsObject = _self.tsObject;
	
	        _self.padding = 5;
	        tsObject.spaceManagerInstance.add([{
	          name: function name() {
	            return 'DataAggregator';
	          },
	          ref: function ref(obj) {
	            return obj['0'];
	          },
	          self: function self() {
	            return _self;
	          },
	          priority: function priority() {
	            return 2;
	          },
	          layout: function layout(obj) {
	            return obj.inline;
	          },
	          orientation: [{
	            type: function type(obj) {
	              return obj.horizontal;
	            },
	            position: [{
	              type: function type(obj) {
	                return obj.top;
	              },
	              alignment: [{
	                type: function type(obj) {
	                  return obj.left;
	                },
	                dimensions: [function () {
	                  var parent = this.getParentComponentGroup();
	                  return _self.getLogicalSpace(parent.getWidth(), parent.getHeight());
	                }]
	              }]
	            }]
	          }]
	        }]);
	      }
	    }, {
	      key: 'setDrawingConfiguration',
	      value: function setDrawingConfiguration(x, y, width, height, group) {
	        var mes = this.measurement;
	        mes.x = x;
	        mes.y = y;
	        mes.width = width;
	        mes.height = height;
	
	        this.parentGroup = group;
	
	        return this;
	      }
	    }, {
	      key: 'draw',
	      value: function draw(x, y, width, height, group) {
	        var self = this,
	            config = self.config,
	            toolboxCompConfig = config.toolboxComponent.config,
	            timePeriodSelectMenu = toolboxCompConfig.timePeriodSelectMenu,
	            timeMulSelectMenu = toolboxCompConfig.timeMulSelectMenu,
	            aggMethodSelectMenu = toolboxCompConfig.aggMethodSelectMenu,
	            currentAggregationObj,
	            measurement = self.measurement,
	            toolbars = self.toolbars,
	            ln,
	            i,
	            toolbar,
	            model = config.composition.reactiveModel,
	            timePeriodVal,
	            timePeriodSelectMenuOpt,
	            validTimePeriod,
	            indexOfTimeUnit,
	            multiplierVal,
	            timeMulSelectMenuOpt,
	            validTimePeriodMultiplier,
	            aggVal,
	            aggMethodSelectMenuOpt,
	            avlAggMethods,
	            rangeOnChange = function rangeOnChange() {
	          var attrStr = '';
	
	          self.getValidAggregation();
	          currentAggregationObj = self.getCurrentAggreation();
	
	          timePeriodSelectMenuOpt = '';
	          timeMulSelectMenuOpt = '';
	          aggMethodSelectMenuOpt = '';
	
	          validTimePeriod = config.validTimePeriod;
	          validTimePeriodMultiplier = config.validTimePeriodMultiplier;
	          avlAggMethods = config.avlAggMethods;
	
	          if (!config.canAggregate) {
	            attrStr = 'disabled hidden';
	          }
	
	          var _iteratorNormalCompletion3 = true;
	          var _didIteratorError3 = false;
	          var _iteratorError3 = undefined;
	
	          try {
	            for (var _iterator3 = validTimePeriod[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	              timePeriodVal = _step3.value;
	
	              timePeriodSelectMenuOpt += '<option ' + attrStr + ' value="' + timePeriodVal + '">' + timePeriodVal.toUpperCase() + '</option>';
	            }
	          } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                _iterator3.return();
	              }
	            } finally {
	              if (_didIteratorError3) {
	                throw _iteratorError3;
	              }
	            }
	          }
	
	          timePeriodSelectMenu.updateList(timePeriodSelectMenuOpt);
	          timePeriodSelectMenu.value(currentAggregationObj.timePeriod);
	
	          indexOfTimeUnit = validTimePeriod.indexOf(currentAggregationObj.timePeriod);
	
	          if (indexOfTimeUnit >= 0) {
	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;
	
	            try {
	              for (var _iterator4 = validTimePeriodMultiplier[indexOfTimeUnit][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                multiplierVal = _step4.value;
	
	                timeMulSelectMenuOpt += '<option ' + attrStr + ' value="' + multiplierVal + '">' + multiplierVal.toString().toUpperCase() + '</option>';
	              }
	            } catch (err) {
	              _didIteratorError4 = true;
	              _iteratorError4 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                  _iterator4.return();
	                }
	              } finally {
	                if (_didIteratorError4) {
	                  throw _iteratorError4;
	                }
	              }
	            }
	          }
	
	          timeMulSelectMenu.updateList(timeMulSelectMenuOpt);
	          timeMulSelectMenu.value(currentAggregationObj.timePeriodMultiplier.toString());
	
	          for (aggVal in avlAggMethods) {
	            aggMethodSelectMenuOpt += '<option ' + attrStr + ' value="' + avlAggMethods[aggVal].nickName + '">' + avlAggMethods[aggVal].formalName.toUpperCase() + '</option>';
	          }
	
	          aggMethodSelectMenu.updateList(aggMethodSelectMenuOpt);
	          aggMethodSelectMenu.value(currentAggregationObj.aggregationMethod.value);
	        };
	
	        self.getAvailablelAggreagation();
	
	        x = x === undefined ? measurement.x : x;
	        y = y === undefined ? measurement.y : y;
	        width = width === undefined ? measurement.width : width;
	        height = height === undefined ? measurement.height : height;
	        group = group === undefined ? self.parentGroup : group;
	        if (width && height) {
	          for (i = 0, ln = toolbars.length; i < ln; i++) {
	            toolbar = toolbars[i];
	            toolbar.draw(x, y);
	          }
	        }
	        rangeOnChange();
	
	        model.onPropsChange(['bin-size', 'aggregation-fn'], rangeOnChange);
	      }
	    }, {
	      key: 'dispose',
	      value: function dispose() {
	        // dispose extension
	      }
	    }, {
	      key: 'aggregation',
	      get: function get() {
	        return this.appliedAggregation;
	      },
	      set: function set(obj) {
	        this.appliedAggregation.timePeriod = obj.timePeriod;
	        this.appliedAggregation.timePeriodMultiplier = obj.timePeriodMultiplier;
	        this.appliedAggregation.aggregationMethod = obj.aggregationMethod;
	      }
	    }]);
	
	    return Aggregator;
	  }();
	
	  return Aggregator;
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOTcwNTY1ZmQ2Njc0M2YwNDhiOGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZjdHMtZXh0LWFnZ3JlZ2F0b3IuanMiXSwibmFtZXMiOlsiQWdncmVnYXRvckdldHRlciIsInJlcXVpcmUiLCJlbnYiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50Iiwid2luIiwiRXJyb3IiLCJBZ2dyZWdhdG9yIiwid2luZG93IiwiX3dpbmRvdyIsIndpbmRvd0V4aXN0cyIsIkZDIiwiRnVzaW9uQ2hhcnRzIiwicmVnaXN0ZXIiLCJyZWdpc3RlckNvbXBvbmVudCIsImRlcCIsImFwcGxpZWRBZ2dyZWdhdGlvbiIsInRpbWVQZXJpb2QiLCJ0aW1lUGVyaW9kTXVsdGlwbGllciIsImFnZ3JlZ2F0aW9uTWV0aG9kIiwiY29uZmlnIiwiZGF0YUFnZyIsImF2bFRpbWVQZXJpb2RzIiwiZ2V0QWdncmVnYXRpb25UaW1lUnVsZXMiLCJpIiwibGVuIiwiYXZsVGltZU11bHRpcGxpZXIiLCJsZW5ndGgiLCJwdXNoIiwicG9zc2libGVGYWN0b3JzIiwic2VsZiIsInRzT2JqZWN0IiwiaiIsImxlbjEiLCJsZW4yIiwibWF4TnVtT2ZQbG90IiwiY29tcG9zaXRpb24iLCJyZWFjdGl2ZU1vZGVsIiwibW9kZWwiLCJtdWx0aXBsaWVyc0FyciIsImN1cnJlbnRUaW1lTGVuZ3RoIiwidGltZSIsImV4cGVjdGVkVGltZSIsIm11bHRpcGxpZXIiLCJtaW5CaW5TaXplIiwiZ2xvYmFsUmVhY3RpdmVNb2RlbCIsInZhbGlkVGltZVBlcmlvZCIsInZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIiLCJhdmxBZ2dNZXRob2RzIiwiZ2V0QWxsQWdncmVnYXRpb25NZXRob2QiLCJuYW1lIiwiaW50ZXJ2YWwiLCJjdXJyZW50QWdnTWV0aG9kIiwic3VpdGFibGVJbnRlcnZhbCIsImJpblNpemUiLCJwcm9wIiwiaXNGaW5pdGUiLCJjYW5BZ2dyZWdhdGUiLCJ0aW1lUnVsZXMiLCJnZXRTdWl0YWJsZUludGVydmFsIiwieEF4aXMiLCJnZXRTY2FsZU9iaiIsImdldEludGVydmFsT2JqIiwiZ2V0Q29uZmlnIiwibWlub3IiLCJ0aW1lVW5pdCIsInN0ZXAiLCJmb3JtYWxOYW1lIiwibmlja05hbWUiLCJ2YWx1ZSIsInRleHQiLCJvYmoiLCJ0aW1lUGVyaW9kSW5kZXgiLCJ0b29sYm94Q29tcG9uZW50IiwiYXBpIiwic3RvcmUiLCJzYXZlVG8iLCJyZXF1aXJlZFBhcmFtcyIsImFjcXVpcmUiLCJpaSIsInBhcmFtIiwiYXJndW1lbnRzIiwiY2hhcnRJbnN0YW5jZSIsImFwaUluc3RhbmNlIiwiZ2V0Q29tcG9uZW50U3RvcmUiLCJnZXRDYW52YXNCeUluZGV4IiwiaW1wbCIsImdldERhdGFBZ2dyZWdhdG9yIiwidG9vbGJveCIsImdldENvbXBvbmVudCIsInRvb2xiYXJzIiwibWVhc3VyZW1lbnQiLCJjcmVhdGVUb29sYmFyIiwiZ3JvdXAiLCJ0b29sYmFyIiwidGltZU11bFNlbGVjdE1lbnUiLCJ0aW1lUGVyaW9kU2VsZWN0TWVudSIsImFnZ01ldGhvZFNlbGVjdE1lbnUiLCJyZXNldEJ1dHRvbiIsImFwcGx5QnV0dG9uIiwibGFiZWwiLCJ0b29sYm94Q29tcENvbmZpZyIsIkhvcml6b250YWxUb29sYmFyIiwiQ29tcG9uZW50R3JvdXAiLCJTeW1ib2xTdG9yZSIsImdyYXBoaWNzIiwicGFwZXIiLCJjb250YWluZXIiLCJjaGFydCIsInNtYXJ0TGFiZWwiLCJtdWx0aXBsaWVyVmFsIiwidGltZU11bFNlbGVjdE1lbnVPcHQiLCJkZXBlbmRlbmNpZXMiLCJjaGFydENvbnRhaW5lciIsImFwcGx5Iiwic2V0IiwidGltZVBlcmlvZFZhbCIsInRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsIiwiYWdnTWV0aG9kU2VsZWN0TWVudVZhbCIsImtleXMiLCJ0aW1lSW50ZXJ2YWwiLCJjYW52YXMiLCJsb2NrIiwiTnVtYmVyIiwidW5sb2NrIiwicmVzZXRBZ2dyZWdhdGlvbiIsInRpbWVQZXJpb2RPbkNoYW5nZSIsInByZXZUaW1lUGVyb2lkTXVsVmFsIiwiaW5kZXhPZlRpbWVVbml0IiwiaW5kZXhPZlRpbWVNdWwiLCJpbmRleE9mIiwidXBkYXRlTGlzdCIsInRvU3RyaW5nIiwic2V0Q29uZmlnIiwiZmlsbCIsImJvcmRlclRoaWNrbmVzcyIsIkxhYmVsIiwic3R5bGUiLCJTZWxlY3RTeW1ib2wiLCJ3aWR0aCIsImhlaWdodCIsImlubmVySFRNTCIsInN0cm9rZVdpZHRoIiwic3Ryb2tlIiwic3ltYm9sU3Ryb2tlV2lkdGgiLCJidG5UZXh0U3R5bGUiLCJmb250U2l6ZSIsImhvdmVyRmlsbCIsIlN5bWJvbCIsImxhYmVsRmlsbCIsImF0dGFjaEV2ZW50SGFuZGxlcnMiLCJjbGljayIsImFkZFN5bWJvbCIsIngiLCJ5IiwicmFkIiwidyIsImgiLCJwYWRYIiwicGFkWSIsIngxIiwieDIiLCJ5MSIsInkyIiwiZm4iLCJlZGl0IiwidGV4dE9uQmx1ciIsImJsdXIiLCJ0ZXh0T25DaGFuZ2UiLCJhZGRDb21wb25lbnQiLCJhdmFpbGFibGVXaWR0aCIsImF2YWlsYWJsZUhlaWdodCIsImxvZ2ljYWxTcGFjZSIsImxuIiwiZ2V0TG9naWNhbFNwYWNlIiwiTWF0aCIsIm1heCIsInBhZGRpbmciLCJjb250YWluZXJJbnN0YW5jZSIsInNwYWNlTWFuYWdlckluc3RhbmNlIiwiYWRkIiwicmVmIiwicHJpb3JpdHkiLCJsYXlvdXQiLCJpbmxpbmUiLCJvcmllbnRhdGlvbiIsInR5cGUiLCJob3Jpem9udGFsIiwicG9zaXRpb24iLCJ0b3AiLCJhbGlnbm1lbnQiLCJsZWZ0IiwiZGltZW5zaW9ucyIsInBhcmVudCIsImdldFBhcmVudENvbXBvbmVudEdyb3VwIiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJtZXMiLCJwYXJlbnRHcm91cCIsImN1cnJlbnRBZ2dyZWdhdGlvbk9iaiIsInRpbWVQZXJpb2RTZWxlY3RNZW51T3B0IiwiYWdnVmFsIiwiYWdnTWV0aG9kU2VsZWN0TWVudU9wdCIsInJhbmdlT25DaGFuZ2UiLCJhdHRyU3RyIiwiZ2V0VmFsaWRBZ2dyZWdhdGlvbiIsImdldEN1cnJlbnRBZ2dyZWF0aW9uIiwidG9VcHBlckNhc2UiLCJnZXRBdmFpbGFibGVsQWdncmVhZ2F0aW9uIiwidW5kZWZpbmVkIiwiZHJhdyIsIm9uUHJvcHNDaGFuZ2UiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7O0FDdENBOzs7O0FBQ0EsS0FBTUEsbUJBQW1CLG1CQUFBQyxDQUFRLENBQVIsQ0FBekI7O0FBRUEsRUFBQyxDQUFDLFVBQVVDLEdBQVYsRUFBZUMsT0FBZixFQUF3QjtBQUN4QixPQUFJLGdDQUFPQyxNQUFQLE9BQWtCLFFBQWxCLElBQThCQSxPQUFPQyxPQUF6QyxFQUFrRDtBQUNoREQsWUFBT0MsT0FBUCxHQUFpQkgsSUFBSUksUUFBSixHQUNaSCxRQUFRRCxHQUFSLENBRFksR0FDRyxVQUFVSyxHQUFWLEVBQWU7QUFDOUIsV0FBSSxDQUFDQSxJQUFJRCxRQUFULEVBQW1CO0FBQ2pCLGVBQU0sSUFBSUUsS0FBSixDQUFVLGtDQUFWLENBQU47QUFDRDtBQUNELGNBQU9MLFFBQVFJLEdBQVIsRUFBYSxJQUFiLENBQVA7QUFDRCxNQU5KO0FBT0QsSUFSRCxNQVFPO0FBQ0xMLFNBQUlPLFVBQUosR0FBaUJOLFFBQVFELEdBQVIsRUFBYSxJQUFiLENBQWpCO0FBQ0Q7QUFDRixFQVpBLEVBWUUsT0FBT1EsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBaEMsWUFaRixFQVlpRCxVQUFVQyxPQUFWLEVB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b2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDk3MDU2NWZkNjY3NDNmMDQ4YjhmIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgQWdncmVnYXRvckdldHRlciA9IHJlcXVpcmUoJy4vZmN0cy1leHQtYWdncmVnYXRvcicpO1xuXG47KGZ1bmN0aW9uIChlbnYsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBlbnYuZG9jdW1lbnRcbiAgICAgICA/IGZhY3RvcnkoZW52KSA6IGZ1bmN0aW9uICh3aW4pIHtcbiAgICAgICAgIGlmICghd2luLmRvY3VtZW50KSB7XG4gICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2luZG93IHdpdGggZG9jdW1lbnQgbm90IHByZXNlbnQnKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBmYWN0b3J5KHdpbiwgdHJ1ZSk7XG4gICAgICAgfTtcbiAgfSBlbHNlIHtcbiAgICBlbnYuQWdncmVnYXRvciA9IGZhY3RvcnkoZW52LCB0cnVlKTtcbiAgfVxufSkodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAoX3dpbmRvdywgd2luZG93RXhpc3RzKSB7XG4gIHZhciBGQyA9IF93aW5kb3cuRnVzaW9uQ2hhcnRzO1xuXG4gIEZDLnJlZ2lzdGVyKCdleHRlbnNpb24nLCBbJ3ByaXZhdGUnLCAnZGF0YS1hZ2dyZWdhdG9yJywgZnVuY3Rpb24gKCkge1xuICAgIEZDLnJlZ2lzdGVyQ29tcG9uZW50KCdleHRlbnNpb25zJywgJ2RhdGEtYWdncmVnYXRvcicsIEFnZ3JlZ2F0b3JHZXR0ZXIoe0ZDOiBGQ30pKTtcbiAgfV0pO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkZXApIHtcbiAgLyoqXG4gICAqIENsYXNzIHJlcHJlc2VudGluZyB0aGUgRGF0YSBBZ2dyZWdhdG9yLlxuICAgKi9cbiAgY2xhc3MgQWdncmVnYXRvciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgQWdncmVnYXRvci5cbiAgICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBBZ2dyZWdhdG9yLmFnZ3JlZ2F0aW9uXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IHRpbWVQZXJpb2QgLSBUaGUgdGltZSBpbnRlcnZhbCBvZiBhZ2dyZWdhdGlvbi5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gdGltZVBlcmlvZE11bHRpcGxpZXIgLSBUaGUgbXVsdGlwbGllciBvZiB0aW1lIGludGVydmFsLlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZ2dyZWdhdGlvbk1ldGhvZCAtIFRoZSBtZXRob2QgYXBwbGllZCB0byBhZ2dyZWdhdGUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICovXG4gICAgICB0aGlzLmFwcGxpZWRBZ2dyZWdhdGlvbiA9IHtcbiAgICAgICAgdGltZVBlcmlvZDogbnVsbCxcbiAgICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXI6IG51bGwsXG4gICAgICAgIGFnZ3JlZ2F0aW9uTWV0aG9kOiBudWxsXG4gICAgICB9O1xuICAgICAgdGhpcy5jb25maWcgPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSB0aW1lUGVyaW9kLCB0aW1lUGVyaW9kTXVsdGlwbGllciwgYWdncmVnYXRpb25NZXRob2QuXG4gICAgICogQHR5cGUge0FnZ3JlZ2F0b3IuYWdncmVnYXRpb259XG4gICAgICovXG4gICAgZ2V0IGFnZ3JlZ2F0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmFwcGxpZWRBZ2dyZWdhdGlvbjtcbiAgICB9XG5cbiAgICBzZXQgYWdncmVnYXRpb24gKG9iaikge1xuICAgICAgdGhpcy5hcHBsaWVkQWdncmVnYXRpb24udGltZVBlcmlvZCA9IG9iai50aW1lUGVyaW9kO1xuICAgICAgdGhpcy5hcHBsaWVkQWdncmVnYXRpb24udGltZVBlcmlvZE11bHRpcGxpZXIgPSBvYmoudGltZVBlcmlvZE11bHRpcGxpZXI7XG4gICAgICB0aGlzLmFwcGxpZWRBZ2dyZWdhdGlvbi5hZ2dyZWdhdGlvbk1ldGhvZCA9IG9iai5hZ2dyZWdhdGlvbk1ldGhvZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGF2YWlsYWJsZSBhZ2dyZWdhdGlvbiBvcHRpb25zIGluIGNvbmZpZ3VyYXRpb24gb2YgZXh0ZW5zaW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRBdmFpbGFibGVsQWdncmVhZ2F0aW9uICgpIHtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgZGF0YUFnZyA9IGNvbmZpZy5kYXRhQWdnLFxuICAgICAgICBhdmxUaW1lUGVyaW9kcyA9IGNvbmZpZy5hdmxUaW1lUGVyaW9kcyA9IGRhdGFBZ2cuZ2V0QWdncmVnYXRpb25UaW1lUnVsZXMoKSxcbiAgICAgICAgaSxcbiAgICAgICAgbGVuO1xuXG4gICAgICBjb25maWcuYXZsVGltZU11bHRpcGxpZXIgPSBbXTtcbiAgICAgIGxlbiA9IGF2bFRpbWVQZXJpb2RzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbmZpZy5hdmxUaW1lTXVsdGlwbGllci5wdXNoKGF2bFRpbWVQZXJpb2RzW2ldLnBvc3NpYmxlRmFjdG9ycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB2YWxpZCBhZ2dyZWdhdGlvbiB0aW1lIHBlcmlvZHMgYW5kIGNvcnJlc3BvbmRpbmcgbXVsdGlwbGllcnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldFZhbGlkQWdncmVnYXRpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBjb25maWcgPSBzZWxmLmNvbmZpZyxcbiAgICAgICAgdHNPYmplY3QgPSBzZWxmLnRzT2JqZWN0LFxuICAgICAgICBkYXRhQWdnID0gY29uZmlnLmRhdGFBZ2csXG4gICAgICAgIGksXG4gICAgICAgIGosXG4gICAgICAgIGxlbjEsXG4gICAgICAgIGxlbjIsXG4gICAgICAgIGF2bFRpbWVQZXJpb2RzLFxuICAgICAgICBhdmxUaW1lTXVsdGlwbGllcixcbiAgICAgICAgLy8gbWluTnVtT2ZQbG90ID0gNSxcbiAgICAgICAgbWF4TnVtT2ZQbG90ID0gY29uZmlnLmNvbXBvc2l0aW9uLnJlYWN0aXZlTW9kZWwubW9kZWxbJ21heC1wbG90LXBvaW50J10sXG4gICAgICAgIG11bHRpcGxpZXJzQXJyLFxuICAgICAgICBjdXJyZW50VGltZUxlbmd0aCxcbiAgICAgICAgdGltZVBlcmlvZCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZXhwZWN0ZWRUaW1lLFxuICAgICAgICBtdWx0aXBsaWVyLFxuICAgICAgICBtaW5CaW5TaXplO1xuICAgICAgICAvLyBtYXhCaW5TaXplO1xuXG4gICAgICBjb25maWcuY3VycmVudFRpbWVMZW5ndGggPSB0c09iamVjdC5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtdmlzaWJsZS1yYW5nZS1lbmQnXSAtXG4gICAgICAgIHRzT2JqZWN0Lmdsb2JhbFJlYWN0aXZlTW9kZWwubW9kZWxbJ3gtYXhpcy12aXNpYmxlLXJhbmdlLXN0YXJ0J107XG5cbiAgICAgIGF2bFRpbWVQZXJpb2RzID0gY29uZmlnLmF2bFRpbWVQZXJpb2RzO1xuICAgICAgYXZsVGltZU11bHRpcGxpZXIgPSBjb25maWcuYXZsVGltZU11bHRpcGxpZXI7XG4gICAgICBjdXJyZW50VGltZUxlbmd0aCA9IGNvbmZpZy5jdXJyZW50VGltZUxlbmd0aDtcblxuICAgICAgY29uZmlnLm1pbkJpblNpemUgPSBtaW5CaW5TaXplID0gY3VycmVudFRpbWVMZW5ndGggLyBtYXhOdW1PZlBsb3Q7XG4gICAgICAvLyBjb25maWcubWF4QmluU2l6ZSA9IG1heEJpblNpemUgPSBjdXJyZW50VGltZUxlbmd0aCAvIG1pbk51bU9mUGxvdDtcblxuICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZCA9IFtdO1xuICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIgPSBbXTtcbiAgICAgIGNvbmZpZy5hdmxBZ2dNZXRob2RzID0gZGF0YUFnZy5nZXRBbGxBZ2dyZWdhdGlvbk1ldGhvZCgpO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4xID0gYXZsVGltZVBlcmlvZHMubGVuZ3RoOyBpIDwgbGVuMTsgaSsrKSB7XG4gICAgICAgIHRpbWVQZXJpb2QgPSBhdmxUaW1lUGVyaW9kc1tpXS5uYW1lO1xuICAgICAgICB0aW1lID0gYXZsVGltZVBlcmlvZHNbaV0uaW50ZXJ2YWw7XG4gICAgICAgIG11bHRpcGxpZXJzQXJyID0gW107XG5cbiAgICAgICAgZm9yIChqID0gMCwgbGVuMiA9IGF2bFRpbWVNdWx0aXBsaWVyW2ldLmxlbmd0aDsgaiA8IGxlbjI7IGorKykge1xuICAgICAgICAgIG11bHRpcGxpZXIgPSBhdmxUaW1lTXVsdGlwbGllcltpXVtqXTtcbiAgICAgICAgICBleHBlY3RlZFRpbWUgPSBtdWx0aXBsaWVyICogdGltZTtcblxuICAgICAgICAgIC8vIGlmICgoZXhwZWN0ZWRUaW1lID49IG1pbkJpblNpemUpICYmIChleHBlY3RlZFRpbWUgPD0gbWF4QmluU2l6ZSkpIHtcbiAgICAgICAgICBpZiAoKGV4cGVjdGVkVGltZSA+PSBtaW5CaW5TaXplKSkge1xuICAgICAgICAgICAgbXVsdGlwbGllcnNBcnIucHVzaChhdmxUaW1lTXVsdGlwbGllcltpXVtqXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtdWx0aXBsaWVyc0Fyci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIucHVzaChtdWx0aXBsaWVyc0Fycik7XG4gICAgICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZC5wdXNoKHRpbWVQZXJpb2QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBjb25zb2xlLmxvZygnVGltZSBQZXJpb2Q6ICcsIGNvbmZpZy52YWxpZFRpbWVQZXJpb2QpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ051bWJlciBPZiBNdWx0aXBsaWVyczogJywgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ01ldGhvZHM6ICcsIGNvbmZpZy5hdmxBZ2dNZXRob2RzKTtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50QWdncmVhdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNvbmZpZyA9IHNlbGYuY29uZmlnLFxuICAgICAgICBkYXRhQWdnID0gY29uZmlnLmRhdGFBZ2csXG4gICAgICAgIGNvbXBvc2l0aW9uID0gY29uZmlnLmNvbXBvc2l0aW9uLFxuICAgICAgICBtb2RlbCA9IGNvbXBvc2l0aW9uLnJlYWN0aXZlTW9kZWwsXG4gICAgICAgIGN1cnJlbnRBZ2dNZXRob2QsXG4gICAgICAgIHN1aXRhYmxlSW50ZXJ2YWwsXG4gICAgICAgIGJpblNpemU7XG5cbiAgICAgIGJpblNpemUgPSBtb2RlbC5wcm9wKCdiaW4tc2l6ZScpIC0gMTtcblxuICAgICAgaWYgKGlzRmluaXRlKGJpblNpemUpKSB7XG4gICAgICAgIGNvbmZpZy5jYW5BZ2dyZWdhdGUgPSB0cnVlO1xuICAgICAgICBzdWl0YWJsZUludGVydmFsID0gZGF0YUFnZy50aW1lUnVsZXMuZ2V0U3VpdGFibGVJbnRlcnZhbChiaW5TaXplKTtcbiAgICAgICAgY3VycmVudEFnZ01ldGhvZCA9IG1vZGVsLnByb3AoJ2FnZ3JlZ2F0aW9uLWZuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuY2FuQWdncmVnYXRlID0gZmFsc2U7XG4gICAgICAgIHN1aXRhYmxlSW50ZXJ2YWwgPSBjb21wb3NpdGlvbi54QXhpcy5nZXRTY2FsZU9iaigpLmdldEludGVydmFsT2JqKCkuZ2V0Q29uZmlnKCdpbnRlcnZhbHMnKS5taW5vci50aW1lVW5pdDtcbiAgICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZCA9IFtzdWl0YWJsZUludGVydmFsLm5hbWVdO1xuICAgICAgICBjb25maWcudmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciA9IFtbc3VpdGFibGVJbnRlcnZhbC5zdGVwXV07XG4gICAgICAgIGNvbmZpZy5hdmxBZ2dNZXRob2RzID0ge1xuICAgICAgICAgICdpbnZhbGlkJzoge1xuICAgICAgICAgICAgZm9ybWFsTmFtZTogJ2ludmFsaWQnLFxuICAgICAgICAgICAgbmlja05hbWU6ICdpbnZhbGlkJ1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY3VycmVudEFnZ01ldGhvZCA9IGNvbmZpZy5hdmxBZ2dNZXRob2RzWydpbnZhbGlkJ107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRpbWVQZXJpb2Q6IHN1aXRhYmxlSW50ZXJ2YWwubmFtZSxcbiAgICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXI6IHN1aXRhYmxlSW50ZXJ2YWwuc3RlcCxcbiAgICAgICAgYWdncmVnYXRpb25NZXRob2Q6IHtcbiAgICAgICAgICB2YWx1ZTogY3VycmVudEFnZ01ldGhvZC5uaWNrTmFtZSxcbiAgICAgICAgICB0ZXh0OiBjdXJyZW50QWdnTWV0aG9kLmZvcm1hbE5hbWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgQWdncmVnYXRpb24gb24gdGltZSBzZXJpZXNcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IG9ialxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aW1lUGVyaW9kIC0gVGhlIHRpbWUgaW50ZXJ2YWwgb2YgYWdncmVnYXRpb24uXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVQZXJpb2RNdWx0aXBsaWVyIC0gVGhlIG11bHRpcGxpZXIgb2YgdGltZSBpbnRlcnZhbC5cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gYWdncmVnYXRpb25NZXRob2QgLSBUaGUgbWV0aG9kIGFwcGxpZWQgdG8gYWdncmVnYXRlLlxuICAgICAqL1xuICAgIHNldEFnZ3JlZ2F0aW9uIChvYmopIHtcbiAgICAgIHZhciBhdmxBZ2dNZXRob2RzLFxuICAgICAgICB2YWxpZFRpbWVQZXJpb2QsXG4gICAgICAgIHRpbWVQZXJpb2RJbmRleCxcbiAgICAgICAgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllcixcbiAgICAgICAgY29uZmlnID0gdGhpcy5jb25maWc7XG5cbiAgICAgIGF2bEFnZ01ldGhvZHMgPSBjb25maWcuYXZsQWdnTWV0aG9kcztcbiAgICAgIHZhbGlkVGltZVBlcmlvZCA9IGNvbmZpZy52YWxpZFRpbWVQZXJpb2Q7XG4gICAgICB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXI7XG5cbiAgICAgIC8vIGlmIChhdmxBZ2dNZXRob2RzLmluY2x1ZGVzKG9iai5hZ2dyZWdhdGlvbk1ldGhvZCkgJiYgdmFsaWRUaW1lUGVyaW9kLmluY2x1ZGVzKG9iai50aW1lUGVyaW9kKSkge1xuICAgICAgLy8gICB0aW1lUGVyaW9kSW5kZXggPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZihvYmoudGltZVBlcmlvZCk7XG4gICAgICAvLyAgIGlmICh2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW3RpbWVQZXJpb2RJbmRleF0uaW5jbHVkZXMoTnVtYmVyKG9iai50aW1lUGVyaW9kTXVsdGlwbGllcikpKSB7XG4gICAgICAvLyAgICAgdGhpcy5hZ2dyZWdhdGlvbiA9IG9iajtcbiAgICAgIC8vICAgICBjb25zb2xlLmxvZyh0aGlzLmFnZ3JlZ2F0aW9uKTtcbiAgICAgIC8vICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIC8vICAgfSBlbHNlIHtcbiAgICAgIC8vICAgICBjb25zb2xlLmxvZyh0aGlzLmFnZ3JlZ2F0aW9uKTtcbiAgICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvLyAgIGNvbnNvbGUubG9nKHRoaXMuYWdncmVnYXRpb24pO1xuICAgICAgLy8gICByZXR1cm4gZmFsc2U7XG4gICAgICAvLyB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXQgQXBwbGllZCBBZ2dyZWdhdGlvblxuICAgICAqL1xuICAgIHJlc2V0QWdncmVnYXRpb24gKCkge1xuXG4gICAgfVxuXG4gICAgaW5pdCAocmVxdWlyZSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBjb25maWcgPSBzZWxmLmNvbmZpZyxcbiAgICAgICAgdG9vbGJveENvbXBvbmVudCA9IGNvbmZpZy50b29sYm94Q29tcG9uZW50ID0ge30sXG4gICAgICAgIGFwaSxcbiAgICAgICAgc3RvcmUsXG4gICAgICAgIGNvbXBvc2l0aW9uLFxuICAgICAgICBzYXZlVG8gPSAndHNPYmplY3QnLFxuICAgICAgICByZXF1aXJlZFBhcmFtcyA9IFtcbiAgICAgICAgICAnZ3JhcGhpY3MnLFxuICAgICAgICAgICdnbG9iYWxSZWFjdGl2ZU1vZGVsJyxcbiAgICAgICAgICAnY2hhcnQnLFxuICAgICAgICAgICdzcGFjZU1hbmFnZXJJbnN0YW5jZScsXG4gICAgICAgICAgJ2NoYXJ0SW5zdGFuY2UnLFxuICAgICAgICAgICdzbWFydExhYmVsJyxcbiAgICAgICAgICBmdW5jdGlvbiBhY3F1aXJlICgpIHtcbiAgICAgICAgICAgIGxldCBpID0gMCxcbiAgICAgICAgICAgICAgaWkgPSByZXF1aXJlZFBhcmFtcy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgICBwYXJhbSA9ICcnO1xuICAgICAgICAgICAgc2VsZltzYXZlVG9dID0gc2VsZltzYXZlVG9dIHx8IHt9O1xuICAgICAgICAgICAgc2VsZi5yZXF1aXJlZFBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgcGFyYW0gPSByZXF1aXJlZFBhcmFtc1tpXTtcbiAgICAgICAgICAgICAgc2VsZltzYXZlVG9dW3BhcmFtXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG9uSW5pdChzZWxmW3NhdmVUb10pO1xuICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICAgIHJlcXVpcmUocmVxdWlyZWRQYXJhbXMpO1xuXG4gICAgICBhcGkgPSBzZWxmLnRzT2JqZWN0LmNoYXJ0SW5zdGFuY2UuYXBpSW5zdGFuY2U7XG4gICAgICBzdG9yZSA9IGFwaS5nZXRDb21wb25lbnRTdG9yZSgpO1xuICAgICAgY29uZmlnLmNvbXBvc2l0aW9uID0gY29tcG9zaXRpb24gPSBzdG9yZS5nZXRDYW52YXNCeUluZGV4KDApLmNvbXBvc2l0aW9uO1xuICAgICAgY29uZmlnLmRhdGFBZ2cgPSBjb21wb3NpdGlvbi5pbXBsLmdldERhdGFBZ2dyZWdhdG9yKCk7XG5cbiAgICAgIHRvb2xib3hDb21wb25lbnQudG9vbGJveCA9IGRlcC5GQy5nZXRDb21wb25lbnQoJ2FwaScsICd0b29sYm94Jyk7XG4gICAgICB0b29sYm94Q29tcG9uZW50LmNvbmZpZyA9IHt9O1xuXG4gICAgICBzZWxmLnRvb2xiYXJzID0gW107XG5cbiAgICAgIHNlbGYubWVhc3VyZW1lbnQgPSB7fTtcblxuICAgICAgc2VsZi50b29sYmFycy5wdXNoKHNlbGYuY3JlYXRlVG9vbGJhcigpKTtcblxuICAgICAgd2luZG93LkFnZ3JlZ2F0b3IgPSBzZWxmO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgY3JlYXRlVG9vbGJhciAoKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGdyb3VwLFxuICAgICAgICB0b29sYmFyLFxuICAgICAgICB0aW1lTXVsU2VsZWN0TWVudSxcbiAgICAgICAgdGltZVBlcmlvZFNlbGVjdE1lbnUsXG4gICAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnUsXG4gICAgICAgIHJlc2V0QnV0dG9uLFxuICAgICAgICBhcHBseUJ1dHRvbixcbiAgICAgICAgY29uZmlnID0gc2VsZi5jb25maWcsXG4gICAgICAgIHRzT2JqZWN0ID0gc2VsZi50c09iamVjdCxcbiAgICAgICAgbGFiZWwsXG5cbiAgICAgICAgdG9vbGJveENvbXBvbmVudCA9IGNvbmZpZy50b29sYm94Q29tcG9uZW50LFxuICAgICAgICB0b29sYm94ID0gdG9vbGJveENvbXBvbmVudC50b29sYm94LFxuICAgICAgICB0b29sYm94Q29tcENvbmZpZyA9IHRvb2xib3hDb21wb25lbnQuY29uZmlnLFxuICAgICAgICBIb3Jpem9udGFsVG9vbGJhciA9IHRvb2xib3guSG9yaXpvbnRhbFRvb2xiYXIsXG4gICAgICAgIENvbXBvbmVudEdyb3VwID0gdG9vbGJveC5Db21wb25lbnRHcm91cCxcbiAgICAgICAgU3ltYm9sU3RvcmUgPSB0b29sYm94LlN5bWJvbFN0b3JlLFxuXG4gICAgICAgIGdyYXBoaWNzID0gdHNPYmplY3QuZ3JhcGhpY3MsXG4gICAgICAgIHBhcGVyID0gZ3JhcGhpY3MucGFwZXIsXG4gICAgICAgIGNvbnRhaW5lciA9IGdyYXBoaWNzLmNvbnRhaW5lcixcbiAgICAgICAgY2hhcnQgPSB0c09iamVjdC5jaGFydCxcbiAgICAgICAgc21hcnRMYWJlbCA9IHRzT2JqZWN0LnNtYXJ0TGFiZWwsXG5cbiAgICAgICAgbXVsdGlwbGllclZhbCxcbiAgICAgICAgdGltZU11bFNlbGVjdE1lbnVPcHQgPSAnJyxcblxuICAgICAgICBkZXBlbmRlbmNpZXMgPSB7XG4gICAgICAgICAgcGFwZXI6IHBhcGVyLFxuICAgICAgICAgIGNoYXJ0OiBjaGFydCxcbiAgICAgICAgICBzbWFydExhYmVsOiBzbWFydExhYmVsLFxuICAgICAgICAgIGNoYXJ0Q29udGFpbmVyOiBjb250YWluZXJcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHkgPSBmdW5jdGlvbiAoc2V0KSB7XG4gICAgICAgICAgdmFyIG1vZGVsID0gY29uZmlnLmNvbXBvc2l0aW9uLnJlYWN0aXZlTW9kZWwsXG4gICAgICAgICAgICB0aW1lUGVyaW9kVmFsID0gdGltZVBlcmlvZFNlbGVjdE1lbnUudmFsdWUoKSxcbiAgICAgICAgICAgIHRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsID0gdGltZU11bFNlbGVjdE1lbnUudmFsdWUoKSxcbiAgICAgICAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnVWYWwgPSBhZ2dNZXRob2RTZWxlY3RNZW51LnZhbHVlKCksXG4gICAgICAgICAgICBrZXlzLFxuICAgICAgICAgICAgdGltZUludGVydmFsLFxuICAgICAgICAgICAgY2FudmFzID0gY29uZmlnLmNvbXBvc2l0aW9uLmltcGw7XG5cbiAgICAgICAgICBmb3IgKGtleXMgb2YgY29uZmlnLmF2bFRpbWVQZXJpb2RzKSB7XG4gICAgICAgICAgICBpZiAoa2V5cy5uYW1lID09PSB0aW1lUGVyaW9kVmFsKSB7XG4gICAgICAgICAgICAgIHRpbWVJbnRlcnZhbCA9IGtleXMuaW50ZXJ2YWw7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZXQgJiYgaXNGaW5pdGUobW9kZWwucHJvcCgnYmluLXNpemUnKSkpIHtcbiAgICAgICAgICAgIG1vZGVsXG4gICAgICAgICAgICAgIC5sb2NrKClcbiAgICAgICAgICAgICAgLnByb3AoJ2Jpbi1zaXplLWV4dCcsICh0aW1lSW50ZXJ2YWwgKiBOdW1iZXIodGltZVBlcmlvZE11bHRpcGxpZXJWYWwpKSlcbiAgICAgICAgICAgICAgLnByb3AoJ2FnZ3JlZ2F0aW9uLWZuLWV4dCcsIGNvbmZpZy5hdmxBZ2dNZXRob2RzW2FnZ01ldGhvZFNlbGVjdE1lbnVWYWxdKVxuICAgICAgICAgICAgICAudW5sb2NrKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbnZhcy5yZXNldEFnZ3JlZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGFwcGx5QnV0dG9uLnVwZGF0ZVZpc3VhbCgnZGlzYWJsZScpO1xuICAgICAgICAgIC8vIGFwcGx5QnV0dG9uLnVwZGF0ZVZpc3VhbCgnZW5hYmxlJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGltZVBlcmlvZE9uQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciB0aW1lUGVyaW9kVmFsID0gdGltZVBlcmlvZFNlbGVjdE1lbnUudmFsdWUoKSxcbiAgICAgICAgICAgIHRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsID0gdGltZU11bFNlbGVjdE1lbnUudmFsdWUoKSxcbiAgICAgICAgICAgIHByZXZUaW1lUGVyb2lkTXVsVmFsID0gdGltZVBlcmlvZE11bHRpcGxpZXJWYWwsXG4gICAgICAgICAgICB2YWxpZFRpbWVQZXJpb2QgPSBjb25maWcudmFsaWRUaW1lUGVyaW9kLFxuICAgICAgICAgICAgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciA9IGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLFxuICAgICAgICAgICAgaW5kZXhPZlRpbWVVbml0LFxuICAgICAgICAgICAgaW5kZXhPZlRpbWVNdWw7XG5cbiAgICAgICAgICBpbmRleE9mVGltZVVuaXQgPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZih0aW1lUGVyaW9kVmFsKTtcbiAgICAgICAgICBpbmRleE9mVGltZU11bCA9IHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XS5pbmRleE9mKE51bWJlcih0aW1lUGVyaW9kTXVsdGlwbGllclZhbCkpO1xuXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coaW5kZXhPZlRpbWVVbml0LCBpbmRleE9mVGltZU11bCk7XG4gICAgICAgICAgdGltZU11bFNlbGVjdE1lbnVPcHQgPSAnJztcbiAgICAgICAgICBmb3IgKG11bHRpcGxpZXJWYWwgb2YgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllcltpbmRleE9mVGltZVVuaXRdKSB7XG4gICAgICAgICAgICB0aW1lTXVsU2VsZWN0TWVudU9wdCArPSAnPG9wdGlvbiB2YWx1ZT1cIicgKyBtdWx0aXBsaWVyVmFsICsgJ1wiPicgKyBtdWx0aXBsaWVyVmFsICsgJzwvb3B0aW9uPic7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZU11bFNlbGVjdE1lbnUudXBkYXRlTGlzdCh0aW1lTXVsU2VsZWN0TWVudU9wdCk7XG5cbiAgICAgICAgICBpZiAoaW5kZXhPZlRpbWVNdWwgPCAwKSB7XG4gICAgICAgICAgICB0aW1lTXVsU2VsZWN0TWVudS52YWx1ZSh2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW2luZGV4T2ZUaW1lVW5pdF1bMF0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVNdWxTZWxlY3RNZW51LnZhbHVlKHByZXZUaW1lUGVyb2lkTXVsVmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgIGdyb3VwID0gbmV3IENvbXBvbmVudEdyb3VwKGRlcGVuZGVuY2llcyk7XG4gICAgICB0b29sYmFyID0gbmV3IEhvcml6b250YWxUb29sYmFyKGRlcGVuZGVuY2llcyk7XG5cbiAgICAgIGdyb3VwLnNldENvbmZpZyh7XG4gICAgICAgIGZpbGw6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyVGhpY2tuZXNzOiAwXG4gICAgICB9KTtcblxuICAgICAgdG9vbGJhci5zZXRDb25maWcoe1xuICAgICAgICBmaWxsOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlclRoaWNrbmVzczogMFxuICAgICAgfSk7XG5cbiAgICAgIGxhYmVsID0gbmV3IHRvb2xib3guTGFiZWwoJ0FnZ3JlZ2F0ZSBEYXRhOicsIGRlcGVuZGVuY2llcywge1xuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICdmb250LXNpemUnOiAnMTQnLFxuICAgICAgICAgICAgJ2ZpbGwnOiAnIzY5Njk2OSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0b29sYm94Q29tcENvbmZpZy50aW1lUGVyaW9kU2VsZWN0TWVudSA9IHRpbWVQZXJpb2RTZWxlY3RNZW51ID0gbmV3IHRvb2xib3guU2VsZWN0U3ltYm9sKHtcbiAgICAgICAgd2lkdGg6IDkwLFxuICAgICAgICBoZWlnaHQ6IDIwXG4gICAgICB9LCBkZXBlbmRlbmNpZXMsIHtcbiAgICAgICAgaW5uZXJIVE1MOiAnPG9wdGlvbiB2YWx1ZT1cInRpbWVcIj5UaW1lIFBlcmlvZDwvb3B0aW9uPidcbiAgICAgIH0sIHtcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDEsXG4gICAgICAgIHN0cm9rZTogJ3JnYmEoMTAyLDEwMiwxMDIsMC41KScsXG4gICAgICAgIHN5bWJvbFN0cm9rZVdpZHRoOiAwLFxuICAgICAgICBidG5UZXh0U3R5bGU6IHtcbiAgICAgICAgICBmb250U2l6ZTogMTFcbiAgICAgICAgfSxcbiAgICAgICAgaG92ZXJGaWxsOiAnIzFlMWYxZidcbiAgICAgIH0pO1xuXG4gICAgICB0b29sYm94Q29tcENvbmZpZy50aW1lTXVsU2VsZWN0TWVudSA9IHRpbWVNdWxTZWxlY3RNZW51ID0gbmV3IHRvb2xib3guU2VsZWN0U3ltYm9sKHtcbiAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICBoZWlnaHQ6IDIwXG4gICAgICB9LCBkZXBlbmRlbmNpZXMsIHtcbiAgICAgICAgaW5uZXJIVE1MOiAnPG9wdGlvbiB2YWx1ZT1cIm51bWJlclwiPk11bHRpcGxpZXI8L29wdGlvbj4nXG4gICAgICB9LCB7XG4gICAgICAgIHN0cm9rZVdpZHRoOiAxLFxuICAgICAgICBzdHJva2U6ICdyZ2JhKDEwMiwxMDIsMTAyLDAuNSknLFxuICAgICAgICBzeW1ib2xTdHJva2VXaWR0aDogMCxcbiAgICAgICAgYnRuVGV4dFN0eWxlOiB7XG4gICAgICAgICAgZm9udFNpemU6IDExXG4gICAgICAgIH0sXG4gICAgICAgIGhvdmVyRmlsbDogJyMxZTFmMWYnXG4gICAgICB9KTtcblxuICAgICAgdG9vbGJveENvbXBDb25maWcuYWdnTWV0aG9kU2VsZWN0TWVudSA9IGFnZ01ldGhvZFNlbGVjdE1lbnUgPSBuZXcgdG9vbGJveC5TZWxlY3RTeW1ib2woe1xuICAgICAgICB3aWR0aDogOTAsXG4gICAgICAgIGhlaWdodDogMjBcbiAgICAgIH0sIGRlcGVuZGVuY2llcywge1xuICAgICAgICBpbm5lckhUTUw6ICc8b3B0aW9uIHZhbHVlPVwiRm9ybXVsYVwiPk1ldGhvZDwvb3B0aW9uPidcbiAgICAgIH0sIHtcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDEsXG4gICAgICAgIHN0cm9rZTogJ3JnYmEoMTAyLDEwMiwxMDIsMC41KScsXG4gICAgICAgIHN5bWJvbFN0cm9rZVdpZHRoOiAwLFxuICAgICAgICBidG5UZXh0U3R5bGU6IHtcbiAgICAgICAgICBmb250U2l6ZTogMTFcbiAgICAgICAgfSxcbiAgICAgICAgaG92ZXJGaWxsOiAnIzFlMWYxZidcbiAgICAgIH0pO1xuXG4gICAgICB0b29sYm94Q29tcENvbmZpZy5hcHBseUJ1dHRvbiA9IGFwcGx5QnV0dG9uID0gbmV3IHRvb2xib3guU3ltYm9sKCdBUFBMWScsIHRydWUsIGRlcGVuZGVuY2llcywge1xuICAgICAgICBmaWxsOiAnIzU1NScsXG4gICAgICAgIGxhYmVsRmlsbDogJyNmZmYnLFxuICAgICAgICBob3ZlckZpbGw6ICcjNTU1JyxcbiAgICAgICAgd2lkdGg6IDMwLFxuICAgICAgICBoZWlnaHQ6IDIwLFxuICAgICAgICBidG5UZXh0U3R5bGU6IHtcbiAgICAgICAgICBmb250U2l6ZTogMTFcbiAgICAgICAgfVxuICAgICAgfSkuYXR0YWNoRXZlbnRIYW5kbGVycyh7XG4gICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYXBwbHkoMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdG9vbGJveENvbXBDb25maWcucmVzZXRCdXR0b24gPSByZXNldEJ1dHRvbiA9IG5ldyB0b29sYm94LlN5bWJvbCgnUkVTRVQnLCB0cnVlLCBkZXBlbmRlbmNpZXMsIHtcbiAgICAgICAgZmlsbDogJyM4OThiOGInLFxuICAgICAgICBsYWJlbEZpbGw6ICcjZmZmJyxcbiAgICAgICAgaG92ZXJGaWxsOiAnIzg5OGI4YicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgICAgaGVpZ2h0OiAyMCxcbiAgICAgICAgYnRuVGV4dFN0eWxlOiB7XG4gICAgICAgICAgZm9udFNpemU6IDExXG4gICAgICAgIH1cbiAgICAgIH0pLmF0dGFjaEV2ZW50SGFuZGxlcnMoe1xuICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFwcGx5KDApO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZ3JvdXAuYWRkU3ltYm9sKGxhYmVsKTtcbiAgICAgIGdyb3VwLmFkZFN5bWJvbCh0aW1lTXVsU2VsZWN0TWVudSk7XG4gICAgICBncm91cC5hZGRTeW1ib2wodGltZVBlcmlvZFNlbGVjdE1lbnUpO1xuICAgICAgZ3JvdXAuYWRkU3ltYm9sKGFnZ01ldGhvZFNlbGVjdE1lbnUpO1xuICAgICAgZ3JvdXAuYWRkU3ltYm9sKGFwcGx5QnV0dG9uKTtcbiAgICAgIGdyb3VwLmFkZFN5bWJvbChyZXNldEJ1dHRvbik7XG5cbiAgICAgIFN5bWJvbFN0b3JlLnJlZ2lzdGVyKCd0ZXh0Qm94SWNvbicsIGZ1bmN0aW9uICh4LCB5LCByYWQsIHcsIGgsIHBhZFgsIHBhZFkpIHtcbiAgICAgICAgdmFyIHgxID0geCAtIHcgLyAyICsgcGFkWCAvIDIsXG4gICAgICAgICAgeDIgPSB4ICsgdyAvIDIgLSBwYWRYIC8gMixcbiAgICAgICAgICB5MSA9IHkgLSBoIC8gMiArIHBhZFkgLyAyLFxuICAgICAgICAgIHkyID0geSArIGggLyAyIC0gcGFkWSAvIDI7XG5cbiAgICAgICAgcmV0dXJuIFsnTScsIHgxLCB5MSwgJ0wnLCB4MiwgeTEsICdMJywgeDIsIHkyLCAnTCcsIHgxLCB5MiwgJ1onXTtcbiAgICAgIH0pO1xuXG4gICAgICB0aW1lTXVsU2VsZWN0TWVudS5hdHRhY2hFdmVudEhhbmRsZXJzKHtcbiAgICAgICAgY2xpY2s6IHtcbiAgICAgICAgICBmbjogdGltZU11bFNlbGVjdE1lbnUuZWRpdFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0T25CbHVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGltZU11bFNlbGVjdE1lbnUuYmx1cigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRpbWVQZXJpb2RTZWxlY3RNZW51LmF0dGFjaEV2ZW50SGFuZGxlcnMoe1xuICAgICAgICBjbGljazoge1xuICAgICAgICAgIGZuOiB0aW1lUGVyaW9kU2VsZWN0TWVudS5lZGl0XG4gICAgICAgIH0sXG4gICAgICAgIHRleHRPbkJsdXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aW1lUGVyaW9kU2VsZWN0TWVudS5ibHVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRleHRPbkNoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRpbWVQZXJpb2RTZWxlY3RNZW51LmJsdXIoKTtcbiAgICAgICAgICB0aW1lUGVyaW9kT25DaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBhZ2dNZXRob2RTZWxlY3RNZW51LmF0dGFjaEV2ZW50SGFuZGxlcnMoe1xuICAgICAgICBjbGljazoge1xuICAgICAgICAgIGZuOiBhZ2dNZXRob2RTZWxlY3RNZW51LmVkaXRcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dE9uQmx1cjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnUuYmx1cigpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdG9vbGJhci5hZGRDb21wb25lbnQoZ3JvdXApO1xuXG4gICAgICByZXR1cm4gdG9vbGJhcjtcbiAgICB9XG5cbiAgICBnZXRMb2dpY2FsU3BhY2UgKGF2YWlsYWJsZVdpZHRoLCBhdmFpbGFibGVIZWlnaHQpIHtcbiAgICAgIHZhciBsb2dpY2FsU3BhY2UsXG4gICAgICAgIHdpZHRoID0gMCxcbiAgICAgICAgaGVpZ2h0ID0gMCxcbiAgICAgICAgaSxcbiAgICAgICAgbG47XG5cbiAgICAgIGZvciAoaSA9IDAsIGxuID0gdGhpcy50b29sYmFycy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICAgIGxvZ2ljYWxTcGFjZSA9IHRoaXMudG9vbGJhcnNbaV0uZ2V0TG9naWNhbFNwYWNlKCk7XG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgobG9naWNhbFNwYWNlLndpZHRoLCB3aWR0aCk7XG4gICAgICAgIGhlaWdodCArPSBsb2dpY2FsU3BhY2UuaGVpZ2h0O1xuICAgICAgICB0aGlzLnRvb2xiYXJzW2ldLndpZHRoID0gbG9naWNhbFNwYWNlLndpZHRoO1xuICAgICAgICB0aGlzLnRvb2xiYXJzW2ldLmhlaWdodCA9IGxvZ2ljYWxTcGFjZS5oZWlnaHQ7XG4gICAgICB9XG4gICAgICBoZWlnaHQgKz0gdGhpcy5wYWRkaW5nO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoID4gYXZhaWxhYmxlV2lkdGggPyAwIDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0ID4gYXZhaWxhYmxlSGVpZ2h0ID8gMCA6IGhlaWdodFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBwbGFjZUluQ2FudmFzIChjb250YWluZXJJbnN0YW5jZSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICB0c09iamVjdCA9IHNlbGYudHNPYmplY3Q7XG5cbiAgICAgIHNlbGYucGFkZGluZyA9IDU7XG4gICAgICB0c09iamVjdC5zcGFjZU1hbmFnZXJJbnN0YW5jZS5hZGQoW3tcbiAgICAgICAgbmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAnRGF0YUFnZ3JlZ2F0b3InO1xuICAgICAgICB9LFxuICAgICAgICByZWY6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gb2JqWycwJ107XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGY6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfSxcbiAgICAgICAgcHJpb3JpdHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfSxcbiAgICAgICAgbGF5b3V0OiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIG9iai5pbmxpbmU7XG4gICAgICAgIH0sXG4gICAgICAgIG9yaWVudGF0aW9uOiBbe1xuICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmouaG9yaXpvbnRhbDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvc2l0aW9uOiBbe1xuICAgICAgICAgICAgdHlwZTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICByZXR1cm4gb2JqLnRvcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGlnbm1lbnQ6IFt7XG4gICAgICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLmxlZnQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRpbWVuc2lvbnM6IFtmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50Q29tcG9uZW50R3JvdXAoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5nZXRMb2dpY2FsU3BhY2UocGFyZW50LmdldFdpZHRoKCksIHBhcmVudC5nZXRIZWlnaHQoKSk7XG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH1dXG4gICAgICAgIH1dXG4gICAgICB9XSk7XG4gICAgfVxuXG4gICAgc2V0RHJhd2luZ0NvbmZpZ3VyYXRpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQsIGdyb3VwKSB7XG4gICAgICB2YXIgbWVzID0gdGhpcy5tZWFzdXJlbWVudDtcbiAgICAgIG1lcy54ID0geDtcbiAgICAgIG1lcy55ID0geTtcbiAgICAgIG1lcy53aWR0aCA9IHdpZHRoO1xuICAgICAgbWVzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgdGhpcy5wYXJlbnRHcm91cCA9IGdyb3VwO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkcmF3ICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBncm91cCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBjb25maWcgPSBzZWxmLmNvbmZpZyxcbiAgICAgICAgdG9vbGJveENvbXBDb25maWcgPSBjb25maWcudG9vbGJveENvbXBvbmVudC5jb25maWcsXG4gICAgICAgIHRpbWVQZXJpb2RTZWxlY3RNZW51ID0gdG9vbGJveENvbXBDb25maWcudGltZVBlcmlvZFNlbGVjdE1lbnUsXG4gICAgICAgIHRpbWVNdWxTZWxlY3RNZW51ID0gdG9vbGJveENvbXBDb25maWcudGltZU11bFNlbGVjdE1lbnUsXG4gICAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnUgPSB0b29sYm94Q29tcENvbmZpZy5hZ2dNZXRob2RTZWxlY3RNZW51LFxuICAgICAgICBjdXJyZW50QWdncmVnYXRpb25PYmosXG4gICAgICAgIG1lYXN1cmVtZW50ID0gc2VsZi5tZWFzdXJlbWVudCxcbiAgICAgICAgdG9vbGJhcnMgPSBzZWxmLnRvb2xiYXJzLFxuICAgICAgICBsbixcbiAgICAgICAgaSxcbiAgICAgICAgdG9vbGJhcixcbiAgICAgICAgbW9kZWwgPSBjb25maWcuY29tcG9zaXRpb24ucmVhY3RpdmVNb2RlbCxcblxuICAgICAgICB0aW1lUGVyaW9kVmFsLFxuICAgICAgICB0aW1lUGVyaW9kU2VsZWN0TWVudU9wdCxcbiAgICAgICAgdmFsaWRUaW1lUGVyaW9kLFxuICAgICAgICBpbmRleE9mVGltZVVuaXQsXG5cbiAgICAgICAgbXVsdGlwbGllclZhbCxcbiAgICAgICAgdGltZU11bFNlbGVjdE1lbnVPcHQsXG4gICAgICAgIHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIsXG5cbiAgICAgICAgYWdnVmFsLFxuICAgICAgICBhZ2dNZXRob2RTZWxlY3RNZW51T3B0LFxuICAgICAgICBhdmxBZ2dNZXRob2RzLFxuICAgICAgICByYW5nZU9uQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBhdHRyU3RyID0gJyc7XG5cbiAgICAgICAgICBzZWxmLmdldFZhbGlkQWdncmVnYXRpb24oKTtcbiAgICAgICAgICBjdXJyZW50QWdncmVnYXRpb25PYmogPSBzZWxmLmdldEN1cnJlbnRBZ2dyZWF0aW9uKCk7XG5cbiAgICAgICAgICB0aW1lUGVyaW9kU2VsZWN0TWVudU9wdCA9ICcnO1xuICAgICAgICAgIHRpbWVNdWxTZWxlY3RNZW51T3B0ID0gJyc7XG4gICAgICAgICAgYWdnTWV0aG9kU2VsZWN0TWVudU9wdCA9ICcnO1xuXG4gICAgICAgICAgdmFsaWRUaW1lUGVyaW9kID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZDtcbiAgICAgICAgICB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXI7XG4gICAgICAgICAgYXZsQWdnTWV0aG9kcyA9IGNvbmZpZy5hdmxBZ2dNZXRob2RzO1xuXG4gICAgICAgICAgaWYgKCFjb25maWcuY2FuQWdncmVnYXRlKSB7XG4gICAgICAgICAgICBhdHRyU3RyID0gJ2Rpc2FibGVkIGhpZGRlbic7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yICh0aW1lUGVyaW9kVmFsIG9mIHZhbGlkVGltZVBlcmlvZCkge1xuICAgICAgICAgICAgdGltZVBlcmlvZFNlbGVjdE1lbnVPcHQgKz0gJzxvcHRpb24gJyArIGF0dHJTdHIgKyAnIHZhbHVlPVwiJyArIHRpbWVQZXJpb2RWYWwgKyAnXCI+JyArXG4gICAgICAgICAgICB0aW1lUGVyaW9kVmFsLnRvVXBwZXJDYXNlKCkgKyAnPC9vcHRpb24+JztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lUGVyaW9kU2VsZWN0TWVudS51cGRhdGVMaXN0KHRpbWVQZXJpb2RTZWxlY3RNZW51T3B0KTtcbiAgICAgICAgICB0aW1lUGVyaW9kU2VsZWN0TWVudS52YWx1ZShjdXJyZW50QWdncmVnYXRpb25PYmoudGltZVBlcmlvZCk7XG5cbiAgICAgICAgICBpbmRleE9mVGltZVVuaXQgPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZihjdXJyZW50QWdncmVnYXRpb25PYmoudGltZVBlcmlvZCk7XG5cbiAgICAgICAgICBpZiAoaW5kZXhPZlRpbWVVbml0ID49IDApIHtcbiAgICAgICAgICAgIGZvciAobXVsdGlwbGllclZhbCBvZiB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW2luZGV4T2ZUaW1lVW5pdF0pIHtcbiAgICAgICAgICAgICAgdGltZU11bFNlbGVjdE1lbnVPcHQgKz0gJzxvcHRpb24gJyArIGF0dHJTdHIgKyAnIHZhbHVlPVwiJyArIG11bHRpcGxpZXJWYWwgKyAnXCI+JyArXG4gICAgICAgICAgICAgIG11bHRpcGxpZXJWYWwudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpICsgJzwvb3B0aW9uPic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZU11bFNlbGVjdE1lbnUudXBkYXRlTGlzdCh0aW1lTXVsU2VsZWN0TWVudU9wdCk7XG4gICAgICAgICAgdGltZU11bFNlbGVjdE1lbnUudmFsdWUoY3VycmVudEFnZ3JlZ2F0aW9uT2JqLnRpbWVQZXJpb2RNdWx0aXBsaWVyLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgICAgZm9yIChhZ2dWYWwgaW4gYXZsQWdnTWV0aG9kcykge1xuICAgICAgICAgICAgYWdnTWV0aG9kU2VsZWN0TWVudU9wdCArPSAnPG9wdGlvbiAnICsgYXR0clN0ciArICcgdmFsdWU9XCInICtcbiAgICAgICAgICAgICAgYXZsQWdnTWV0aG9kc1thZ2dWYWxdLm5pY2tOYW1lICsgJ1wiPicgKyBhdmxBZ2dNZXRob2RzW2FnZ1ZhbF0uZm9ybWFsTmFtZS50b1VwcGVyQ2FzZSgpICsgJzwvb3B0aW9uPic7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWdnTWV0aG9kU2VsZWN0TWVudS51cGRhdGVMaXN0KGFnZ01ldGhvZFNlbGVjdE1lbnVPcHQpO1xuICAgICAgICAgIGFnZ01ldGhvZFNlbGVjdE1lbnUudmFsdWUoY3VycmVudEFnZ3JlZ2F0aW9uT2JqLmFnZ3JlZ2F0aW9uTWV0aG9kLnZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgc2VsZi5nZXRBdmFpbGFibGVsQWdncmVhZ2F0aW9uKCk7XG5cbiAgICAgIHggPSB4ID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC54IDogeDtcbiAgICAgIHkgPSB5ID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC55IDogeTtcbiAgICAgIHdpZHRoID0gd2lkdGggPT09IHVuZGVmaW5lZCA/IG1lYXN1cmVtZW50LndpZHRoIDogd2lkdGg7XG4gICAgICBoZWlnaHQgPSBoZWlnaHQgPT09IHVuZGVmaW5lZCA/IG1lYXN1cmVtZW50LmhlaWdodCA6IGhlaWdodDtcbiAgICAgIGdyb3VwID0gZ3JvdXAgPT09IHVuZGVmaW5lZCA/IHNlbGYucGFyZW50R3JvdXAgOiBncm91cDtcbiAgICAgIGlmICh3aWR0aCAmJiBoZWlnaHQpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbG4gPSB0b29sYmFycy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICAgICAgdG9vbGJhciA9IHRvb2xiYXJzW2ldO1xuICAgICAgICAgIHRvb2xiYXIuZHJhdyh4LCB5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmFuZ2VPbkNoYW5nZSgpO1xuXG4gICAgICBtb2RlbC5vblByb3BzQ2hhbmdlKFsnYmluLXNpemUnLCAnYWdncmVnYXRpb24tZm4nXSwgcmFuZ2VPbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgZGlzcG9zZSAoKSB7XG4gICAgICAvLyBkaXNwb3NlIGV4dGVuc2lvblxuICAgIH1cbiAgfVxuICByZXR1cm4gQWdncmVnYXRvcjtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZmN0cy1leHQtYWdncmVnYXRvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=