!function(e){function i(o){if(t[o])return t[o].exports;var n=t[o]={exports:{},id:o,loaded:!1};return e[o].call(n.exports,n,n.exports,i),n.loaded=!0,n.exports}var t={};return i.m=e,i.c=t,i.p="",i(0)}([function(e,i,t){"use strict";var o=t(1);!function(e){e(FusionCharts)}(function(e){e.register("extension",["data-aggregator",function(e){var i=this,t=i.extAPI;console.log(e),window.Aggregator=new o,t(window.Aggregator)}])})},function(e,i){"use strict";function t(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,i){for(var t=0;t<i.length;t++){var o=i[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(i,t,o){return t&&e(i.prototype,t),o&&e(i,o),i}}(),n=function(){function e(){t(this,e),this.appliedAggregation={timePeriod:null,timePeriodMultiplier:1,aggregationMethod:null},this.config={}}return o(e,[{key:"getAvailablelAggreagation",value:function(){var e,i,t,o,n=this.config,r=this.x,a=this.chart;for(n.avlAggMethods=a.getAvailableAggregationMethod(),i=n.avlTimePeriods=a.getAvailableTimePeriod(),n.avlTimeMultiplier=[],o=i.length,t=0;t<o;t++)n.avlTimeMultiplier.push(i[t].multipliers);e=r.getCurrentVisibleRange(),n.currentTimeLength=e.endDate-e.startDate}},{key:"getValidAggregation",value:function(){var e,i,t,o,n,r,a,l,g,u,s,d,c,h,f=this.chart.config,v=this.config,p=f.minNumOfPlot,m=f.maxNumOfPlot;for(n=v.avlTimePeriods,r=v.avlTimeMultiplier,l=v.currentTimeLength,v.minTime=c=l/m,v.maxTime=h=l/p,v.validTimePeriod=[],v.validTimePeriodMultiplier=[],e=0,t=n.length;e<t;e++){for(g=Object.keys(n[e])[0],u=n[e][Object.keys(n[e])[0]],a=[],i=0,o=r[e].length;i<o;i++)d=r[e][i],s=d*u,s>=c&&s<=h&&a.push(r[e][i]);a.length>0&&(v.validTimePeriodMultiplier.push(a),v.validTimePeriod.push(g))}console.log("Time Period: ",v.validTimePeriod),console.log("Number Of Multipliers: ",v.validTimePeriodMultiplier),console.log("Methods: ",v.avlAggMethods)}},{key:"setAggregation",value:function(e){var i,t,o,n,r=this.config;return i=r.avlAggMethods,t=r.validTimePeriod,n=r.validTimePeriodMultiplier,i.includes(e.aggregationMethod)&&t.includes(e.timePeriod)?(o=t.indexOf(e.timePeriod),n[o].includes(e.timePeriodMultiplier)?(this.aggregation=e,console.log(this.aggregation),!0):(console.log(this.aggregation),!1)):(console.log(this.aggregation),!1)}},{key:"resetAggregation",value:function(){}},{key:"init",value:function(e){var i=this;e("X-Axis","chart",function(e,t){i.x=e,i.chart=t}),this.getAvailablelAggreagation(),this.getValidAggregation()}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}},{key:"aggregation",get:function(){return this.appliedAggregation},set:function(e){this.appliedAggregation.timePeriod=e.timePeriod,this.appliedAggregation.timePeriodMultiplier=e.timePeriodMultiplier,this.appliedAggregation.aggregationMethod=e.aggregationMethod}}]),e}();e.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,