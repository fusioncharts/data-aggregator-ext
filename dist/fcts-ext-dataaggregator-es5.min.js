!function(e){function i(n){if(t[n])return t[n].exports;var o=t[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,i),o.loaded=!0,o.exports}var t={};return i.m=e,i.c=t,i.p="",i(0)}([function(e,i,t){"use strict";var n=t(1);!function(e){e(FusionCharts)}(function(e){e.register("extension",["data-aggregator",function(e){var i=this,t=i.extAPI;console.log(e),window.Aggregator=new n,t(window.Aggregator)}])})},function(e,i){"use strict";function t(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}var n=function(){function e(e,i){for(var t=0;t<i.length;t++){var n=i[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(i,t,n){return t&&e(i.prototype,t),n&&e(i,n),i}}(),o=function(){function e(){t(this,e),this.appliedAggregation={timePeriod:null,timePeriodMultiplier:1,aggregationMethod:null},this.config={}}return n(e,[{key:"getAvailablelAggreagation",value:function(){var e,i,t,n=this.config,o=this.chart;for(n.avlAggMethods=o.getAvailableAggregationMethod(),e=n.avlTimePeriods=o.getAvailableTimePeriod(),n.avlTimeMultiplier=[],t=e.length,i=0;i<t;i++)n.avlTimeMultiplier.push(e[i].multipliers)}},{key:"getValidAggregation",value:function(){var e,i,t,n,o,r,a,g,l,u,s,d,c,h,f,v=this.chart.config,m=this.config,p=this.x,P=v.minNumOfPlot,A=v.maxNumOfPlot;for(m.currentVisibleRange=f=p.getCurrentVisibleRange(),m.currentTimeLength=f.endDate-f.startDate,o=m.avlTimePeriods,r=m.avlTimeMultiplier,g=m.currentTimeLength,m.minTime=c=g/A,m.maxTime=h=g/P,m.validTimePeriod=[],m.validTimePeriodMultiplier=[],e=0,t=o.length;e<t;e++){for(l=Object.keys(o[e])[0],u=o[e][Object.keys(o[e])[0]],a=[],i=0,n=r[e].length;i<n;i++)d=r[e][i],s=d*u,s>=c&&s<=h&&a.push(r[e][i]);a.length>0&&(m.validTimePeriodMultiplier.push(a),m.validTimePeriod.push(l))}console.log("Time Period: ",m.validTimePeriod),console.log("Number Of Multipliers: ",m.validTimePeriodMultiplier),console.log("Methods: ",m.avlAggMethods)}},{key:"setAggregation",value:function(e){var i,t,n,o,r=this.config;return i=r.avlAggMethods,t=r.validTimePeriod,o=r.validTimePeriodMultiplier,i.includes(e.aggregationMethod)&&t.includes(e.timePeriod)?(n=t.indexOf(e.timePeriod),o[n].includes(Number(e.timePeriodMultiplier))?(this.aggregation=e,console.log(this.aggregation),!0):(console.log(this.aggregation),!1)):(console.log(this.aggregation),!1)}},{key:"resetAggregation",value:function(){}},{key:"init",value:function(e){var i=this;e("X-Axis","chart",function(e,t){i.x=e,i.chart=t}),this.getAvailablelAggreagation(),this.getValidAggregation()}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"rangeChangeCallback",value:function(){this.getValidAggregation(),this.draw()}},{key:"dispose",value:function(){}},{key:"aggregation",get:function(){return this.appliedAggregation},set:function(e){this.appliedAggregation.timePeriod=e.timePeriod,this.appliedAggregation.timePeriodMultiplier=e.timePeriodMultiplier,this.appliedAggregation.aggregationMethod=e.aggregationMethod}}]),e}();e.exports=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,