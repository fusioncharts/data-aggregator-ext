!function(e){function i(n){if(t[n])return t[n].exports;var r=t[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}var t={};return i.m=e,i.c=t,i.p="",i(0)}([function(e,i,t){"use strict";var n=t(1);!function(e){e(FusionCharts)}(function(e){e.register("extension",["data-aggregator",function(e){var i=this,t=i.extAPI;console.log(e),window.Aggregator=new n,t(window.Aggregator)}])})},function(e,i){"use strict";function t(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}var n=function(){function e(e,i){for(var t=0;t<i.length;t++){var n=i[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(i,t,n){return t&&e(i.prototype,t),n&&e(i,n),i}}(),r=function(){function e(){t(this,e),this.appliedAggregation={timePeriod:null,timePeriodMultiplier:1,aggregationMethod:null},this.config={}}return n(e,[{key:"getAvailablelAggreagation",value:function(){var e,i,t,n,r=this.config,o=this.x,a=this.chart;e=a.getAvailableAggregationMethod(),i=a.getAvailableTimePeriod(),t=o.getCurrentVisibleRange(),n=t.endDate-t.startDate,r.avlTimePeriods=i,r.avlAggMethods=e,r.currentTimeLength=n}},{key:"getValidTimeMultiplier",value:function(){var e,i,t,n,r,o=this.config,a=this.x,l=a.max-a.min,g=o.avlTimePeriods,u=function(e){return Array.from({length:e},function(e,i){return i+1})};for(o.avlTimeMultiplier=[],i=g.length,e=0;e<i;e++)t=g[e],n=g[e+1],r=n?n[Object.keys(n)[0]]/t[Object.keys(t)[0]]:l/t[Object.keys(t)[0]],o.avlTimeMultiplier.push(u(r))}},{key:"getValidAggregation",value:function(){var e,i,t,n,r,o,a,l,g,u,s,c,d,h,f=this.chart.config,v=this.config,m=f.minNumOfPlot,p=f.minPlotWidth,A=f.canvasWidth,P=function(e){return Array.from({length:e},function(e,i){return i+1})};for(r=v.avlTimePeriods,o=v.avlTimeMultiplier,a=v.currentTimeLength,v.minTime=d=a/A*p,v.maxTime=h=a/m,v.validTimePeriod=[],v.validTimePeriodMultiplier=[],e=0,t=r.length;e<t;e++){for(l=Object.keys(r[e])[0],g=r[e][Object.keys(r[e])[0]],c=0,i=0,n=o[e].length;i<n;i++)s=o[e][i],u=s*g,u>=d&&u<=h&&c++;c&&(v.validTimePeriodMultiplier.push(P(c)),v.validTimePeriod.push(l))}console.log("Months: ",v.validTimePeriod),console.log("Number Of Multipliers: ",v.validTimePeriodMultiplier),console.log("Methods: ",v.avlAggMethods)}},{key:"setAggregation",value:function(e){var i,t,n,r,o=this.config;return i=o.avlAggMethods,t=o.validTimePeriod,r=o.validTimePeriodMultiplier,i.includes(e.aggregationMethod)&&t.includes(e.timePeriod)?(n=t.indexOf(e.timePeriod),r[n].includes(e.timePeriodMultiplier)?(this.aggregation=e,console.log(this.aggregation),!0):(console.log(this.aggregation),!1)):(console.log(this.aggregation),!1)}},{key:"resetAggregation",value:function(){}},{key:"init",value:function(e){var i=this;e("X-Axis","chart",function(e,t){i.x=e,i.chart=t}),this.getAvailablelAggreagation(),this.getValidTimeMultiplier(),this.getValidAggregation()}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}},{key:"aggregation",get:function(){return this.appliedAggregation},set:function(e){this.appliedAggregation.timePeriod=e.timePeriod,this.appliedAggregation.timePeriodMultiplier=e.timePeriodMultiplier,this.appliedAggregation.aggregationMethod=e.aggregationMethod}}]),e}();e.exports=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,