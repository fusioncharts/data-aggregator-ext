(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false };modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports;}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0);})([function(module,exports,__webpack_require__){module.exports=__webpack_require__(1);},function(module,exports,__webpack_require__){'use strict';const Aggregator=__webpack_require__(2);const FusionCharts=__webpack_require__(3);var fc=new FusionCharts();fc.register('extension',['data-aggregator',function(id){var global=this;var extAPI=global.extAPI;console.log(id);extAPI(new Aggregator())}]);},function(module,exports){(function(global){'use strict';class Aggregator{constructor(){this.appliedAggregation={timePeriod:null,timePeriodMultiplier:0,aggregationMethod:null}}get aggregation(){return this.appliedAggregation}set aggregation(obj){this.appliedAggregation.timePeriod=obj.timePeriod;this.appliedAggregation.timePeriodMultiplier=obj.timePeriodMultiplier;this.appliedAggregation.aggregationMethod=obj.aggregationMethod}setAggregation(obj){this.aggregation=obj;return true}reset(){}init(require){require('X-Axis','Y-Axis',function(x,y){global.x=x;global.y=y})}placeInCanvas(){var isSet=this.setAggregation({timePeriod:'month',timePeriodMultiplier:3,aggregationMethod:'sum'});console.log(this.aggregation,isSet)}draw(){}dispose(){}}module.exports=Aggregator;}.call(exports,(function(){return this}())));},function(module,exports){'use strict';var FusionCharts=function(){};FusionCharts.prototype.register=function(ext,arr){var extName=arr[0];var fn=arr[1];console.log('Currently active extension: '+extName);fn.bind(this,565)()};FusionCharts.prototype.getComponent=function(componentType,componentName){var toolBox={x:24,y:56,width:100,height:20,index:4};if(componentType==='api'&&componentName==='toolbox'){return toolBox}return null};FusionCharts.prototype.extAPI=function(obj){obj.init(function(){var argsToApply=[];var cb=arguments[arguments.length-1];for(var i=0;i<arguments.length-1;i+=1){if(arguments[i]==='X-Axis'){argsToApply.push(156772)}else if(arguments[i]==='Y-Axis'){argsToApply.push(156765)}}cb.apply(this,argsToApply)});obj.placeInCanvas();obj.draw();obj.dispose()};module.exports=FusionCharts;}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYjkzOTE3MjAzNzUxZWM4MDVkOTEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mY3RzLWV4dC1hZ2dyZWdhdG9yLmpzIiwid2VicGFjazovLy8uL2xpYi9mdXNpb25jaGFydHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FDdENBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsRUFBQzs7Ozs7OztBQ2ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWUsT0FBTztBQUN0QixpQkFBZ0IsT0FBTztBQUN2QixpQkFBZ0IsT0FBTztBQUN2QixpQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7O0FDOUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW1CLDBCQUEwQjtBQUM3QztBQUNBO0FBQ0EsUUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRzs7QUFFSDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6ImZjdHMtZXh0LWRhdGFhZ2dyZWdhdG9yLWVzNi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIGI5MzkxNzIwMzc1MWVjODA1ZDkxXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgQWdncmVnYXRvciA9IHJlcXVpcmUoJy4vZmN0cy1leHQtYWdncmVnYXRvcicpO1xuY29uc3QgRnVzaW9uQ2hhcnRzID0gcmVxdWlyZSgnLi4vbGliL2Z1c2lvbmNoYXJ0cycpO1xuXG52YXIgZmMgPSBuZXcgRnVzaW9uQ2hhcnRzKCk7XG5cbmZjLnJlZ2lzdGVyKCdleHRlbnNpb24nLCBbJ2RhdGEtYWdncmVnYXRvcicsIGZ1bmN0aW9uIChpZCkge1xuICB2YXIgZ2xvYmFsID0gdGhpcztcbiAgdmFyIGV4dEFQSSA9IGdsb2JhbC5leHRBUEk7XG4gIGNvbnNvbGUubG9nKGlkKTtcblxuICAvLyB2YXIgb3RoZXJBUEkgPSBmYy5nZXRFeHRDb21wb25lbnQoaWQsICdhcGknLCAnbGVnYWN5ZXh0YXBpJyk7XG4gIC8vIHZhciB0b29sQm94QXBpID0gZmMuZ2V0Q29tcG9uZW50KCdhcGknLCAndG9vbGJveCcpO1xuXG4gIGV4dEFQSShuZXcgQWdncmVnYXRvcigpKTtcbn1dKTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvaW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyB0aGUgRGF0YSBBZ2dyZWdhdG9yLlxuICovXG5jbGFzcyBBZ2dyZWdhdG9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIEFnZ3JlZ2F0b3IuXG4gICAqIEB0eXBlZGVmIHtvYmplY3R9IEFnZ3JlZ2F0b3IuYWdncmVnYXRpb25cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHRpbWVQZXJpb2QgLSBUaGUgdGltZSBpbnRlcnZhbCBvZiBhZ2dyZWdhdGlvbi5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVQZXJpb2RNdWx0aXBsaWVyIC0gVGhlIG11bHRpcGxpZXIgb2YgdGltZSBpbnRlcnZhbC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGFnZ3JlZ2F0aW9uTWV0aG9kIC0gVGhlIG1ldGhvZCBhcHBsaWVkIHRvIGFnZ3JlZ2F0ZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uID0ge1xuICAgICAgdGltZVBlcmlvZDogbnVsbCxcbiAgICAgIHRpbWVQZXJpb2RNdWx0aXBsaWVyOiAwLFxuICAgICAgYWdncmVnYXRpb25NZXRob2Q6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHRpbWVQZXJpb2QsIHRpbWVQZXJpb2RNdWx0aXBsaWVyLCBhZ2dyZWdhdGlvbk1ldGhvZC5cbiAgICogQHR5cGUge0FnZ3JlZ2F0b3IuYWdncmVnYXRpb259XG4gICAqL1xuICBnZXQgYWdncmVnYXRpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGxpZWRBZ2dyZWdhdGlvbjtcbiAgfVxuXG4gIHNldCBhZ2dyZWdhdGlvbiAob2JqKSB7XG4gICAgdGhpcy5hcHBsaWVkQWdncmVnYXRpb24udGltZVBlcmlvZCA9IG9iai50aW1lUGVyaW9kO1xuICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLnRpbWVQZXJpb2RNdWx0aXBsaWVyID0gb2JqLnRpbWVQZXJpb2RNdWx0aXBsaWVyO1xuICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLmFnZ3JlZ2F0aW9uTWV0aG9kID0gb2JqLmFnZ3JlZ2F0aW9uTWV0aG9kO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBBZ2dyZWdhdGlvbiBvbiB0aW1lIHNlcmllc1xuICAgKi9cbiAgc2V0QWdncmVnYXRpb24gKG9iaikge1xuICAgIHRoaXMuYWdncmVnYXRpb24gPSBvYmo7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgQXBwbGllZCBBZ2dyZWdhdGlvblxuICAgKi9cbiAgcmVzZXQgKCkge1xuXG4gIH1cblxuICBpbml0IChyZXF1aXJlKSB7XG4gICAgcmVxdWlyZSgnWC1BeGlzJywgJ1ktQXhpcycsIGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICBnbG9iYWwueCA9IHg7XG4gICAgICBnbG9iYWwueSA9IHk7XG4gICAgfSk7XG4gIH1cblxuICBwbGFjZUluQ2FudmFzICgpIHtcbiAgICAvLyBzcGFjZSBtYW5hZ2VtZW50XG4gICAgdmFyIGlzU2V0ID0gdGhpcy5zZXRBZ2dyZWdhdGlvbih7XG4gICAgICB0aW1lUGVyaW9kOiAnbW9udGgnLFxuICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXI6IDMsXG4gICAgICBhZ2dyZWdhdGlvbk1ldGhvZDogJ3N1bSdcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyh0aGlzLmFnZ3JlZ2F0aW9uLCBpc1NldCk7XG4gIH1cblxuICBkcmF3ICgpIHtcbiAgICAvLyBkcmF3IGV4dGVuc2lvblxuICB9XG5cbiAgZGlzcG9zZSAoKSB7XG4gICAgLy8gZGlzcG9zZSBleHRlbnNpb25cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFnZ3JlZ2F0b3I7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2ZjdHMtZXh0LWFnZ3JlZ2F0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgRnVzaW9uQ2hhcnRzID0gZnVuY3Rpb24gKCkge307XG5cbkZ1c2lvbkNoYXJ0cy5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZXh0LCBhcnIpIHtcbiAgdmFyIGV4dE5hbWUgPSBhcnJbMF07XG4gIHZhciBmbiA9IGFyclsxXTtcbiAgY29uc29sZS5sb2coJ0N1cnJlbnRseSBhY3RpdmUgZXh0ZW5zaW9uOiAnICsgZXh0TmFtZSk7XG4gIGZuLmJpbmQodGhpcywgNTY1KSgpO1xufTtcblxuRnVzaW9uQ2hhcnRzLnByb3RvdHlwZS5nZXRDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50VHlwZSwgY29tcG9uZW50TmFtZSkge1xuICB2YXIgdG9vbEJveCA9IHtcbiAgICB4OiAyNCxcbiAgICB5OiA1NixcbiAgICB3aWR0aDogMTAwLFxuICAgIGhlaWdodDogMjAsXG4gICAgaW5kZXg6IDRcbiAgfTtcblxuICBpZiAoY29tcG9uZW50VHlwZSA9PT0gJ2FwaScgJiYgY29tcG9uZW50TmFtZSA9PT0gJ3Rvb2xib3gnKSB7XG4gICAgcmV0dXJuIHRvb2xCb3g7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbkZ1c2lvbkNoYXJ0cy5wcm90b3R5cGUuZXh0QVBJID0gZnVuY3Rpb24gKG9iaikge1xuICBvYmouaW5pdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3NUb0FwcGx5ID0gW107XG4gICAgdmFyIGNiID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gJ1gtQXhpcycpIHtcbiAgICAgICAgYXJnc1RvQXBwbHkucHVzaCgxNTY3NzIpO1xuICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHNbaV0gPT09ICdZLUF4aXMnKSB7XG4gICAgICAgIGFyZ3NUb0FwcGx5LnB1c2goMTU2NzY1KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2IuYXBwbHkodGhpcywgYXJnc1RvQXBwbHkpO1xuICB9KTtcblxuICBvYmoucGxhY2VJbkNhbnZhcygpO1xuXG4gIG9iai5kcmF3KCk7XG5cbiAgb2JqLmRpc3Bvc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVzaW9uQ2hhcnRzO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2xpYi9mdXNpb25jaGFydHMuanNcbiAqKiBtb2R1bGUgaWQgPSAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXX0=