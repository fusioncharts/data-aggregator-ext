!function(e){function i(o){if(t[o])return t[o].exports;var n=t[o]={exports:{},id:o,loaded:!1};return e[o].call(n.exports,n,n.exports,i),n.loaded=!0,n.exports}var t={};return i.m=e,i.c=t,i.p="",i(0)}([function(e,i,t){(function(e){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=t(2);!function(t,o){"object"===i(e)&&e.exports?e.exports=t.document?o(t):function(e){if(!e.document)throw new Error("Window with document not present");return o(e,!0)}:t.Aggregator=o(t,!0)}("undefined"!=typeof window?window:void 0,function(e,i){var t=e.FusionCharts;t.register("extension",["data-aggregator",function(e){var i=this,t=i.extAPI;console.log(e),window.Aggregator=new o,t(window.Aggregator)}])})}).call(i,t(1)(e))},function(e,i){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,i){"use strict";function t(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,i){for(var t=0;t<i.length;t++){var o=i[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(i,t,o){return t&&e(i.prototype,t),o&&e(i,o),i}}(),n=function(){function e(){t(this,e),this.appliedAggregation={timePeriod:null,timePeriodMultiplier:1,aggregationMethod:null},this.config={}}return o(e,[{key:"getAvailablelAggreagation",value:function(){var e,i,t,o=this.config,n=this.chart;for(o.avlAggMethods=n.getAvailableAggregationMethod(),e=o.avlTimePeriods=n.getAvailableTimePeriod(),o.avlTimeMultiplier=[],t=e.length,i=0;i<t;i++)o.avlTimeMultiplier.push(e[i].multipliers)}},{key:"getValidAggregation",value:function(){var e,i,t,o,n,r,a,l,g,u,s,c,d,f,p,h=this.chart.config,m=this.config,v=this.x,y=h.minNumOfPlot,P=h.maxNumOfPlot;for(m.currentVisibleRange=p=v.getCurrentVisibleRange(),m.currentTimeLength=p.endDate-p.startDate,n=m.avlTimePeriods,r=m.avlTimeMultiplier,l=m.currentTimeLength,m.minTime=d=l/P,m.maxTime=f=l/y,m.validTimePeriod=[],m.validTimePeriodMultiplier=[],e=0,t=n.length;e<t;e++){for(g=Object.keys(n[e])[0],u=n[e][Object.keys(n[e])[0]],a=[],i=0,o=r[e].length;i<o;i++)c=r[e][i],s=c*u,s>=d&&s<=f&&a.push(r[e][i]);a.length>0&&(m.validTimePeriodMultiplier.push(a),m.validTimePeriod.push(g))}console.log("Time Period: ",m.validTimePeriod),console.log("Number Of Multipliers: ",m.validTimePeriodMultiplier),console.log("Methods: ",m.avlAggMethods)}},{key:"setAggregation",value:function(e){var i,t,o,n,r=this.config;return i=r.avlAggMethods,t=r.validTimePeriod,n=r.validTimePeriodMultiplier,i.includes(e.aggregationMethod)&&t.includes(e.timePeriod)?(o=t.indexOf(e.timePeriod),n[o].includes(Number(e.timePeriodMultiplier))?(this.aggregation=e,console.log(this.aggregation),!0):(console.log(this.aggregation),!1)):(console.log(this.aggregation),!1)}},{key:"resetAggregation",value:function(){}},{key:"init",value:function(e){var i=this;e("X-Axis","chart",function(e,t){i.x=e,i.chart=t}),this.getAvailablelAggreagation(),this.getValidAggregation()}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"rangeChangeCallback",value:function(){this.getValidAggregation(),this.draw()}},{key:"dispose",value:function(){}},{key:"aggregation",get:function(){return this.appliedAggregation},set:function(e){this.appliedAggregation.timePeriod=e.timePeriod,this.appliedAggregation.timePeriodMultiplier=e.timePeriodMultiplier,this.appliedAggregation.aggregationMethod=e.aggregationMethod}}]),e}();e.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZmN0cy1leHQtZGF0YWFnZ3JlZ2F0b3ItZXM1Lm1pbi5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgM2NhMjljYmRjZjQxM2Q2MjY1ZmQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZjdHMtZXh0LWFnZ3JlZ2F0b3IuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJBZ2dyZWdhdG9yIiwiZW52IiwiZmFjdG9yeSIsImRvY3VtZW50Iiwid2luIiwiRXJyb3IiLCJ3aW5kb3ciLCJ1bmRlZmluZWQiLCJfd2luZG93Iiwid2luZG93RXhpc3RzIiwiRkMiLCJGdXNpb25DaGFydHMiLCJyZWdpc3RlciIsImdsb2JhbCIsInRoaXMiLCJleHRBUEkiLCJjb25zb2xlIiwibG9nIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiYXBwbGllZEFnZ3JlZ2F0aW9uIiwidGltZVBlcmlvZCIsInRpbWVQZXJpb2RNdWx0aXBsaWVyIiwiYWdncmVnYXRpb25NZXRob2QiLCJjb25maWciLCJ2YWx1ZSIsImF2bFRpbWVQZXJpb2RzIiwibGVuIiwiY2hhcnQiLCJhdmxBZ2dNZXRob2RzIiwiZ2V0QXZhaWxhYmxlQWdncmVnYXRpb25NZXRob2QiLCJnZXRBdmFpbGFibGVUaW1lUGVyaW9kIiwiYXZsVGltZU11bHRpcGxpZXIiLCJwdXNoIiwibXVsdGlwbGllcnMiLCJqIiwibGVuMSIsImxlbjIiLCJtdWx0aXBsaWVyc0FyciIsImN1cnJlbnRUaW1lTGVuZ3RoIiwidGltZSIsImV4cGVjdGVkVGltZSIsIm11bHRpcGxpZXIiLCJtaW5UaW1lIiwibWF4VGltZSIsImN1cnJlbnRWaXNpYmxlUmFuZ2UiLCJjaGFydENvbmZpZyIsInhBeGlzIiwieCIsIm1pbk51bU9mUGxvdCIsIm1heE51bU9mUGxvdCIsImdldEN1cnJlbnRWaXNpYmxlUmFuZ2UiLCJlbmREYXRlIiwic3RhcnREYXRlIiwidmFsaWRUaW1lUGVyaW9kIiwidmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciIsImtleXMiLCJ0aW1lUGVyaW9kSW5kZXgiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJOdW1iZXIiLCJhZ2dyZWdhdGlvbiIsInJlcXVpcmUiLCJzZWxmIiwiZ2V0QXZhaWxhYmxlbEFnZ3JlYWdhdGlvbiIsImdldFZhbGlkQWdncmVnYXRpb24iLCJkcmF3IiwiZ2V0Iiwic2V0Il0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBRSxXQUNBRSxHQUFBSixFQUNBSyxRQUFBLEVBVUEsT0FOQVAsR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsUUFBQSxFQUdBRixFQUFBRCxRQXZCQSxHQUFBRCxLQXFDQSxPQVRBRixHQUFBUSxFQUFBVCxF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cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24obW9kdWxlKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIEFnZ3JlZ2F0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0OyhmdW5jdGlvbiAoZW52LCBmYWN0b3J5KSB7XG5cdCAgaWYgKCggZmFsc2UgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobW9kdWxlKSkgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdCAgICBtb2R1bGUuZXhwb3J0cyA9IGVudi5kb2N1bWVudCA/IGZhY3RvcnkoZW52KSA6IGZ1bmN0aW9uICh3aW4pIHtcblx0ICAgICAgaWYgKCF3aW4uZG9jdW1lbnQpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpbmRvdyB3aXRoIGRvY3VtZW50IG5vdCBwcmVzZW50Jyk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGZhY3Rvcnkod2luLCB0cnVlKTtcblx0ICAgIH07XG5cdCAgfSBlbHNlIHtcblx0ICAgIGVudi5BZ2dyZWdhdG9yID0gZmFjdG9yeShlbnYsIHRydWUpO1xuXHQgIH1cblx0fSkodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQsIGZ1bmN0aW9uIChfd2luZG93LCB3aW5kb3dFeGlzdHMpIHtcblx0ICB2YXIgRkMgPSBfd2luZG93LkZ1c2lvbkNoYXJ0cztcblx0XG5cdCAgRkMucmVnaXN0ZXIoJ2V4dGVuc2lvbicsIFsnZGF0YS1hZ2dyZWdhdG9yJywgZnVuY3Rpb24gKGlkKSB7XG5cdCAgICB2YXIgZ2xvYmFsID0gdGhpcztcblx0ICAgIHZhciBleHRBUEkgPSBnbG9iYWwuZXh0QVBJO1xuXHQgICAgY29uc29sZS5sb2coaWQpO1xuXHRcblx0ICAgIC8vIHZhciBvdGhlckFQSSA9IEZ1c2lvbkNoYXJ0cy5nZXRFeHRDb21wb25lbnQoaWQsICdhcGknLCAnbGVnYWN5ZXh0YXBpJyk7XG5cdCAgICAvLyB2YXIgdG9vbEJveEFwaSA9IEZ1c2lvbkNoYXJ0cy5nZXRDb21wb25lbnQoJ2FwaScsICd0b29sYm94Jyk7XG5cdFxuXHQgICAgd2luZG93LkFnZ3JlZ2F0b3IgPSBuZXcgQWdncmVnYXRvcigpO1xuXHRcblx0ICAgIGV4dEFQSSh3aW5kb3cuQWdncmVnYXRvcik7XG5cdCAgfV0pO1xuXHR9KTtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkobW9kdWxlKSkpXG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRcdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHRcdH1cblx0XHRyZXR1cm4gbW9kdWxlO1xuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCAqIENsYXNzIHJlcHJlc2VudGluZyB0aGUgRGF0YSBBZ2dyZWdhdG9yLlxuXHQgKi9cblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIEFnZ3JlZ2F0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlIGEgQWdncmVnYXRvci5cblx0ICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBBZ2dyZWdhdG9yLmFnZ3JlZ2F0aW9uXG5cdCAgICogQHByb3BlcnR5IHtzdHJpbmd9IHRpbWVQZXJpb2QgLSBUaGUgdGltZSBpbnRlcnZhbCBvZiBhZ2dyZWdhdGlvbi5cblx0ICAgKiBAcHJvcGVydHkge251bWJlcn0gdGltZVBlcmlvZE11bHRpcGxpZXIgLSBUaGUgbXVsdGlwbGllciBvZiB0aW1lIGludGVydmFsLlxuXHQgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZ2dyZWdhdGlvbk1ldGhvZCAtIFRoZSBtZXRob2QgYXBwbGllZCB0byBhZ2dyZWdhdGUuXG5cdCAgICovXG5cdCAgZnVuY3Rpb24gQWdncmVnYXRvcigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBZ2dyZWdhdG9yKTtcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uID0ge1xuXHQgICAgICB0aW1lUGVyaW9kOiBudWxsLFxuXHQgICAgICB0aW1lUGVyaW9kTXVsdGlwbGllcjogMSxcblx0ICAgICAgYWdncmVnYXRpb25NZXRob2Q6IG51bGxcblx0ICAgIH07XG5cdCAgICB0aGlzLmNvbmZpZyA9IHt9O1xuXHQgIH1cblx0XG5cdCAgLyoqXG5cdCAgICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgdGltZVBlcmlvZCwgdGltZVBlcmlvZE11bHRpcGxpZXIsIGFnZ3JlZ2F0aW9uTWV0aG9kLlxuXHQgICAqIEB0eXBlIHtBZ2dyZWdhdG9yLmFnZ3JlZ2F0aW9ufVxuXHQgICAqL1xuXHRcblx0XG5cdCAgX2NyZWF0ZUNsYXNzKEFnZ3JlZ2F0b3IsIFt7XG5cdCAgICBrZXk6ICdnZXRBdmFpbGFibGVsQWdncmVhZ2F0aW9uJyxcblx0XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBTZXRzIGF2YWlsYWJsZSBhZ2dyZWdhdGlvbiBvcHRpb25zIGluIGNvbmZpZ3VyYXRpb24gb2YgZXh0ZW5zaW9uXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXZhaWxhYmxlbEFnZ3JlYWdhdGlvbigpIHtcblx0ICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnLFxuXHQgICAgICAgICAgY2hhcnQgPSB0aGlzLmNoYXJ0LFxuXHQgICAgICAgICAgYXZsVGltZVBlcmlvZHMsXG5cdCAgICAgICAgICBpLFxuXHQgICAgICAgICAgbGVuO1xuXHRcblx0ICAgICAgY29uZmlnLmF2bEFnZ01ldGhvZHMgPSBjaGFydC5nZXRBdmFpbGFibGVBZ2dyZWdhdGlvbk1ldGhvZCgpO1xuXHQgICAgICBhdmxUaW1lUGVyaW9kcyA9IGNvbmZpZy5hdmxUaW1lUGVyaW9kcyA9IGNoYXJ0LmdldEF2YWlsYWJsZVRpbWVQZXJpb2QoKTtcblx0XG5cdCAgICAgIGNvbmZpZy5hdmxUaW1lTXVsdGlwbGllciA9IFtdO1xuXHQgICAgICBsZW4gPSBhdmxUaW1lUGVyaW9kcy5sZW5ndGg7XG5cdFxuXHQgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICBjb25maWcuYXZsVGltZU11bHRpcGxpZXIucHVzaChhdmxUaW1lUGVyaW9kc1tpXS5tdWx0aXBsaWVycyk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIENhbGN1bGF0ZXMgdmFsaWQgYWdncmVnYXRpb24gdGltZSBwZXJpb2RzIGFuZCBjb3JyZXNwb25kaW5nIG11bHRpcGxpZXJzXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFZhbGlkQWdncmVnYXRpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhbGlkQWdncmVnYXRpb24oKSB7XG5cdCAgICAgIHZhciBjaGFydENvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnLFxuXHQgICAgICAgICAgY29uZmlnID0gdGhpcy5jb25maWcsXG5cdCAgICAgICAgICB4QXhpcyA9IHRoaXMueCxcblx0ICAgICAgICAgIGksXG5cdCAgICAgICAgICBqLFxuXHQgICAgICAgICAgbGVuMSxcblx0ICAgICAgICAgIGxlbjIsXG5cdCAgICAgICAgICBhdmxUaW1lUGVyaW9kcyxcblx0ICAgICAgICAgIGF2bFRpbWVNdWx0aXBsaWVyLFxuXHQgICAgICAgICAgbWluTnVtT2ZQbG90ID0gY2hhcnRDb25maWcubWluTnVtT2ZQbG90LFxuXHQgICAgICAgICAgbWF4TnVtT2ZQbG90ID0gY2hhcnRDb25maWcubWF4TnVtT2ZQbG90LFxuXHQgICAgICAgICAgbXVsdGlwbGllcnNBcnIsXG5cdCAgICAgICAgICBjdXJyZW50VGltZUxlbmd0aCxcblx0ICAgICAgICAgIHRpbWVQZXJpb2QsXG5cdCAgICAgICAgICB0aW1lLFxuXHQgICAgICAgICAgZXhwZWN0ZWRUaW1lLFxuXHQgICAgICAgICAgbXVsdGlwbGllcixcblx0ICAgICAgICAgIG1pblRpbWUsXG5cdCAgICAgICAgICBtYXhUaW1lLFxuXHQgICAgICAgICAgY3VycmVudFZpc2libGVSYW5nZTtcblx0XG5cdCAgICAgIGNvbmZpZy5jdXJyZW50VmlzaWJsZVJhbmdlID0gY3VycmVudFZpc2libGVSYW5nZSA9IHhBeGlzLmdldEN1cnJlbnRWaXNpYmxlUmFuZ2UoKTtcblx0ICAgICAgY29uZmlnLmN1cnJlbnRUaW1lTGVuZ3RoID0gY3VycmVudFZpc2libGVSYW5nZS5lbmREYXRlIC0gY3VycmVudFZpc2libGVSYW5nZS5zdGFydERhdGU7XG5cdFxuXHQgICAgICBhdmxUaW1lUGVyaW9kcyA9IGNvbmZpZy5hdmxUaW1lUGVyaW9kcztcblx0ICAgICAgYXZsVGltZU11bHRpcGxpZXIgPSBjb25maWcuYXZsVGltZU11bHRpcGxpZXI7XG5cdCAgICAgIGN1cnJlbnRUaW1lTGVuZ3RoID0gY29uZmlnLmN1cnJlbnRUaW1lTGVuZ3RoO1xuXHRcblx0ICAgICAgY29uZmlnLm1pblRpbWUgPSBtaW5UaW1lID0gY3VycmVudFRpbWVMZW5ndGggLyBtYXhOdW1PZlBsb3Q7XG5cdCAgICAgIGNvbmZpZy5tYXhUaW1lID0gbWF4VGltZSA9IGN1cnJlbnRUaW1lTGVuZ3RoIC8gbWluTnVtT2ZQbG90O1xuXHRcblx0ICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZCA9IFtdO1xuXHQgICAgICBjb25maWcudmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciA9IFtdO1xuXHRcblx0ICAgICAgZm9yIChpID0gMCwgbGVuMSA9IGF2bFRpbWVQZXJpb2RzLmxlbmd0aDsgaSA8IGxlbjE7IGkrKykge1xuXHQgICAgICAgIHRpbWVQZXJpb2QgPSBPYmplY3Qua2V5cyhhdmxUaW1lUGVyaW9kc1tpXSlbMF07XG5cdCAgICAgICAgdGltZSA9IGF2bFRpbWVQZXJpb2RzW2ldW09iamVjdC5rZXlzKGF2bFRpbWVQZXJpb2RzW2ldKVswXV07XG5cdCAgICAgICAgbXVsdGlwbGllcnNBcnIgPSBbXTtcblx0XG5cdCAgICAgICAgZm9yIChqID0gMCwgbGVuMiA9IGF2bFRpbWVNdWx0aXBsaWVyW2ldLmxlbmd0aDsgaiA8IGxlbjI7IGorKykge1xuXHQgICAgICAgICAgbXVsdGlwbGllciA9IGF2bFRpbWVNdWx0aXBsaWVyW2ldW2pdO1xuXHQgICAgICAgICAgZXhwZWN0ZWRUaW1lID0gbXVsdGlwbGllciAqIHRpbWU7XG5cdFxuXHQgICAgICAgICAgaWYgKGV4cGVjdGVkVGltZSA+PSBtaW5UaW1lICYmIGV4cGVjdGVkVGltZSA8PSBtYXhUaW1lKSB7XG5cdCAgICAgICAgICAgIG11bHRpcGxpZXJzQXJyLnB1c2goYXZsVGltZU11bHRpcGxpZXJbaV1bal0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobXVsdGlwbGllcnNBcnIubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIucHVzaChtdWx0aXBsaWVyc0Fycik7XG5cdCAgICAgICAgICBjb25maWcudmFsaWRUaW1lUGVyaW9kLnB1c2godGltZVBlcmlvZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGNvbnNvbGUubG9nKCdUaW1lIFBlcmlvZDogJywgY29uZmlnLnZhbGlkVGltZVBlcmlvZCk7XG5cdCAgICAgIGNvbnNvbGUubG9nKCdOdW1iZXIgT2YgTXVsdGlwbGllcnM6ICcsIGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyKTtcblx0ICAgICAgY29uc29sZS5sb2coJ01ldGhvZHM6ICcsIGNvbmZpZy5hdmxBZ2dNZXRob2RzKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIFNldCBBZ2dyZWdhdGlvbiBvbiB0aW1lIHNlcmllc1xuXHQgICAgICogQHBhcmFtICB7b2JqZWN0fSBvYmpcblx0ICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aW1lUGVyaW9kIC0gVGhlIHRpbWUgaW50ZXJ2YWwgb2YgYWdncmVnYXRpb24uXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gdGltZVBlcmlvZE11bHRpcGxpZXIgLSBUaGUgbXVsdGlwbGllciBvZiB0aW1lIGludGVydmFsLlxuXHQgICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGFnZ3JlZ2F0aW9uTWV0aG9kIC0gVGhlIG1ldGhvZCBhcHBsaWVkIHRvIGFnZ3JlZ2F0ZS5cblx0ICAgICAqL1xuXHRcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzZXRBZ2dyZWdhdGlvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QWdncmVnYXRpb24ob2JqKSB7XG5cdCAgICAgIHZhciBhdmxBZ2dNZXRob2RzLFxuXHQgICAgICAgICAgdmFsaWRUaW1lUGVyaW9kLFxuXHQgICAgICAgICAgdGltZVBlcmlvZEluZGV4LFxuXHQgICAgICAgICAgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllcixcblx0ICAgICAgICAgIGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuXHRcblx0ICAgICAgYXZsQWdnTWV0aG9kcyA9IGNvbmZpZy5hdmxBZ2dNZXRob2RzO1xuXHQgICAgICB2YWxpZFRpbWVQZXJpb2QgPSBjb25maWcudmFsaWRUaW1lUGVyaW9kO1xuXHQgICAgICB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXI7XG5cdFxuXHQgICAgICBpZiAoYXZsQWdnTWV0aG9kcy5pbmNsdWRlcyhvYmouYWdncmVnYXRpb25NZXRob2QpICYmIHZhbGlkVGltZVBlcmlvZC5pbmNsdWRlcyhvYmoudGltZVBlcmlvZCkpIHtcblx0ICAgICAgICB0aW1lUGVyaW9kSW5kZXggPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZihvYmoudGltZVBlcmlvZCk7XG5cdCAgICAgICAgaWYgKHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbdGltZVBlcmlvZEluZGV4XS5pbmNsdWRlcyhOdW1iZXIob2JqLnRpbWVQZXJpb2RNdWx0aXBsaWVyKSkpIHtcblx0ICAgICAgICAgIHRoaXMuYWdncmVnYXRpb24gPSBvYmo7XG5cdCAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmFnZ3JlZ2F0aW9uKTtcblx0ICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmFnZ3JlZ2F0aW9uKTtcblx0ICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY29uc29sZS5sb2codGhpcy5hZ2dyZWdhdGlvbik7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZXNldCBBcHBsaWVkIEFnZ3JlZ2F0aW9uXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAncmVzZXRBZ2dyZWdhdGlvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRBZ2dyZWdhdGlvbigpIHt9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaW5pdCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChyZXF1aXJlKSB7XG5cdCAgICAgIHZhciBzZWxmID0gdGhpcztcblx0XG5cdCAgICAgIHJlcXVpcmUoJ1gtQXhpcycsICdjaGFydCcsIGZ1bmN0aW9uICh4LCBjaGFydCkge1xuXHQgICAgICAgIHNlbGYueCA9IHg7XG5cdCAgICAgICAgc2VsZi5jaGFydCA9IGNoYXJ0O1xuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHRoaXMuZ2V0QXZhaWxhYmxlbEFnZ3JlYWdhdGlvbigpO1xuXHQgICAgICB0aGlzLmdldFZhbGlkQWdncmVnYXRpb24oKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdwbGFjZUluQ2FudmFzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBwbGFjZUluQ2FudmFzKCkge1xuXHQgICAgICAvLyBzcGFjZSBtYW5hZ2VtZW50XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZHJhdycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZHJhdygpIHtcblx0ICAgICAgLy8gdmFyIG11bHRpcGxpZXJGbGQsXG5cdCAgICAgIC8vICAgdGltZVBlcmlvZEZsZCxcblx0ICAgICAgLy8gICBBZ2dNZXRob2RGbGQsXG5cdCAgICAgIC8vICAgLy8gY2hhcnQgPSB0aGlzLmNoYXJ0LFxuXHQgICAgICAvLyAgIGNvbmZpZyA9IHRoaXMuY29uZmlnLFxuXHQgICAgICAvLyAgIC8vIGN1cnJlbnRBZ2dyZWdhdGlvbixcblx0ICAgICAgLy8gICBsYWJlbCxcblx0ICAgICAgLy8gICBtYWluQ29udCA9ICQoJyNtYWluQ29udCcpLFxuXHQgICAgICAvLyAgIHZhbGlkVGltZVBlcmlvZCA9IGNvbmZpZy52YWxpZFRpbWVQZXJpb2QsXG5cdCAgICAgIC8vICAgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciA9IGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLFxuXHQgICAgICAvLyAgIGluZGV4T2ZUaW1lVW5pdCxcblx0ICAgICAgLy8gICBhdmxBZ2dNZXRob2RzID0gY29uZmlnLmF2bEFnZ01ldGhvZHMsXG5cdCAgICAgIC8vICAgdGltZVBlcmlvZE9uQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAvLyAgICAgdmFyIHRpbWVQZXJpb2RWYWwgPSAkKCcjdGltZV9wZXJpb2QnKS52YWwoKSxcblx0ICAgICAgLy8gICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXJWYWwgPSAkKCcjbXVsJykudmFsKCksXG5cdCAgICAgIC8vICAgICAgIGluZGV4T2ZUaW1lVW5pdCxcblx0ICAgICAgLy8gICAgICAgaW5kZXhPZlRpbWVNdWw7XG5cdFxuXHQgICAgICAvLyAgICAgaW5kZXhPZlRpbWVVbml0ID0gdmFsaWRUaW1lUGVyaW9kLmluZGV4T2YodGltZVBlcmlvZFZhbCk7XG5cdCAgICAgIC8vICAgICBpbmRleE9mVGltZU11bCA9IHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XS5pbmRleE9mKE51bWJlcih0aW1lUGVyaW9kTXVsdGlwbGllclZhbCkpO1xuXHRcblx0ICAgICAgLy8gICAgICQoJyNtdWwnKS5lbXB0eSgpO1xuXHQgICAgICAvLyAgICAgY29uc29sZS5sb2coaW5kZXhPZlRpbWVVbml0LCBpbmRleE9mVGltZU11bCk7XG5cdFxuXHQgICAgICAvLyAgICAgZm9yICh2YXIgbXVsVmFsIG9mIHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XSkge1xuXHQgICAgICAvLyAgICAgICAkKCc8b3B0aW9uIC8+Jywge3RleHQ6IG11bFZhbH0pLmFwcGVuZFRvKG11bHRpcGxpZXJGbGQpO1xuXHQgICAgICAvLyAgICAgfVxuXHRcblx0ICAgICAgLy8gICAgIGlmIChpbmRleE9mVGltZU11bCA8IDApIHtcblx0ICAgICAgLy8gICAgICAgJCgnI211bCcpLnZhbCh2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW2luZGV4T2ZUaW1lVW5pdF1bMF0pO1xuXHQgICAgICAvLyAgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gICAgICAgJCgnI211bCcpLnZhbCh0aW1lUGVyaW9kTXVsdGlwbGllclZhbCk7XG5cdCAgICAgIC8vICAgICB9XG5cdCAgICAgIC8vICAgfTtcblx0XG5cdCAgICAgIC8vIC8vIGN1cnJlbnRBZ2dyZWdhdGlvbiA9IGNoYXJ0LmdldEFnZ3JlZ2F0aW9uKCk7XG5cdFxuXHQgICAgICAvLyBpZiAobWFpbkNvbnQubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgIC8vICAgcmV0dXJuO1xuXHQgICAgICAvLyB9XG5cdFxuXHQgICAgICAvLyBtYWluQ29udC5lbXB0eSgpO1xuXHRcblx0ICAgICAgLy8gbGFiZWwgPSAkKCc8bGFiZWw+JykudGV4dCgnQWdncmVnYXRlIERhdGE6ICcpO1xuXHQgICAgICAvLyBsYWJlbC5hcHBlbmRUbyhtYWluQ29udCk7XG5cdFxuXHQgICAgICAvLyBtdWx0aXBsaWVyRmxkID0gJCgnPHNlbGVjdCBpZD1cIm11bFwiLz4nKTtcblx0ICAgICAgLy8gdGltZVBlcmlvZEZsZCA9ICQoJzxzZWxlY3QgaWQ9XCJ0aW1lX3BlcmlvZFwiLz4nKTtcblx0ICAgICAgLy8gQWdnTWV0aG9kRmxkID0gJCgnPHNlbGVjdCBpZD1cImFnZ19tZXRob2RcIi8+Jyk7XG5cdFxuXHQgICAgICAvLyBmb3IgKHZhciB1bml0VmFsIG9mIHZhbGlkVGltZVBlcmlvZCkge1xuXHQgICAgICAvLyAgICQoJzxvcHRpb24gLz4nLCB7dGV4dDogdW5pdFZhbH0pLmFwcGVuZFRvKHRpbWVQZXJpb2RGbGQpO1xuXHQgICAgICAvLyB9XG5cdFxuXHQgICAgICAvLyBpbmRleE9mVGltZVVuaXQgPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZih2YWxpZFRpbWVQZXJpb2RbMF0pO1xuXHRcblx0ICAgICAgLy8gaWYgKGluZGV4T2ZUaW1lVW5pdCA+PSAwKSB7XG5cdCAgICAgIC8vICAgZm9yICh2YXIgbXVsVmFsIG9mIHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XSkge1xuXHQgICAgICAvLyAgICAgJCgnPG9wdGlvbiAvPicsIHt0ZXh0OiBtdWxWYWx9KS5hcHBlbmRUbyhtdWx0aXBsaWVyRmxkKTtcblx0ICAgICAgLy8gICB9XG5cdCAgICAgIC8vIH1cblx0XG5cdCAgICAgIC8vIGZvciAodmFyIGFnZ1ZhbCBvZiBhdmxBZ2dNZXRob2RzKSB7XG5cdCAgICAgIC8vICAgJCgnPG9wdGlvbiAvPicsIHt0ZXh0OiBhZ2dWYWx9KS5hcHBlbmRUbyhBZ2dNZXRob2RGbGQpO1xuXHQgICAgICAvLyB9XG5cdFxuXHQgICAgICAvLyBtdWx0aXBsaWVyRmxkLmFwcGVuZFRvKG1haW5Db250KTtcblx0ICAgICAgLy8gLy8gJCgnI211bCcpLnZhbChjdXJyZW50QWdncmVnYXRpb24udGltZVBlcmlvZE11bHRpcGxpZXIpO1xuXHQgICAgICAvLyB0aW1lUGVyaW9kRmxkLmFwcGVuZFRvKG1haW5Db250KTtcblx0ICAgICAgLy8gLy8gJCgnI3RpbWVfcGVyaW9kJykudmFsKGN1cnJlbnRBZ2dyZWdhdGlvbi50aW1lUGVyaW9kKTtcblx0ICAgICAgLy8gQWdnTWV0aG9kRmxkLmFwcGVuZFRvKG1haW5Db250KTtcblx0ICAgICAgLy8gLy8gJCgnI2FnZ19tZXRob2QnKS52YWwoY3VycmVudEFnZ3JlZ2F0aW9uLmFnZ3JlZ2F0aW9uTWV0aG9kKTtcblx0XG5cdCAgICAgIC8vICQoJzxidXR0b24vPicpLnRleHQoJ0FwcGx5JykuYXBwZW5kVG8obWFpbkNvbnQpO1xuXHQgICAgICAvLyAkKCc8YnV0dG9uLz4nKS50ZXh0KCdSZXNldCcpLmFwcGVuZFRvKG1haW5Db250KTtcblx0XG5cdCAgICAgIC8vICQoJyN0aW1lX3BlcmlvZCcpLmNoYW5nZSh0aW1lUGVyaW9kT25DaGFuZ2UpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JhbmdlQ2hhbmdlQ2FsbGJhY2snLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJhbmdlQ2hhbmdlQ2FsbGJhY2soKSB7XG5cdCAgICAgIHRoaXMuZ2V0VmFsaWRBZ2dyZWdhdGlvbigpO1xuXHQgICAgICB0aGlzLmRyYXcoKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkaXNwb3NlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuXHQgICAgICAvLyBkaXNwb3NlIGV4dGVuc2lvblxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2FnZ3JlZ2F0aW9uJyxcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5hcHBsaWVkQWdncmVnYXRpb247XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQob2JqKSB7XG5cdCAgICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLnRpbWVQZXJpb2QgPSBvYmoudGltZVBlcmlvZDtcblx0ICAgICAgdGhpcy5hcHBsaWVkQWdncmVnYXRpb24udGltZVBlcmlvZE11bHRpcGxpZXIgPSBvYmoudGltZVBlcmlvZE11bHRpcGxpZXI7XG5cdCAgICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLmFnZ3JlZ2F0aW9uTWV0aG9kID0gb2JqLmFnZ3JlZ2F0aW9uTWV0aG9kO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIEFnZ3JlZ2F0b3I7XG5cdH0oKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gQWdncmVnYXRvcjtcblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGZjdHMtZXh0LWRhdGFhZ2dyZWdhdG9yLWVzNS5taW4uanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCAzY2EyOWNiZGNmNDEzZDYyNjVmZCIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IEFnZ3JlZ2F0b3IgPSByZXF1aXJlKCcuL2ZjdHMtZXh0LWFnZ3JlZ2F0b3InKTtcblxuOyhmdW5jdGlvbiAoZW52LCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZW52LmRvY3VtZW50XG4gICAgICAgPyBmYWN0b3J5KGVudikgOiBmdW5jdGlvbiAod2luKSB7XG4gICAgICAgICBpZiAoIXdpbi5kb2N1bWVudCkge1xuICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpbmRvdyB3aXRoIGRvY3VtZW50IG5vdCBwcmVzZW50Jyk7XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gZmFjdG9yeSh3aW4sIHRydWUpO1xuICAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZW52LkFnZ3JlZ2F0b3IgPSBmYWN0b3J5KGVudiwgdHJ1ZSk7XG4gIH1cbn0pKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gKF93aW5kb3csIHdpbmRvd0V4aXN0cykge1xuICB2YXIgRkMgPSBfd2luZG93LkZ1c2lvbkNoYXJ0cztcblxuICBGQy5yZWdpc3RlcignZXh0ZW5zaW9uJywgWydkYXRhLWFnZ3JlZ2F0b3InLCBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZ2xvYmFsID0gdGhpcztcbiAgICB2YXIgZXh0QVBJID0gZ2xvYmFsLmV4dEFQSTtcbiAgICBjb25zb2xlLmxvZyhpZCk7XG5cbiAgICAvLyB2YXIgb3RoZXJBUEkgPSBGdXNpb25DaGFydHMuZ2V0RXh0Q29tcG9uZW50KGlkLCAnYXBpJywgJ2xlZ2FjeWV4dGFwaScpO1xuICAgIC8vIHZhciB0b29sQm94QXBpID0gRnVzaW9uQ2hhcnRzLmdldENvbXBvbmVudCgnYXBpJywgJ3Rvb2xib3gnKTtcblxuICAgIHdpbmRvdy5BZ2dyZWdhdG9yID0gbmV3IEFnZ3JlZ2F0b3IoKTtcblxuICAgIGV4dEFQSSh3aW5kb3cuQWdncmVnYXRvcik7XG4gIH1dKTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBEYXRhIEFnZ3JlZ2F0b3IuXG4gKi9cbmNsYXNzIEFnZ3JlZ2F0b3Ige1xuICAvKipcbiAgICogQ3JlYXRlIGEgQWdncmVnYXRvci5cbiAgICogQHR5cGVkZWYge29iamVjdH0gQWdncmVnYXRvci5hZ2dyZWdhdGlvblxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gdGltZVBlcmlvZCAtIFRoZSB0aW1lIGludGVydmFsIG9mIGFnZ3JlZ2F0aW9uLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gdGltZVBlcmlvZE11bHRpcGxpZXIgLSBUaGUgbXVsdGlwbGllciBvZiB0aW1lIGludGVydmFsLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gYWdncmVnYXRpb25NZXRob2QgLSBUaGUgbWV0aG9kIGFwcGxpZWQgdG8gYWdncmVnYXRlLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5hcHBsaWVkQWdncmVnYXRpb24gPSB7XG4gICAgICB0aW1lUGVyaW9kOiBudWxsLFxuICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXI6IDEsXG4gICAgICBhZ2dyZWdhdGlvbk1ldGhvZDogbnVsbFxuICAgIH07XG4gICAgdGhpcy5jb25maWcgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSB0aW1lUGVyaW9kLCB0aW1lUGVyaW9kTXVsdGlwbGllciwgYWdncmVnYXRpb25NZXRob2QuXG4gICAqIEB0eXBlIHtBZ2dyZWdhdG9yLmFnZ3JlZ2F0aW9ufVxuICAgKi9cbiAgZ2V0IGFnZ3JlZ2F0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBsaWVkQWdncmVnYXRpb247XG4gIH1cblxuICBzZXQgYWdncmVnYXRpb24gKG9iaikge1xuICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLnRpbWVQZXJpb2QgPSBvYmoudGltZVBlcmlvZDtcbiAgICB0aGlzLmFwcGxpZWRBZ2dyZWdhdGlvbi50aW1lUGVyaW9kTXVsdGlwbGllciA9IG9iai50aW1lUGVyaW9kTXVsdGlwbGllcjtcbiAgICB0aGlzLmFwcGxpZWRBZ2dyZWdhdGlvbi5hZ2dyZWdhdGlvbk1ldGhvZCA9IG9iai5hZ2dyZWdhdGlvbk1ldGhvZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGF2YWlsYWJsZSBhZ2dyZWdhdGlvbiBvcHRpb25zIGluIGNvbmZpZ3VyYXRpb24gb2YgZXh0ZW5zaW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRBdmFpbGFibGVsQWdncmVhZ2F0aW9uICgpIHtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICBjaGFydCA9IHRoaXMuY2hhcnQsXG4gICAgICBhdmxUaW1lUGVyaW9kcyxcbiAgICAgIGksXG4gICAgICBsZW47XG5cbiAgICBjb25maWcuYXZsQWdnTWV0aG9kcyA9IGNoYXJ0LmdldEF2YWlsYWJsZUFnZ3JlZ2F0aW9uTWV0aG9kKCk7XG4gICAgYXZsVGltZVBlcmlvZHMgPSBjb25maWcuYXZsVGltZVBlcmlvZHMgPSBjaGFydC5nZXRBdmFpbGFibGVUaW1lUGVyaW9kKCk7XG5cbiAgICBjb25maWcuYXZsVGltZU11bHRpcGxpZXIgPSBbXTtcbiAgICBsZW4gPSBhdmxUaW1lUGVyaW9kcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbmZpZy5hdmxUaW1lTXVsdGlwbGllci5wdXNoKGF2bFRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB2YWxpZCBhZ2dyZWdhdGlvbiB0aW1lIHBlcmlvZHMgYW5kIGNvcnJlc3BvbmRpbmcgbXVsdGlwbGllcnNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFZhbGlkQWdncmVnYXRpb24gKCkge1xuICAgIHZhciBjaGFydENvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnLFxuICAgICAgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICB4QXhpcyA9IHRoaXMueCxcbiAgICAgIGksXG4gICAgICBqLFxuICAgICAgbGVuMSxcbiAgICAgIGxlbjIsXG4gICAgICBhdmxUaW1lUGVyaW9kcyxcbiAgICAgIGF2bFRpbWVNdWx0aXBsaWVyLFxuICAgICAgbWluTnVtT2ZQbG90ID0gY2hhcnRDb25maWcubWluTnVtT2ZQbG90LFxuICAgICAgbWF4TnVtT2ZQbG90ID0gY2hhcnRDb25maWcubWF4TnVtT2ZQbG90LFxuICAgICAgbXVsdGlwbGllcnNBcnIsXG4gICAgICBjdXJyZW50VGltZUxlbmd0aCxcbiAgICAgIHRpbWVQZXJpb2QsXG4gICAgICB0aW1lLFxuICAgICAgZXhwZWN0ZWRUaW1lLFxuICAgICAgbXVsdGlwbGllcixcbiAgICAgIG1pblRpbWUsXG4gICAgICBtYXhUaW1lLFxuICAgICAgY3VycmVudFZpc2libGVSYW5nZTtcblxuICAgIGNvbmZpZy5jdXJyZW50VmlzaWJsZVJhbmdlID0gY3VycmVudFZpc2libGVSYW5nZSA9IHhBeGlzLmdldEN1cnJlbnRWaXNpYmxlUmFuZ2UoKTtcbiAgICBjb25maWcuY3VycmVudFRpbWVMZW5ndGggPSBjdXJyZW50VmlzaWJsZVJhbmdlLmVuZERhdGUgLSBjdXJyZW50VmlzaWJsZVJhbmdlLnN0YXJ0RGF0ZTtcblxuICAgIGF2bFRpbWVQZXJpb2RzID0gY29uZmlnLmF2bFRpbWVQZXJpb2RzO1xuICAgIGF2bFRpbWVNdWx0aXBsaWVyID0gY29uZmlnLmF2bFRpbWVNdWx0aXBsaWVyO1xuICAgIGN1cnJlbnRUaW1lTGVuZ3RoID0gY29uZmlnLmN1cnJlbnRUaW1lTGVuZ3RoO1xuXG4gICAgY29uZmlnLm1pblRpbWUgPSBtaW5UaW1lID0gY3VycmVudFRpbWVMZW5ndGggLyBtYXhOdW1PZlBsb3Q7XG4gICAgY29uZmlnLm1heFRpbWUgPSBtYXhUaW1lID0gY3VycmVudFRpbWVMZW5ndGggLyBtaW5OdW1PZlBsb3Q7XG5cbiAgICBjb25maWcudmFsaWRUaW1lUGVyaW9kID0gW107XG4gICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIgPSBbXTtcblxuICAgIGZvciAoaSA9IDAsIGxlbjEgPSBhdmxUaW1lUGVyaW9kcy5sZW5ndGg7IGkgPCBsZW4xOyBpKyspIHtcbiAgICAgIHRpbWVQZXJpb2QgPSBPYmplY3Qua2V5cyhhdmxUaW1lUGVyaW9kc1tpXSlbMF07XG4gICAgICB0aW1lID0gYXZsVGltZVBlcmlvZHNbaV1bT2JqZWN0LmtleXMoYXZsVGltZVBlcmlvZHNbaV0pWzBdXTtcbiAgICAgIG11bHRpcGxpZXJzQXJyID0gW107XG5cbiAgICAgIGZvciAoaiA9IDAsIGxlbjIgPSBhdmxUaW1lTXVsdGlwbGllcltpXS5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcbiAgICAgICAgbXVsdGlwbGllciA9IGF2bFRpbWVNdWx0aXBsaWVyW2ldW2pdO1xuICAgICAgICBleHBlY3RlZFRpbWUgPSBtdWx0aXBsaWVyICogdGltZTtcblxuICAgICAgICBpZiAoKGV4cGVjdGVkVGltZSA+PSBtaW5UaW1lKSAmJiAoZXhwZWN0ZWRUaW1lIDw9IG1heFRpbWUpKSB7XG4gICAgICAgICAgbXVsdGlwbGllcnNBcnIucHVzaChhdmxUaW1lTXVsdGlwbGllcltpXVtqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtdWx0aXBsaWVyc0Fyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLnB1c2gobXVsdGlwbGllcnNBcnIpO1xuICAgICAgICBjb25maWcudmFsaWRUaW1lUGVyaW9kLnB1c2godGltZVBlcmlvZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdUaW1lIFBlcmlvZDogJywgY29uZmlnLnZhbGlkVGltZVBlcmlvZCk7XG4gICAgY29uc29sZS5sb2coJ051bWJlciBPZiBNdWx0aXBsaWVyczogJywgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIpO1xuICAgIGNvbnNvbGUubG9nKCdNZXRob2RzOiAnLCBjb25maWcuYXZsQWdnTWV0aG9kcyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IEFnZ3JlZ2F0aW9uIG9uIHRpbWUgc2VyaWVzXG4gICAqIEBwYXJhbSAge29iamVjdH0gb2JqXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aW1lUGVyaW9kIC0gVGhlIHRpbWUgaW50ZXJ2YWwgb2YgYWdncmVnYXRpb24uXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lUGVyaW9kTXVsdGlwbGllciAtIFRoZSBtdWx0aXBsaWVyIG9mIHRpbWUgaW50ZXJ2YWwuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZ2dyZWdhdGlvbk1ldGhvZCAtIFRoZSBtZXRob2QgYXBwbGllZCB0byBhZ2dyZWdhdGUuXG4gICAqL1xuICBzZXRBZ2dyZWdhdGlvbiAob2JqKSB7XG4gICAgdmFyIGF2bEFnZ01ldGhvZHMsXG4gICAgICB2YWxpZFRpbWVQZXJpb2QsXG4gICAgICB0aW1lUGVyaW9kSW5kZXgsXG4gICAgICB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLFxuICAgICAgY29uZmlnID0gdGhpcy5jb25maWc7XG5cbiAgICBhdmxBZ2dNZXRob2RzID0gY29uZmlnLmF2bEFnZ01ldGhvZHM7XG4gICAgdmFsaWRUaW1lUGVyaW9kID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZDtcbiAgICB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXI7XG5cbiAgICBpZiAoYXZsQWdnTWV0aG9kcy5pbmNsdWRlcyhvYmouYWdncmVnYXRpb25NZXRob2QpICYmIHZhbGlkVGltZVBlcmlvZC5pbmNsdWRlcyhvYmoudGltZVBlcmlvZCkpIHtcbiAgICAgIHRpbWVQZXJpb2RJbmRleCA9IHZhbGlkVGltZVBlcmlvZC5pbmRleE9mKG9iai50aW1lUGVyaW9kKTtcbiAgICAgIGlmICh2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW3RpbWVQZXJpb2RJbmRleF0uaW5jbHVkZXMoTnVtYmVyKG9iai50aW1lUGVyaW9kTXVsdGlwbGllcikpKSB7XG4gICAgICAgIHRoaXMuYWdncmVnYXRpb24gPSBvYmo7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuYWdncmVnYXRpb24pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuYWdncmVnYXRpb24pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuYWdncmVnYXRpb24pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBBcHBsaWVkIEFnZ3JlZ2F0aW9uXG4gICAqL1xuICByZXNldEFnZ3JlZ2F0aW9uICgpIHtcblxuICB9XG5cbiAgaW5pdCAocmVxdWlyZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHJlcXVpcmUoJ1gtQXhpcycsICdjaGFydCcsIGZ1bmN0aW9uICh4LCBjaGFydCkge1xuICAgICAgc2VsZi54ID0geDtcbiAgICAgIHNlbGYuY2hhcnQgPSBjaGFydDtcbiAgICB9KTtcblxuICAgIHRoaXMuZ2V0QXZhaWxhYmxlbEFnZ3JlYWdhdGlvbigpO1xuICAgIHRoaXMuZ2V0VmFsaWRBZ2dyZWdhdGlvbigpO1xuICB9XG5cbiAgcGxhY2VJbkNhbnZhcyAoKSB7XG4gICAgLy8gc3BhY2UgbWFuYWdlbWVudFxuICB9XG5cbiAgZHJhdyAoKSB7XG4gICAgLy8gdmFyIG11bHRpcGxpZXJGbGQsXG4gICAgLy8gICB0aW1lUGVyaW9kRmxkLFxuICAgIC8vICAgQWdnTWV0aG9kRmxkLFxuICAgIC8vICAgLy8gY2hhcnQgPSB0aGlzLmNoYXJ0LFxuICAgIC8vICAgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgLy8gICAvLyBjdXJyZW50QWdncmVnYXRpb24sXG4gICAgLy8gICBsYWJlbCxcbiAgICAvLyAgIG1haW5Db250ID0gJCgnI21haW5Db250JyksXG4gICAgLy8gICB2YWxpZFRpbWVQZXJpb2QgPSBjb25maWcudmFsaWRUaW1lUGVyaW9kLFxuICAgIC8vICAgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciA9IGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLFxuICAgIC8vICAgaW5kZXhPZlRpbWVVbml0LFxuICAgIC8vICAgYXZsQWdnTWV0aG9kcyA9IGNvbmZpZy5hdmxBZ2dNZXRob2RzLFxuICAgIC8vICAgdGltZVBlcmlvZE9uQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgIC8vICAgICB2YXIgdGltZVBlcmlvZFZhbCA9ICQoJyN0aW1lX3BlcmlvZCcpLnZhbCgpLFxuICAgIC8vICAgICAgIHRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsID0gJCgnI211bCcpLnZhbCgpLFxuICAgIC8vICAgICAgIGluZGV4T2ZUaW1lVW5pdCxcbiAgICAvLyAgICAgICBpbmRleE9mVGltZU11bDtcblxuICAgIC8vICAgICBpbmRleE9mVGltZVVuaXQgPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZih0aW1lUGVyaW9kVmFsKTtcbiAgICAvLyAgICAgaW5kZXhPZlRpbWVNdWwgPSB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW2luZGV4T2ZUaW1lVW5pdF0uaW5kZXhPZihOdW1iZXIodGltZVBlcmlvZE11bHRpcGxpZXJWYWwpKTtcblxuICAgIC8vICAgICAkKCcjbXVsJykuZW1wdHkoKTtcbiAgICAvLyAgICAgY29uc29sZS5sb2coaW5kZXhPZlRpbWVVbml0LCBpbmRleE9mVGltZU11bCk7XG5cbiAgICAvLyAgICAgZm9yICh2YXIgbXVsVmFsIG9mIHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XSkge1xuICAgIC8vICAgICAgICQoJzxvcHRpb24gLz4nLCB7dGV4dDogbXVsVmFsfSkuYXBwZW5kVG8obXVsdGlwbGllckZsZCk7XG4gICAgLy8gICAgIH1cblxuICAgIC8vICAgICBpZiAoaW5kZXhPZlRpbWVNdWwgPCAwKSB7XG4gICAgLy8gICAgICAgJCgnI211bCcpLnZhbCh2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW2luZGV4T2ZUaW1lVW5pdF1bMF0pO1xuICAgIC8vICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgICQoJyNtdWwnKS52YWwodGltZVBlcmlvZE11bHRpcGxpZXJWYWwpO1xuICAgIC8vICAgICB9XG4gICAgLy8gICB9O1xuXG4gICAgLy8gLy8gY3VycmVudEFnZ3JlZ2F0aW9uID0gY2hhcnQuZ2V0QWdncmVnYXRpb24oKTtcblxuICAgIC8vIGlmIChtYWluQ29udC5sZW5ndGggPT09IDApIHtcbiAgICAvLyAgIHJldHVybjtcbiAgICAvLyB9XG5cbiAgICAvLyBtYWluQ29udC5lbXB0eSgpO1xuXG4gICAgLy8gbGFiZWwgPSAkKCc8bGFiZWw+JykudGV4dCgnQWdncmVnYXRlIERhdGE6ICcpO1xuICAgIC8vIGxhYmVsLmFwcGVuZFRvKG1haW5Db250KTtcblxuICAgIC8vIG11bHRpcGxpZXJGbGQgPSAkKCc8c2VsZWN0IGlkPVwibXVsXCIvPicpO1xuICAgIC8vIHRpbWVQZXJpb2RGbGQgPSAkKCc8c2VsZWN0IGlkPVwidGltZV9wZXJpb2RcIi8+Jyk7XG4gICAgLy8gQWdnTWV0aG9kRmxkID0gJCgnPHNlbGVjdCBpZD1cImFnZ19tZXRob2RcIi8+Jyk7XG5cbiAgICAvLyBmb3IgKHZhciB1bml0VmFsIG9mIHZhbGlkVGltZVBlcmlvZCkge1xuICAgIC8vICAgJCgnPG9wdGlvbiAvPicsIHt0ZXh0OiB1bml0VmFsfSkuYXBwZW5kVG8odGltZVBlcmlvZEZsZCk7XG4gICAgLy8gfVxuXG4gICAgLy8gaW5kZXhPZlRpbWVVbml0ID0gdmFsaWRUaW1lUGVyaW9kLmluZGV4T2YodmFsaWRUaW1lUGVyaW9kWzBdKTtcblxuICAgIC8vIGlmIChpbmRleE9mVGltZVVuaXQgPj0gMCkge1xuICAgIC8vICAgZm9yICh2YXIgbXVsVmFsIG9mIHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XSkge1xuICAgIC8vICAgICAkKCc8b3B0aW9uIC8+Jywge3RleHQ6IG11bFZhbH0pLmFwcGVuZFRvKG11bHRpcGxpZXJGbGQpO1xuICAgIC8vICAgfVxuICAgIC8vIH1cblxuICAgIC8vIGZvciAodmFyIGFnZ1ZhbCBvZiBhdmxBZ2dNZXRob2RzKSB7XG4gICAgLy8gICAkKCc8b3B0aW9uIC8+Jywge3RleHQ6IGFnZ1ZhbH0pLmFwcGVuZFRvKEFnZ01ldGhvZEZsZCk7XG4gICAgLy8gfVxuXG4gICAgLy8gbXVsdGlwbGllckZsZC5hcHBlbmRUbyhtYWluQ29udCk7XG4gICAgLy8gLy8gJCgnI211bCcpLnZhbChjdXJyZW50QWdncmVnYXRpb24udGltZVBlcmlvZE11bHRpcGxpZXIpO1xuICAgIC8vIHRpbWVQZXJpb2RGbGQuYXBwZW5kVG8obWFpbkNvbnQpO1xuICAgIC8vIC8vICQoJyN0aW1lX3BlcmlvZCcpLnZhbChjdXJyZW50QWdncmVnYXRpb24udGltZVBlcmlvZCk7XG4gICAgLy8gQWdnTWV0aG9kRmxkLmFwcGVuZFRvKG1haW5Db250KTtcbiAgICAvLyAvLyAkKCcjYWdnX21ldGhvZCcpLnZhbChjdXJyZW50QWdncmVnYXRpb24uYWdncmVnYXRpb25NZXRob2QpO1xuXG4gICAgLy8gJCgnPGJ1dHRvbi8+JykudGV4dCgnQXBwbHknKS5hcHBlbmRUbyhtYWluQ29udCk7XG4gICAgLy8gJCgnPGJ1dHRvbi8+JykudGV4dCgnUmVzZXQnKS5hcHBlbmRUbyhtYWluQ29udCk7XG5cbiAgICAvLyAkKCcjdGltZV9wZXJpb2QnKS5jaGFuZ2UodGltZVBlcmlvZE9uQ2hhbmdlKTtcbiAgfVxuXG4gIHJhbmdlQ2hhbmdlQ2FsbGJhY2sgKCkge1xuICAgIHRoaXMuZ2V0VmFsaWRBZ2dyZWdhdGlvbigpO1xuICAgIHRoaXMuZHJhdygpO1xuICB9XG5cbiAgZGlzcG9zZSAoKSB7XG4gICAgLy8gZGlzcG9zZSBleHRlbnNpb25cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFnZ3JlZ2F0b3I7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZmN0cy1leHQtYWdncmVnYXRvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=