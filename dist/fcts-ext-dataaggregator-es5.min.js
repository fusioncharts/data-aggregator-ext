!function(e){function i(n){if(t[n])return t[n].exports;var r=t[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}var t={};return i.m=e,i.c=t,i.p="",i(0)}([function(e,i,t){"use strict";var n=t(1),r=t(2);r.register("extension",["data-aggregator",function(e){var i=this,t=i.extAPI;console.log(e),t(new n)}])},function(e,i){(function(i){"use strict";function t(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}var n=function(){function e(e,i){for(var t=0;t<i.length;t++){var n=i[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(i,t,n){return t&&e(i.prototype,t),n&&e(i,n),i}}(),r=function(){function e(){t(this,e),this.appliedAggregation={timePeriod:null,timePeriodMultiplier:1,aggregationMethod:null},this.config={}}return n(e,[{key:"getTimeMultiplier",value:function(){}},{key:"getAvailablelAggreagation",value:function(){var e,t,n,r,o=this.config,a=i.x,l=i.chart;e=l.getAvailableAggregationMethod(),t=t=l.getAvailableTimePeriod(),n=a.getCurrentVisibleRange(),r=n.endDate-n.startDate,o.avlTimePeriods=t,o.avlAggMethods=e,o.currentTimeLength=r}},{key:"getValidTimeMultiplier",value:function(){var e,t,n,r,o,a=this.config,l=i.x,g=l.max-l.min,u=a.avlTimePeriods,s=function(e){return Array.from({length:e},function(e,i){return i+1})};for(a.avlTimeMultiplier=[],t=u.length,e=0;e<t;e++)n=u[e],r=u[e+1],o=r?r[Object.keys(r)[0]]/n[Object.keys(n)[0]]:g/n[Object.keys(n)[0]],a.avlTimeMultiplier.push(s(o))}},{key:"getValidAggregation",value:function(){var e,t,n,r,o,a,l,g,u,s,c,d,f,h,m=i.chart.config,v=this.config,p=m.minNumOfPlot,P=m.minPlotWidth,A=m.canvasWidth,y=function(e){return Array.from({length:e},function(e,i){return i+1})};for(o=v.avlTimePeriods,a=v.avlTimeMultiplier,l=v.currentTimeLength,v.minTime=f=l/A*P,v.maxTime=h=l/p,v.validTimePeriod=[],v.validTimePeriodMultiplier=[],e=0,n=o.length;e<n;e++){for(g=Object.keys(o[e])[0],u=o[e][Object.keys(o[e])[0]],d=0,t=0,r=a[e].length;t<r;t++)c=a[e][t],s=c*u,s>=f&&s<=h&&d++;d&&(v.validTimePeriodMultiplier.push(y(d)),v.validTimePeriod.push(g))}console.log(v.validTimePeriod,v.validTimePeriodMultiplier,v.avlAggMethods)}},{key:"setAggregation",value:function(e){var i,t,n,r,o=this.config;return this.getValidAggregation(),i=o.avlAggMethods,t=o.validTimePeriod,r=o.validTimePeriodMultiplier,i.includes(e.aggregationMethod)&&t.includes(e.timePeriod)?(n=t.indexOf(e.timePeriod),r[n].includes(e.timePeriodMultiplier)?(this.aggregation=e,console.log(this.aggregation),!0):(console.log(this.aggregation),!1)):(console.log(this.aggregation),!1)}},{key:"resetAggregation",value:function(){}},{key:"init",value:function(e){e("X-Axis","chart",function(e,t){i.x=e,i.chart=t}),this.getAvailablelAggreagation(),this.getValidTimeMultiplier()}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}},{key:"aggregation",get:function(){return this.appliedAggregation},set:function(e){this.appliedAggregation.timePeriod=e.timePeriod,this.appliedAggregation.timePeriodMultiplier=e.timePeriodMultiplier,this.appliedAggregation.aggregationMethod=e.aggregationMethod}}]),e}();e.exports=r}).call(i,function(){return this}())},function(e,i){"use strict";var t=function(){};t.register=function(e,i){var t=i[0],n=i[1];console.log("Currently active extension: "+t),n.bind(this,565)()},t.getComponent=function(e,i){var t={x:24,y:56,width:100,height:20,index:4};return"api"===e&&"toolbox"===i?t:null},t.extAPI=function(e){e.init(function(){for(var e=[],i=arguments[arguments.length-1],t=function(){return["sum","average","custom"]},n=function(){return[{x:"100"},{y:"200"},{z:"1000"}]},r=function(){return{startDate:0,endDate:1e3}},o=0;o<arguments.length-1;o++)"X-Axis"===arguments[o]?e.push({getCurrentVisibleRange:r,min:0,max:2e3}):"chart"===arguments[o]&&e.push({getAvailableAggregationMethod:t,getAvailableTimePeriod:n,config:{minNumOfPlot:5,minPlotWidth:3,canvasWidth:1e3}});i.apply(this,e)}),e.placeInCanvas(),e.draw(),e.dispose(),e.setAggregation({timePeriod:"x",timePeriodMultiplier:2,aggregationMethod:"sum"})},e.exports=t}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,