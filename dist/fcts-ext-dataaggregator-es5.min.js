!function(e){function i(r){if(t[r])return t[r].exports;var o=t[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,i),o.loaded=!0,o.exports}var t={};return i.m=e,i.c=t,i.p="",i(0)}([function(e,i,t){"use strict";var r=t(1);!function(e){e(FusionCharts)}(function(e){e.register("extension",["data-aggregator",function(e){var i=this,t=i.extAPI;console.log(e),window.Aggregator=new r,t(window.Aggregator)}])})},function(e,i){"use strict";function t(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,i){for(var t=0;t<i.length;t++){var r=i[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(i,t,r){return t&&e(i.prototype,t),r&&e(i,r),i}}(),o=function(){function e(){t(this,e),this.appliedAggregation={timePeriod:null,timePeriodMultiplier:1,aggregationMethod:null},this.config={}}return r(e,[{key:"getAvailablelAggreagation",value:function(){var e,i,t,r=this.config,o=this.chart;for(r.avlAggMethods=o.getAvailableAggregationMethod(),e=r.avlTimePeriods=o.getAvailableTimePeriod(),r.avlTimeMultiplier=[],t=e.length,i=0;i<t;i++)r.avlTimeMultiplier.push(e[i].multipliers)}},{key:"getValidAggregation",value:function(){var e,i,t,r,o,n,a,l,g,u,d,s,c,p,v,f=this.chart.config,h=this.config,m=this.x,y=f.minNumOfPlot,T=f.maxNumOfPlot;for(h.currentVisibleRange=v=m.getCurrentVisibleRange(),h.currentTimeLength=v.endDate-v.startDate,o=h.avlTimePeriods,n=h.avlTimeMultiplier,l=h.currentTimeLength,h.minTime=c=l/T,h.maxTime=p=l/y,h.validTimePeriod=[],h.validTimePeriodMultiplier=[],e=0,t=o.length;e<t;e++){for(g=Object.keys(o[e])[0],u=o[e][Object.keys(o[e])[0]],a=[],i=0,r=n[e].length;i<r;i++)s=n[e][i],d=s*u,d>=c&&d<=p&&a.push(n[e][i]);a.length>0&&(h.validTimePeriodMultiplier.push(a),h.validTimePeriod.push(g))}console.log("Time Period: ",h.validTimePeriod),console.log("Number Of Multipliers: ",h.validTimePeriodMultiplier),console.log("Methods: ",h.avlAggMethods)}},{key:"setAggregation",value:function(e){var i,t,r,o,n=this.config;return i=n.avlAggMethods,t=n.validTimePeriod,o=n.validTimePeriodMultiplier,i.includes(e.aggregationMethod)&&t.includes(e.timePeriod)?(r=t.indexOf(e.timePeriod),o[r].includes(e.timePeriodMultiplier)?(this.aggregation=e,console.log(this.aggregation),!0):(console.log(this.aggregation),!1)):(console.log(this.aggregation),!1)}},{key:"resetAggregation",value:function(){}},{key:"init",value:function(e){var i=this;e("X-Axis","chart",function(e,t){i.x=e,i.chart=t}),this.getAvailablelAggreagation(),this.getValidAggregation()}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){var e,i,t,r,o,n=this.config,a=$("#mainCont"),l=n.validTimePeriod,g=n.validTimePeriodMultiplier,u=n.avlAggMethods,d=function(){var i,t,r=$("#time_period").val(),o=$("#mul").val();i=l.indexOf(r),t=g[i].indexOf(Number(o)),$("#mul").empty(),console.log(i,t);var n=!0,a=!1,u=void 0;try{for(var d,s=g[i][Symbol.iterator]();!(n=(d=s.next()).done);n=!0){var c=d.value;$("<option />",{text:c}).appendTo(e)}}catch(e){a=!0,u=e}finally{try{!n&&s.return&&s.return()}finally{if(a)throw u}}t<0?$("#mul").val(g[i][0]):$("#mul").val(o)};if(0!==a.length){a.empty(),r=$("<label>").text("Aggregate Data: "),r.appendTo(a),e=$('<select id="mul"/>'),i=$('<select id="time_period"/>'),t=$('<select id="agg_method"/>');var s=!0,c=!1,p=void 0;try{for(var v,f=l[Symbol.iterator]();!(s=(v=f.next()).done);s=!0){var h=v.value;$("<option />",{text:h}).appendTo(i)}}catch(e){c=!0,p=e}finally{try{!s&&f.return&&f.return()}finally{if(c)throw p}}if(o=l.indexOf(l[0]),o>=0){var m=!0,y=!1,T=void 0;try{for(var x,A=g[o][Symbol.iterator]();!(m=(x=A.next()).done);m=!0){var P=x.value;$("<option />",{text:P}).appendTo(e)}}catch(e){y=!0,T=e}finally{try{!m&&A.return&&A.return()}finally{if(y)throw T}}}var b=!0,M=!1,k=void 0;try{for(var w,O=u[Symbol.iterator]();!(b=(w=O.next()).done);b=!0){var C=w.value;$("<option />",{text:C}).appendTo(t)}}catch(e){M=!0,k=e}finally{try{!b&&O.return&&O.return()}finally{if(M)throw k}}e.appendTo(a),i.appendTo(a),t.appendTo(a),$("<button/>").text("Apply").appendTo(a),$("<button/>").text("Reset").appendTo(a),$("#time_period").change(d)}}},{key:"rangeChangeCallback",value:function(){this.getValidAggregation(),this.draw()}},{key:"dispose",value:function(){}},{key:"aggregation",get:function(){return this.appliedAggregation},set:function(e){this.appliedAggregation.timePeriod=e.timePeriod,this.appliedAggregation.timePeriodMultiplier=e.timePeriodMultiplier,this.appliedAggregation.aggregationMethod=e.aggregationMethod}}]),e}();e.exports=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZmN0cy1leHQtZGF0YWFnZ3JlZ2F0b3ItZXM1Lm1pbi5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMTFmN2UwNzRjYzA4MDI4ZDgxMjkiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mY3RzLWV4dC1hZ2dyZWdhdG9yLmpzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIkFnZ3JlZ2F0b3IiLCJmYWN0b3J5IiwiRnVzaW9uQ2hhcnRzIiwiRkMiLCJyZWdpc3RlciIsImdsb2JhbCIsInRoaXMiLCJleHRBUEkiLCJjb25zb2xlIiwibG9nIiwid2luZG93IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJhcHBsaWVkQWdncmVnYXRpb24iLCJ0aW1lUGVyaW9kIiwidGltZVBlcmlvZE11bHRpcGxpZXIiLCJhZ2dyZWdhdGlvbk1ldGhvZCIsImNvbmZpZyIsInZhbHVlIiwiYXZsVGltZVBlcmlvZHMiLCJsZW4iLCJjaGFydCIsImF2bEFnZ01ldGhvZHMiLCJnZXRBdmFpbGFibGVBZ2dyZWdhdGlvbk1ldGhvZCIsImdldEF2YWlsYWJsZVRpbWVQZXJpb2QiLCJhdmxUaW1lTXVsdGlwbGllciIsInB1c2giLCJtdWx0aXBsaWVycyIsImoiLCJsZW4xIiwibGVuMiIsIm11bHRpcGxpZXJzQXJyIiwiY3VycmVudFRpbWVMZW5ndGgiLCJ0aW1lIiwiZXhwZWN0ZWRUaW1lIiwibXVsdGlwbGllciIsIm1pblRpbWUiLCJtYXhUaW1lIiwiY3VycmVudFZpc2libGVSYW5nZSIsImNoYXJ0Q29uZmlnIiwieEF4aXMiLCJ4IiwibWluTnVtT2ZQbG90IiwibWF4TnVtT2ZQbG90IiwiZ2V0Q3VycmVudFZpc2libGVSYW5nZSIsImVuZERhdGUiLCJzdGFydERhdGUiLCJ2YWxpZFRpbWVQZXJpb2QiLCJ2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyIiwia2V5cyIsIm9iaiIsInRpbWVQZXJpb2RJbmRleCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsImFnZ3JlZ2F0aW9uIiwicmVxdWlyZSIsInNlbGYiLCJnZXRBdmFpbGFibGVsQWdncmVhZ2F0aW9uIiwiZ2V0VmFsaWRBZ2dyZWdhdGlvbiIsIm11bHRpcGxpZXJGbGQiLCJ0aW1lUGVyaW9kRmxkIiwiQWdnTWV0aG9kRmxkIiwibGFiZWwiLCJpbmRleE9mVGltZVVuaXQiLCJtYWluQ29udCIsIiQiLCJ0aW1lUGVyaW9kT25DaGFuZ2UiLCJpbmRleE9mVGltZU11bCIsInRpbWVQZXJpb2RWYWwiLCJ2YWwiLCJ0aW1lUGVyaW9kTXVsdGlwbGllclZhbCIsIk51bWJlciIsImVtcHR5IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJ1bmRlZmluZWQiLCJfc3RlcCIsIl9pdGVyYXRvciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJtdWxWYWwiLCJ0ZXh0IiwiYXBwZW5kVG8iLCJlcnIiLCJyZXR1cm4iLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJ1bml0VmFsIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMiLCJfZGlkSXRlcmF0b3JFcnJvcjMiLCJfaXRlcmF0b3JFcnJvcjMiLCJfc3RlcDMiLCJfaXRlcmF0b3IzIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQiLCJfZGlkSXRlcmF0b3JFcnJvcjQiLCJfaXRlcmF0b3JFcnJvcjQiLCJfc3RlcDQiLCJfaXRlcmF0b3I0IiwiYWdnVmFsIiwiY2hhbmdlIiwiZHJhdyIsImdldCIsInNldCJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUUsV0FDQUUsR0FBQUosRUFDQUssUUFBQSxFQVVBLE9BTkFQLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLFFBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0FxQ0EsT0FUQUYsR0FBQVEsRUFBQVQsRUFHQUMsRUFBQVMsRUFBQVAsRUFHQUYsRUFBQVUsRUFBQSxHQUdBVixFQUFBLEtETU0sU0FBU0ksRUFBUUQsRUFBU0gsR0U1Q2hDLFlBQ0EsSUFBTVcsR0FBYVgsRUFBUSxJQUUxQixTQUFXWSxHQUNWQSxFQUFRQyxlQUNQLFNBQVVDLEdBQ1hBLEVBQUdDLFNBQVMsYUFBYyxrQkFBbUIsU0FBVVYsR0FDckQsR0FBSVcsR0FBU0MsS0FDVEMsRUFBU0YsRUFBT0UsTUFDcEJDLFNBQVFDLElBQUlmLEdBS1pnQixPQUFPVixXQUFhLEdBQUlBLEdBRXhCTyxFQUFPRyxPQUFPVixrQkZxRFosU0FBU1AsRUFBUUQsR0dyRXZCLFlIOEVDLFNBQVNtQixHQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQUZoSCxHQUFJQyxHQUFlLFdBQWMsUUFBU0MsR0FBaUJDLEVBQVFDLEdBQVMsSUFBSyxHQUFJQyxHQUFJLEVBQUdBLEVBQUlELEVBQU1FLE9BQVFELElBQUss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ImZjdHMtZXh0LWRhdGFhZ2dyZWdhdG9yLWVzNS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBBZ2dyZWdhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdDsoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0ICBmYWN0b3J5KEZ1c2lvbkNoYXJ0cyk7XG5cdH0pKGZ1bmN0aW9uIChGQykge1xuXHQgIEZDLnJlZ2lzdGVyKCdleHRlbnNpb24nLCBbJ2RhdGEtYWdncmVnYXRvcicsIGZ1bmN0aW9uIChpZCkge1xuXHQgICAgdmFyIGdsb2JhbCA9IHRoaXM7XG5cdCAgICB2YXIgZXh0QVBJID0gZ2xvYmFsLmV4dEFQSTtcblx0ICAgIGNvbnNvbGUubG9nKGlkKTtcblx0XG5cdCAgICAvLyB2YXIgb3RoZXJBUEkgPSBGdXNpb25DaGFydHMuZ2V0RXh0Q29tcG9uZW50KGlkLCAnYXBpJywgJ2xlZ2FjeWV4dGFwaScpO1xuXHQgICAgLy8gdmFyIHRvb2xCb3hBcGkgPSBGdXNpb25DaGFydHMuZ2V0Q29tcG9uZW50KCdhcGknLCAndG9vbGJveCcpO1xuXHRcblx0ICAgIHdpbmRvdy5BZ2dyZWdhdG9yID0gbmV3IEFnZ3JlZ2F0b3IoKTtcblx0XG5cdCAgICBleHRBUEkod2luZG93LkFnZ3JlZ2F0b3IpO1xuXHQgIH1dKTtcblx0fSk7XG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQgKiBDbGFzcyByZXByZXNlbnRpbmcgdGhlIERhdGEgQWdncmVnYXRvci5cblx0ICovXG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdHZhciBBZ2dyZWdhdG9yID0gZnVuY3Rpb24gKCkge1xuXHQgIC8qKlxuXHQgICAqIENyZWF0ZSBhIEFnZ3JlZ2F0b3IuXG5cdCAgICogQHR5cGVkZWYge29iamVjdH0gQWdncmVnYXRvci5hZ2dyZWdhdGlvblxuXHQgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aW1lUGVyaW9kIC0gVGhlIHRpbWUgaW50ZXJ2YWwgb2YgYWdncmVnYXRpb24uXG5cdCAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVQZXJpb2RNdWx0aXBsaWVyIC0gVGhlIG11bHRpcGxpZXIgb2YgdGltZSBpbnRlcnZhbC5cblx0ICAgKiBAcHJvcGVydHkge3N0cmluZ30gYWdncmVnYXRpb25NZXRob2QgLSBUaGUgbWV0aG9kIGFwcGxpZWQgdG8gYWdncmVnYXRlLlxuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIEFnZ3JlZ2F0b3IoKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWdncmVnYXRvcik7XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICB0aGlzLmFwcGxpZWRBZ2dyZWdhdGlvbiA9IHtcblx0ICAgICAgdGltZVBlcmlvZDogbnVsbCxcblx0ICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXI6IDEsXG5cdCAgICAgIGFnZ3JlZ2F0aW9uTWV0aG9kOiBudWxsXG5cdCAgICB9O1xuXHQgICAgdGhpcy5jb25maWcgPSB7fTtcblx0ICB9XG5cdFxuXHQgIC8qKlxuXHQgICAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHRpbWVQZXJpb2QsIHRpbWVQZXJpb2RNdWx0aXBsaWVyLCBhZ2dyZWdhdGlvbk1ldGhvZC5cblx0ICAgKiBAdHlwZSB7QWdncmVnYXRvci5hZ2dyZWdhdGlvbn1cblx0ICAgKi9cblx0XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhBZ2dyZWdhdG9yLCBbe1xuXHQgICAga2V5OiAnZ2V0QXZhaWxhYmxlbEFnZ3JlYWdhdGlvbicsXG5cdFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogU2V0cyBhdmFpbGFibGUgYWdncmVnYXRpb24gb3B0aW9ucyBpbiBjb25maWd1cmF0aW9uIG9mIGV4dGVuc2lvblxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF2YWlsYWJsZWxBZ2dyZWFnYXRpb24oKSB7XG5cdCAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZyxcblx0ICAgICAgICAgIGNoYXJ0ID0gdGhpcy5jaGFydCxcblx0ICAgICAgICAgIGF2bFRpbWVQZXJpb2RzLFxuXHQgICAgICAgICAgaSxcblx0ICAgICAgICAgIGxlbjtcblx0XG5cdCAgICAgIGNvbmZpZy5hdmxBZ2dNZXRob2RzID0gY2hhcnQuZ2V0QXZhaWxhYmxlQWdncmVnYXRpb25NZXRob2QoKTtcblx0ICAgICAgYXZsVGltZVBlcmlvZHMgPSBjb25maWcuYXZsVGltZVBlcmlvZHMgPSBjaGFydC5nZXRBdmFpbGFibGVUaW1lUGVyaW9kKCk7XG5cdFxuXHQgICAgICBjb25maWcuYXZsVGltZU11bHRpcGxpZXIgPSBbXTtcblx0ICAgICAgbGVuID0gYXZsVGltZVBlcmlvZHMubGVuZ3RoO1xuXHRcblx0ICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgY29uZmlnLmF2bFRpbWVNdWx0aXBsaWVyLnB1c2goYXZsVGltZVBlcmlvZHNbaV0ubXVsdGlwbGllcnMpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBDYWxjdWxhdGVzIHZhbGlkIGFnZ3JlZ2F0aW9uIHRpbWUgcGVyaW9kcyBhbmQgY29ycmVzcG9uZGluZyBtdWx0aXBsaWVyc1xuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHRcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRWYWxpZEFnZ3JlZ2F0aW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWYWxpZEFnZ3JlZ2F0aW9uKCkge1xuXHQgICAgICB2YXIgY2hhcnRDb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZyxcblx0ICAgICAgICAgIGNvbmZpZyA9IHRoaXMuY29uZmlnLFxuXHQgICAgICAgICAgeEF4aXMgPSB0aGlzLngsXG5cdCAgICAgICAgICBpLFxuXHQgICAgICAgICAgaixcblx0ICAgICAgICAgIGxlbjEsXG5cdCAgICAgICAgICBsZW4yLFxuXHQgICAgICAgICAgYXZsVGltZVBlcmlvZHMsXG5cdCAgICAgICAgICBhdmxUaW1lTXVsdGlwbGllcixcblx0ICAgICAgICAgIG1pbk51bU9mUGxvdCA9IGNoYXJ0Q29uZmlnLm1pbk51bU9mUGxvdCxcblx0ICAgICAgICAgIG1heE51bU9mUGxvdCA9IGNoYXJ0Q29uZmlnLm1heE51bU9mUGxvdCxcblx0ICAgICAgICAgIG11bHRpcGxpZXJzQXJyLFxuXHQgICAgICAgICAgY3VycmVudFRpbWVMZW5ndGgsXG5cdCAgICAgICAgICB0aW1lUGVyaW9kLFxuXHQgICAgICAgICAgdGltZSxcblx0ICAgICAgICAgIGV4cGVjdGVkVGltZSxcblx0ICAgICAgICAgIG11bHRpcGxpZXIsXG5cdCAgICAgICAgICBtaW5UaW1lLFxuXHQgICAgICAgICAgbWF4VGltZSxcblx0ICAgICAgICAgIGN1cnJlbnRWaXNpYmxlUmFuZ2U7XG5cdFxuXHQgICAgICBjb25maWcuY3VycmVudFZpc2libGVSYW5nZSA9IGN1cnJlbnRWaXNpYmxlUmFuZ2UgPSB4QXhpcy5nZXRDdXJyZW50VmlzaWJsZVJhbmdlKCk7XG5cdCAgICAgIGNvbmZpZy5jdXJyZW50VGltZUxlbmd0aCA9IGN1cnJlbnRWaXNpYmxlUmFuZ2UuZW5kRGF0ZSAtIGN1cnJlbnRWaXNpYmxlUmFuZ2Uuc3RhcnREYXRlO1xuXHRcblx0ICAgICAgYXZsVGltZVBlcmlvZHMgPSBjb25maWcuYXZsVGltZVBlcmlvZHM7XG5cdCAgICAgIGF2bFRpbWVNdWx0aXBsaWVyID0gY29uZmlnLmF2bFRpbWVNdWx0aXBsaWVyO1xuXHQgICAgICBjdXJyZW50VGltZUxlbmd0aCA9IGNvbmZpZy5jdXJyZW50VGltZUxlbmd0aDtcblx0XG5cdCAgICAgIGNvbmZpZy5taW5UaW1lID0gbWluVGltZSA9IGN1cnJlbnRUaW1lTGVuZ3RoIC8gbWF4TnVtT2ZQbG90O1xuXHQgICAgICBjb25maWcubWF4VGltZSA9IG1heFRpbWUgPSBjdXJyZW50VGltZUxlbmd0aCAvIG1pbk51bU9mUGxvdDtcblx0XG5cdCAgICAgIGNvbmZpZy52YWxpZFRpbWVQZXJpb2QgPSBbXTtcblx0ICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIgPSBbXTtcblx0XG5cdCAgICAgIGZvciAoaSA9IDAsIGxlbjEgPSBhdmxUaW1lUGVyaW9kcy5sZW5ndGg7IGkgPCBsZW4xOyBpKyspIHtcblx0ICAgICAgICB0aW1lUGVyaW9kID0gT2JqZWN0LmtleXMoYXZsVGltZVBlcmlvZHNbaV0pWzBdO1xuXHQgICAgICAgIHRpbWUgPSBhdmxUaW1lUGVyaW9kc1tpXVtPYmplY3Qua2V5cyhhdmxUaW1lUGVyaW9kc1tpXSlbMF1dO1xuXHQgICAgICAgIG11bHRpcGxpZXJzQXJyID0gW107XG5cdFxuXHQgICAgICAgIGZvciAoaiA9IDAsIGxlbjIgPSBhdmxUaW1lTXVsdGlwbGllcltpXS5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcblx0ICAgICAgICAgIG11bHRpcGxpZXIgPSBhdmxUaW1lTXVsdGlwbGllcltpXVtqXTtcblx0ICAgICAgICAgIGV4cGVjdGVkVGltZSA9IG11bHRpcGxpZXIgKiB0aW1lO1xuXHRcblx0ICAgICAgICAgIGlmIChleHBlY3RlZFRpbWUgPj0gbWluVGltZSAmJiBleHBlY3RlZFRpbWUgPD0gbWF4VGltZSkge1xuXHQgICAgICAgICAgICBtdWx0aXBsaWVyc0Fyci5wdXNoKGF2bFRpbWVNdWx0aXBsaWVyW2ldW2pdKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKG11bHRpcGxpZXJzQXJyLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgIGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLnB1c2gobXVsdGlwbGllcnNBcnIpO1xuXHQgICAgICAgICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZC5wdXNoKHRpbWVQZXJpb2QpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBjb25zb2xlLmxvZygnVGltZSBQZXJpb2Q6ICcsIGNvbmZpZy52YWxpZFRpbWVQZXJpb2QpO1xuXHQgICAgICBjb25zb2xlLmxvZygnTnVtYmVyIE9mIE11bHRpcGxpZXJzOiAnLCBjb25maWcudmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllcik7XG5cdCAgICAgIGNvbnNvbGUubG9nKCdNZXRob2RzOiAnLCBjb25maWcuYXZsQWdnTWV0aG9kcyk7XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBTZXQgQWdncmVnYXRpb24gb24gdGltZSBzZXJpZXNcblx0ICAgICAqIEBwYXJhbSAge29iamVjdH0gb2JqXG5cdCAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gdGltZVBlcmlvZCAtIFRoZSB0aW1lIGludGVydmFsIG9mIGFnZ3JlZ2F0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVQZXJpb2RNdWx0aXBsaWVyIC0gVGhlIG11bHRpcGxpZXIgb2YgdGltZSBpbnRlcnZhbC5cblx0ICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZ2dyZWdhdGlvbk1ldGhvZCAtIFRoZSBtZXRob2QgYXBwbGllZCB0byBhZ2dyZWdhdGUuXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0QWdncmVnYXRpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFnZ3JlZ2F0aW9uKG9iaikge1xuXHQgICAgICB2YXIgYXZsQWdnTWV0aG9kcyxcblx0ICAgICAgICAgIHZhbGlkVGltZVBlcmlvZCxcblx0ICAgICAgICAgIHRpbWVQZXJpb2RJbmRleCxcblx0ICAgICAgICAgIHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIsXG5cdCAgICAgICAgICBjb25maWcgPSB0aGlzLmNvbmZpZztcblx0XG5cdCAgICAgIGF2bEFnZ01ldGhvZHMgPSBjb25maWcuYXZsQWdnTWV0aG9kcztcblx0ICAgICAgdmFsaWRUaW1lUGVyaW9kID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZDtcblx0ICAgICAgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciA9IGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyO1xuXHRcblx0ICAgICAgaWYgKGF2bEFnZ01ldGhvZHMuaW5jbHVkZXMob2JqLmFnZ3JlZ2F0aW9uTWV0aG9kKSAmJiB2YWxpZFRpbWVQZXJpb2QuaW5jbHVkZXMob2JqLnRpbWVQZXJpb2QpKSB7XG5cdCAgICAgICAgdGltZVBlcmlvZEluZGV4ID0gdmFsaWRUaW1lUGVyaW9kLmluZGV4T2Yob2JqLnRpbWVQZXJpb2QpO1xuXHQgICAgICAgIGlmICh2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW3RpbWVQZXJpb2RJbmRleF0uaW5jbHVkZXMob2JqLnRpbWVQZXJpb2RNdWx0aXBsaWVyKSkge1xuXHQgICAgICAgICAgdGhpcy5hZ2dyZWdhdGlvbiA9IG9iajtcblx0ICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuYWdncmVnYXRpb24pO1xuXHQgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuYWdncmVnYXRpb24pO1xuXHQgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmFnZ3JlZ2F0aW9uKTtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIFJlc2V0IEFwcGxpZWQgQWdncmVnYXRpb25cblx0ICAgICAqL1xuXHRcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZXNldEFnZ3JlZ2F0aW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldEFnZ3JlZ2F0aW9uKCkge31cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpbml0Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KHJlcXVpcmUpIHtcblx0ICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXHRcblx0ICAgICAgcmVxdWlyZSgnWC1BeGlzJywgJ2NoYXJ0JywgZnVuY3Rpb24gKHgsIGNoYXJ0KSB7XG5cdCAgICAgICAgc2VsZi54ID0geDtcblx0ICAgICAgICBzZWxmLmNoYXJ0ID0gY2hhcnQ7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgdGhpcy5nZXRBdmFpbGFibGVsQWdncmVhZ2F0aW9uKCk7XG5cdCAgICAgIHRoaXMuZ2V0VmFsaWRBZ2dyZWdhdGlvbigpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3BsYWNlSW5DYW52YXMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYWNlSW5DYW52YXMoKSB7XG5cdCAgICAgIC8vIHNwYWNlIG1hbmFnZW1lbnRcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkcmF3Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3KCkge1xuXHQgICAgICB2YXIgbXVsdGlwbGllckZsZCxcblx0ICAgICAgICAgIHRpbWVQZXJpb2RGbGQsXG5cdCAgICAgICAgICBBZ2dNZXRob2RGbGQsXG5cdFxuXHQgICAgICAvLyBjaGFydCA9IHRoaXMuY2hhcnQsXG5cdCAgICAgIGNvbmZpZyA9IHRoaXMuY29uZmlnLFxuXHRcblx0ICAgICAgLy8gY3VycmVudEFnZ3JlZ2F0aW9uLFxuXHQgICAgICBsYWJlbCxcblx0ICAgICAgICAgIG1haW5Db250ID0gJCgnI21haW5Db250JyksXG5cdCAgICAgICAgICB2YWxpZFRpbWVQZXJpb2QgPSBjb25maWcudmFsaWRUaW1lUGVyaW9kLFxuXHQgICAgICAgICAgdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllciA9IGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLFxuXHQgICAgICAgICAgaW5kZXhPZlRpbWVVbml0LFxuXHQgICAgICAgICAgYXZsQWdnTWV0aG9kcyA9IGNvbmZpZy5hdmxBZ2dNZXRob2RzLFxuXHQgICAgICAgICAgdGltZVBlcmlvZE9uQ2hhbmdlID0gZnVuY3Rpb24gdGltZVBlcmlvZE9uQ2hhbmdlKCkge1xuXHQgICAgICAgIHZhciB0aW1lUGVyaW9kVmFsID0gJCgnI3RpbWVfcGVyaW9kJykudmFsKCksXG5cdCAgICAgICAgICAgIHRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsID0gJCgnI211bCcpLnZhbCgpLFxuXHQgICAgICAgICAgICBpbmRleE9mVGltZVVuaXQsXG5cdCAgICAgICAgICAgIGluZGV4T2ZUaW1lTXVsO1xuXHRcblx0ICAgICAgICBpbmRleE9mVGltZVVuaXQgPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZih0aW1lUGVyaW9kVmFsKTtcblx0ICAgICAgICBpbmRleE9mVGltZU11bCA9IHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XS5pbmRleE9mKE51bWJlcih0aW1lUGVyaW9kTXVsdGlwbGllclZhbCkpO1xuXHRcblx0ICAgICAgICAkKCcjbXVsJykuZW1wdHkoKTtcblx0ICAgICAgICBjb25zb2xlLmxvZyhpbmRleE9mVGltZVVuaXQsIGluZGV4T2ZUaW1lTXVsKTtcblx0XG5cdCAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuXHQgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblx0XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXJbaW5kZXhPZlRpbWVVbml0XVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcblx0ICAgICAgICAgICAgdmFyIG11bFZhbCA9IF9zdGVwLnZhbHVlO1xuXHRcblx0ICAgICAgICAgICAgJCgnPG9wdGlvbiAvPicsIHsgdGV4dDogbXVsVmFsIH0pLmFwcGVuZFRvKG11bHRpcGxpZXJGbGQpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG5cdCAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0ICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKGluZGV4T2ZUaW1lTXVsIDwgMCkge1xuXHQgICAgICAgICAgJCgnI211bCcpLnZhbCh2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW2luZGV4T2ZUaW1lVW5pdF1bMF0pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAkKCcjbXVsJykudmFsKHRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdFxuXHQgICAgICAvLyBjdXJyZW50QWdncmVnYXRpb24gPSBjaGFydC5nZXRBZ2dyZWdhdGlvbigpO1xuXHRcblx0ICAgICAgaWYgKG1haW5Db250Lmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgbWFpbkNvbnQuZW1wdHkoKTtcblx0XG5cdCAgICAgIGxhYmVsID0gJCgnPGxhYmVsPicpLnRleHQoJ0FnZ3JlZ2F0ZSBEYXRhOiAnKTtcblx0ICAgICAgbGFiZWwuYXBwZW5kVG8obWFpbkNvbnQpO1xuXHRcblx0ICAgICAgbXVsdGlwbGllckZsZCA9ICQoJzxzZWxlY3QgaWQ9XCJtdWxcIi8+Jyk7XG5cdCAgICAgIHRpbWVQZXJpb2RGbGQgPSAkKCc8c2VsZWN0IGlkPVwidGltZV9wZXJpb2RcIi8+Jyk7XG5cdCAgICAgIEFnZ01ldGhvZEZsZCA9ICQoJzxzZWxlY3QgaWQ9XCJhZ2dfbWV0aG9kXCIvPicpO1xuXHRcblx0ICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcblx0ICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuXHQgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gdmFsaWRUaW1lUGVyaW9kW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG5cdCAgICAgICAgICB2YXIgdW5pdFZhbCA9IF9zdGVwMi52YWx1ZTtcblx0XG5cdCAgICAgICAgICAkKCc8b3B0aW9uIC8+JywgeyB0ZXh0OiB1bml0VmFsIH0pLmFwcGVuZFRvKHRpbWVQZXJpb2RGbGQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcblx0ICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcblx0ICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuXHQgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpbmRleE9mVGltZVVuaXQgPSB2YWxpZFRpbWVQZXJpb2QuaW5kZXhPZih2YWxpZFRpbWVQZXJpb2RbMF0pO1xuXHRcblx0ICAgICAgaWYgKGluZGV4T2ZUaW1lVW5pdCA+PSAwKSB7XG5cdCAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblx0XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW2luZGV4T2ZUaW1lVW5pdF1bU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcblx0ICAgICAgICAgICAgdmFyIG11bFZhbCA9IF9zdGVwMy52YWx1ZTtcblx0XG5cdCAgICAgICAgICAgICQoJzxvcHRpb24gLz4nLCB7IHRleHQ6IG11bFZhbCB9KS5hcHBlbmRUbyhtdWx0aXBsaWVyRmxkKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG5cdCAgICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcblx0ICAgICAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG5cdCAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlO1xuXHQgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gZmFsc2U7XG5cdCAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7XG5cdFxuXHQgICAgICB0cnkge1xuXHQgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjQgPSBhdmxBZ2dNZXRob2RzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gKF9zdGVwNCA9IF9pdGVyYXRvcjQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlKSB7XG5cdCAgICAgICAgICB2YXIgYWdnVmFsID0gX3N0ZXA0LnZhbHVlO1xuXHRcblx0ICAgICAgICAgICQoJzxvcHRpb24gLz4nLCB7IHRleHQ6IGFnZ1ZhbCB9KS5hcHBlbmRUbyhBZ2dNZXRob2RGbGQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcblx0ICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcblx0ICAgICAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkge1xuXHQgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBtdWx0aXBsaWVyRmxkLmFwcGVuZFRvKG1haW5Db250KTtcblx0ICAgICAgLy8gJCgnI211bCcpLnZhbChjdXJyZW50QWdncmVnYXRpb24udGltZVBlcmlvZE11bHRpcGxpZXIpO1xuXHQgICAgICB0aW1lUGVyaW9kRmxkLmFwcGVuZFRvKG1haW5Db250KTtcblx0ICAgICAgLy8gJCgnI3RpbWVfcGVyaW9kJykudmFsKGN1cnJlbnRBZ2dyZWdhdGlvbi50aW1lUGVyaW9kKTtcblx0ICAgICAgQWdnTWV0aG9kRmxkLmFwcGVuZFRvKG1haW5Db250KTtcblx0ICAgICAgLy8gJCgnI2FnZ19tZXRob2QnKS52YWwoY3VycmVudEFnZ3JlZ2F0aW9uLmFnZ3JlZ2F0aW9uTWV0aG9kKTtcblx0XG5cdCAgICAgICQoJzxidXR0b24vPicpLnRleHQoJ0FwcGx5JykuYXBwZW5kVG8obWFpbkNvbnQpO1xuXHQgICAgICAkKCc8YnV0dG9uLz4nKS50ZXh0KCdSZXNldCcpLmFwcGVuZFRvKG1haW5Db250KTtcblx0XG5cdCAgICAgICQoJyN0aW1lX3BlcmlvZCcpLmNoYW5nZSh0aW1lUGVyaW9kT25DaGFuZ2UpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JhbmdlQ2hhbmdlQ2FsbGJhY2snLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJhbmdlQ2hhbmdlQ2FsbGJhY2soKSB7XG5cdCAgICAgIHRoaXMuZ2V0VmFsaWRBZ2dyZWdhdGlvbigpO1xuXHQgICAgICB0aGlzLmRyYXcoKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkaXNwb3NlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuXHQgICAgICAvLyBkaXNwb3NlIGV4dGVuc2lvblxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2FnZ3JlZ2F0aW9uJyxcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5hcHBsaWVkQWdncmVnYXRpb247XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQob2JqKSB7XG5cdCAgICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLnRpbWVQZXJpb2QgPSBvYmoudGltZVBlcmlvZDtcblx0ICAgICAgdGhpcy5hcHBsaWVkQWdncmVnYXRpb24udGltZVBlcmlvZE11bHRpcGxpZXIgPSBvYmoudGltZVBlcmlvZE11bHRpcGxpZXI7XG5cdCAgICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLmFnZ3JlZ2F0aW9uTWV0aG9kID0gb2JqLmFnZ3JlZ2F0aW9uTWV0aG9kO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIEFnZ3JlZ2F0b3I7XG5cdH0oKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gQWdncmVnYXRvcjtcblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGZjdHMtZXh0LWRhdGFhZ2dyZWdhdG9yLWVzNS5taW4uanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCAxMWY3ZTA3NGNjMDgwMjhkODEyOSIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IEFnZ3JlZ2F0b3IgPSByZXF1aXJlKCcuL2ZjdHMtZXh0LWFnZ3JlZ2F0b3InKTtcblxuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuICBmYWN0b3J5KEZ1c2lvbkNoYXJ0cyk7XG59KShmdW5jdGlvbiAoRkMpIHtcbiAgRkMucmVnaXN0ZXIoJ2V4dGVuc2lvbicsIFsnZGF0YS1hZ2dyZWdhdG9yJywgZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGdsb2JhbCA9IHRoaXM7XG4gICAgdmFyIGV4dEFQSSA9IGdsb2JhbC5leHRBUEk7XG4gICAgY29uc29sZS5sb2coaWQpO1xuXG4gICAgLy8gdmFyIG90aGVyQVBJID0gRnVzaW9uQ2hhcnRzLmdldEV4dENvbXBvbmVudChpZCwgJ2FwaScsICdsZWdhY3lleHRhcGknKTtcbiAgICAvLyB2YXIgdG9vbEJveEFwaSA9IEZ1c2lvbkNoYXJ0cy5nZXRDb21wb25lbnQoJ2FwaScsICd0b29sYm94Jyk7XG5cbiAgICB3aW5kb3cuQWdncmVnYXRvciA9IG5ldyBBZ2dyZWdhdG9yKCk7XG5cbiAgICBleHRBUEkod2luZG93LkFnZ3JlZ2F0b3IpO1xuICB9XSk7XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBEYXRhIEFnZ3JlZ2F0b3IuXG4gKi9cbmNsYXNzIEFnZ3JlZ2F0b3Ige1xuICAvKipcbiAgICogQ3JlYXRlIGEgQWdncmVnYXRvci5cbiAgICogQHR5cGVkZWYge29iamVjdH0gQWdncmVnYXRvci5hZ2dyZWdhdGlvblxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gdGltZVBlcmlvZCAtIFRoZSB0aW1lIGludGVydmFsIG9mIGFnZ3JlZ2F0aW9uLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gdGltZVBlcmlvZE11bHRpcGxpZXIgLSBUaGUgbXVsdGlwbGllciBvZiB0aW1lIGludGVydmFsLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gYWdncmVnYXRpb25NZXRob2QgLSBUaGUgbWV0aG9kIGFwcGxpZWQgdG8gYWdncmVnYXRlLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5hcHBsaWVkQWdncmVnYXRpb24gPSB7XG4gICAgICB0aW1lUGVyaW9kOiBudWxsLFxuICAgICAgdGltZVBlcmlvZE11bHRpcGxpZXI6IDEsXG4gICAgICBhZ2dyZWdhdGlvbk1ldGhvZDogbnVsbFxuICAgIH07XG4gICAgdGhpcy5jb25maWcgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSB0aW1lUGVyaW9kLCB0aW1lUGVyaW9kTXVsdGlwbGllciwgYWdncmVnYXRpb25NZXRob2QuXG4gICAqIEB0eXBlIHtBZ2dyZWdhdG9yLmFnZ3JlZ2F0aW9ufVxuICAgKi9cbiAgZ2V0IGFnZ3JlZ2F0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBsaWVkQWdncmVnYXRpb247XG4gIH1cblxuICBzZXQgYWdncmVnYXRpb24gKG9iaikge1xuICAgIHRoaXMuYXBwbGllZEFnZ3JlZ2F0aW9uLnRpbWVQZXJpb2QgPSBvYmoudGltZVBlcmlvZDtcbiAgICB0aGlzLmFwcGxpZWRBZ2dyZWdhdGlvbi50aW1lUGVyaW9kTXVsdGlwbGllciA9IG9iai50aW1lUGVyaW9kTXVsdGlwbGllcjtcbiAgICB0aGlzLmFwcGxpZWRBZ2dyZWdhdGlvbi5hZ2dyZWdhdGlvbk1ldGhvZCA9IG9iai5hZ2dyZWdhdGlvbk1ldGhvZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGF2YWlsYWJsZSBhZ2dyZWdhdGlvbiBvcHRpb25zIGluIGNvbmZpZ3VyYXRpb24gb2YgZXh0ZW5zaW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRBdmFpbGFibGVsQWdncmVhZ2F0aW9uICgpIHtcbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICBjaGFydCA9IHRoaXMuY2hhcnQsXG4gICAgICBhdmxUaW1lUGVyaW9kcyxcbiAgICAgIGksXG4gICAgICBsZW47XG5cbiAgICBjb25maWcuYXZsQWdnTWV0aG9kcyA9IGNoYXJ0LmdldEF2YWlsYWJsZUFnZ3JlZ2F0aW9uTWV0aG9kKCk7XG4gICAgYXZsVGltZVBlcmlvZHMgPSBjb25maWcuYXZsVGltZVBlcmlvZHMgPSBjaGFydC5nZXRBdmFpbGFibGVUaW1lUGVyaW9kKCk7XG5cbiAgICBjb25maWcuYXZsVGltZU11bHRpcGxpZXIgPSBbXTtcbiAgICBsZW4gPSBhdmxUaW1lUGVyaW9kcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbmZpZy5hdmxUaW1lTXVsdGlwbGllci5wdXNoKGF2bFRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB2YWxpZCBhZ2dyZWdhdGlvbiB0aW1lIHBlcmlvZHMgYW5kIGNvcnJlc3BvbmRpbmcgbXVsdGlwbGllcnNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFZhbGlkQWdncmVnYXRpb24gKCkge1xuICAgIHZhciBjaGFydENvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnLFxuICAgICAgY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICB4QXhpcyA9IHRoaXMueCxcbiAgICAgIGksXG4gICAgICBqLFxuICAgICAgbGVuMSxcbiAgICAgIGxlbjIsXG4gICAgICBhdmxUaW1lUGVyaW9kcyxcbiAgICAgIGF2bFRpbWVNdWx0aXBsaWVyLFxuICAgICAgbWluTnVtT2ZQbG90ID0gY2hhcnRDb25maWcubWluTnVtT2ZQbG90LFxuICAgICAgbWF4TnVtT2ZQbG90ID0gY2hhcnRDb25maWcubWF4TnVtT2ZQbG90LFxuICAgICAgbXVsdGlwbGllcnNBcnIsXG4gICAgICBjdXJyZW50VGltZUxlbmd0aCxcbiAgICAgIHRpbWVQZXJpb2QsXG4gICAgICB0aW1lLFxuICAgICAgZXhwZWN0ZWRUaW1lLFxuICAgICAgbXVsdGlwbGllcixcbiAgICAgIG1pblRpbWUsXG4gICAgICBtYXhUaW1lLFxuICAgICAgY3VycmVudFZpc2libGVSYW5nZTtcblxuICAgIGNvbmZpZy5jdXJyZW50VmlzaWJsZVJhbmdlID0gY3VycmVudFZpc2libGVSYW5nZSA9IHhBeGlzLmdldEN1cnJlbnRWaXNpYmxlUmFuZ2UoKTtcbiAgICBjb25maWcuY3VycmVudFRpbWVMZW5ndGggPSBjdXJyZW50VmlzaWJsZVJhbmdlLmVuZERhdGUgLSBjdXJyZW50VmlzaWJsZVJhbmdlLnN0YXJ0RGF0ZTtcblxuICAgIGF2bFRpbWVQZXJpb2RzID0gY29uZmlnLmF2bFRpbWVQZXJpb2RzO1xuICAgIGF2bFRpbWVNdWx0aXBsaWVyID0gY29uZmlnLmF2bFRpbWVNdWx0aXBsaWVyO1xuICAgIGN1cnJlbnRUaW1lTGVuZ3RoID0gY29uZmlnLmN1cnJlbnRUaW1lTGVuZ3RoO1xuXG4gICAgY29uZmlnLm1pblRpbWUgPSBtaW5UaW1lID0gY3VycmVudFRpbWVMZW5ndGggLyBtYXhOdW1PZlBsb3Q7XG4gICAgY29uZmlnLm1heFRpbWUgPSBtYXhUaW1lID0gY3VycmVudFRpbWVMZW5ndGggLyBtaW5OdW1PZlBsb3Q7XG5cbiAgICBjb25maWcudmFsaWRUaW1lUGVyaW9kID0gW107XG4gICAgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIgPSBbXTtcblxuICAgIGZvciAoaSA9IDAsIGxlbjEgPSBhdmxUaW1lUGVyaW9kcy5sZW5ndGg7IGkgPCBsZW4xOyBpKyspIHtcbiAgICAgIHRpbWVQZXJpb2QgPSBPYmplY3Qua2V5cyhhdmxUaW1lUGVyaW9kc1tpXSlbMF07XG4gICAgICB0aW1lID0gYXZsVGltZVBlcmlvZHNbaV1bT2JqZWN0LmtleXMoYXZsVGltZVBlcmlvZHNbaV0pWzBdXTtcbiAgICAgIG11bHRpcGxpZXJzQXJyID0gW107XG5cbiAgICAgIGZvciAoaiA9IDAsIGxlbjIgPSBhdmxUaW1lTXVsdGlwbGllcltpXS5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcbiAgICAgICAgbXVsdGlwbGllciA9IGF2bFRpbWVNdWx0aXBsaWVyW2ldW2pdO1xuICAgICAgICBleHBlY3RlZFRpbWUgPSBtdWx0aXBsaWVyICogdGltZTtcblxuICAgICAgICBpZiAoKGV4cGVjdGVkVGltZSA+PSBtaW5UaW1lKSAmJiAoZXhwZWN0ZWRUaW1lIDw9IG1heFRpbWUpKSB7XG4gICAgICAgICAgbXVsdGlwbGllcnNBcnIucHVzaChhdmxUaW1lTXVsdGlwbGllcltpXVtqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtdWx0aXBsaWVyc0Fyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbmZpZy52YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLnB1c2gobXVsdGlwbGllcnNBcnIpO1xuICAgICAgICBjb25maWcudmFsaWRUaW1lUGVyaW9kLnB1c2godGltZVBlcmlvZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdUaW1lIFBlcmlvZDogJywgY29uZmlnLnZhbGlkVGltZVBlcmlvZCk7XG4gICAgY29uc29sZS5sb2coJ051bWJlciBPZiBNdWx0aXBsaWVyczogJywgY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIpO1xuICAgIGNvbnNvbGUubG9nKCdNZXRob2RzOiAnLCBjb25maWcuYXZsQWdnTWV0aG9kcyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IEFnZ3JlZ2F0aW9uIG9uIHRpbWUgc2VyaWVzXG4gICAqIEBwYXJhbSAge29iamVjdH0gb2JqXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aW1lUGVyaW9kIC0gVGhlIHRpbWUgaW50ZXJ2YWwgb2YgYWdncmVnYXRpb24uXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lUGVyaW9kTXVsdGlwbGllciAtIFRoZSBtdWx0aXBsaWVyIG9mIHRpbWUgaW50ZXJ2YWwuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZ2dyZWdhdGlvbk1ldGhvZCAtIFRoZSBtZXRob2QgYXBwbGllZCB0byBhZ2dyZWdhdGUuXG4gICAqL1xuICBzZXRBZ2dyZWdhdGlvbiAob2JqKSB7XG4gICAgdmFyIGF2bEFnZ01ldGhvZHMsXG4gICAgICB2YWxpZFRpbWVQZXJpb2QsXG4gICAgICB0aW1lUGVyaW9kSW5kZXgsXG4gICAgICB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyLFxuICAgICAgY29uZmlnID0gdGhpcy5jb25maWc7XG5cbiAgICBhdmxBZ2dNZXRob2RzID0gY29uZmlnLmF2bEFnZ01ldGhvZHM7XG4gICAgdmFsaWRUaW1lUGVyaW9kID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZDtcbiAgICB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXI7XG5cbiAgICBpZiAoYXZsQWdnTWV0aG9kcy5pbmNsdWRlcyhvYmouYWdncmVnYXRpb25NZXRob2QpICYmIHZhbGlkVGltZVBlcmlvZC5pbmNsdWRlcyhvYmoudGltZVBlcmlvZCkpIHtcbiAgICAgIHRpbWVQZXJpb2RJbmRleCA9IHZhbGlkVGltZVBlcmlvZC5pbmRleE9mKG9iai50aW1lUGVyaW9kKTtcbiAgICAgIGlmICh2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW3RpbWVQZXJpb2RJbmRleF0uaW5jbHVkZXMob2JqLnRpbWVQZXJpb2RNdWx0aXBsaWVyKSkge1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0aW9uID0gb2JqO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmFnZ3JlZ2F0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmFnZ3JlZ2F0aW9uKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmFnZ3JlZ2F0aW9uKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgQXBwbGllZCBBZ2dyZWdhdGlvblxuICAgKi9cbiAgcmVzZXRBZ2dyZWdhdGlvbiAoKSB7XG5cbiAgfVxuXG4gIGluaXQgKHJlcXVpcmUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICByZXF1aXJlKCdYLUF4aXMnLCAnY2hhcnQnLCBmdW5jdGlvbiAoeCwgY2hhcnQpIHtcbiAgICAgIHNlbGYueCA9IHg7XG4gICAgICBzZWxmLmNoYXJ0ID0gY2hhcnQ7XG4gICAgfSk7XG5cbiAgICB0aGlzLmdldEF2YWlsYWJsZWxBZ2dyZWFnYXRpb24oKTtcbiAgICB0aGlzLmdldFZhbGlkQWdncmVnYXRpb24oKTtcbiAgfVxuXG4gIHBsYWNlSW5DYW52YXMgKCkge1xuICAgIC8vIHNwYWNlIG1hbmFnZW1lbnRcbiAgfVxuXG4gIGRyYXcgKCkge1xuICAgIHZhciBtdWx0aXBsaWVyRmxkLFxuICAgICAgdGltZVBlcmlvZEZsZCxcbiAgICAgIEFnZ01ldGhvZEZsZCxcbiAgICAgIC8vIGNoYXJ0ID0gdGhpcy5jaGFydCxcbiAgICAgIGNvbmZpZyA9IHRoaXMuY29uZmlnLFxuICAgICAgLy8gY3VycmVudEFnZ3JlZ2F0aW9uLFxuICAgICAgbGFiZWwsXG4gICAgICBtYWluQ29udCA9ICQoJyNtYWluQ29udCcpLFxuICAgICAgdmFsaWRUaW1lUGVyaW9kID0gY29uZmlnLnZhbGlkVGltZVBlcmlvZCxcbiAgICAgIHZhbGlkVGltZVBlcmlvZE11bHRpcGxpZXIgPSBjb25maWcudmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllcixcbiAgICAgIGluZGV4T2ZUaW1lVW5pdCxcbiAgICAgIGF2bEFnZ01ldGhvZHMgPSBjb25maWcuYXZsQWdnTWV0aG9kcyxcbiAgICAgIHRpbWVQZXJpb2RPbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRpbWVQZXJpb2RWYWwgPSAkKCcjdGltZV9wZXJpb2QnKS52YWwoKSxcbiAgICAgICAgICB0aW1lUGVyaW9kTXVsdGlwbGllclZhbCA9ICQoJyNtdWwnKS52YWwoKSxcbiAgICAgICAgICBpbmRleE9mVGltZVVuaXQsXG4gICAgICAgICAgaW5kZXhPZlRpbWVNdWw7XG5cbiAgICAgICAgaW5kZXhPZlRpbWVVbml0ID0gdmFsaWRUaW1lUGVyaW9kLmluZGV4T2YodGltZVBlcmlvZFZhbCk7XG4gICAgICAgIGluZGV4T2ZUaW1lTXVsID0gdmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllcltpbmRleE9mVGltZVVuaXRdLmluZGV4T2YoTnVtYmVyKHRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsKSk7XG5cbiAgICAgICAgJCgnI211bCcpLmVtcHR5KCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGluZGV4T2ZUaW1lVW5pdCwgaW5kZXhPZlRpbWVNdWwpO1xuXG4gICAgICAgIGZvciAodmFyIG11bFZhbCBvZiB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW2luZGV4T2ZUaW1lVW5pdF0pIHtcbiAgICAgICAgICAkKCc8b3B0aW9uIC8+Jywge3RleHQ6IG11bFZhbH0pLmFwcGVuZFRvKG11bHRpcGxpZXJGbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4T2ZUaW1lTXVsIDwgMCkge1xuICAgICAgICAgICQoJyNtdWwnKS52YWwodmFsaWRUaW1lUGVyaW9kTXVsdGlwbGllcltpbmRleE9mVGltZVVuaXRdWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKCcjbXVsJykudmFsKHRpbWVQZXJpb2RNdWx0aXBsaWVyVmFsKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgIC8vIGN1cnJlbnRBZ2dyZWdhdGlvbiA9IGNoYXJ0LmdldEFnZ3JlZ2F0aW9uKCk7XG5cbiAgICBpZiAobWFpbkNvbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbWFpbkNvbnQuZW1wdHkoKTtcblxuICAgIGxhYmVsID0gJCgnPGxhYmVsPicpLnRleHQoJ0FnZ3JlZ2F0ZSBEYXRhOiAnKTtcbiAgICBsYWJlbC5hcHBlbmRUbyhtYWluQ29udCk7XG5cbiAgICBtdWx0aXBsaWVyRmxkID0gJCgnPHNlbGVjdCBpZD1cIm11bFwiLz4nKTtcbiAgICB0aW1lUGVyaW9kRmxkID0gJCgnPHNlbGVjdCBpZD1cInRpbWVfcGVyaW9kXCIvPicpO1xuICAgIEFnZ01ldGhvZEZsZCA9ICQoJzxzZWxlY3QgaWQ9XCJhZ2dfbWV0aG9kXCIvPicpO1xuXG4gICAgZm9yICh2YXIgdW5pdFZhbCBvZiB2YWxpZFRpbWVQZXJpb2QpIHtcbiAgICAgICQoJzxvcHRpb24gLz4nLCB7dGV4dDogdW5pdFZhbH0pLmFwcGVuZFRvKHRpbWVQZXJpb2RGbGQpO1xuICAgIH1cblxuICAgIGluZGV4T2ZUaW1lVW5pdCA9IHZhbGlkVGltZVBlcmlvZC5pbmRleE9mKHZhbGlkVGltZVBlcmlvZFswXSk7XG5cbiAgICBpZiAoaW5kZXhPZlRpbWVVbml0ID49IDApIHtcbiAgICAgIGZvciAodmFyIG11bFZhbCBvZiB2YWxpZFRpbWVQZXJpb2RNdWx0aXBsaWVyW2luZGV4T2ZUaW1lVW5pdF0pIHtcbiAgICAgICAgJCgnPG9wdGlvbiAvPicsIHt0ZXh0OiBtdWxWYWx9KS5hcHBlbmRUbyhtdWx0aXBsaWVyRmxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBhZ2dWYWwgb2YgYXZsQWdnTWV0aG9kcykge1xuICAgICAgJCgnPG9wdGlvbiAvPicsIHt0ZXh0OiBhZ2dWYWx9KS5hcHBlbmRUbyhBZ2dNZXRob2RGbGQpO1xuICAgIH1cblxuICAgIG11bHRpcGxpZXJGbGQuYXBwZW5kVG8obWFpbkNvbnQpO1xuICAgIC8vICQoJyNtdWwnKS52YWwoY3VycmVudEFnZ3JlZ2F0aW9uLnRpbWVQZXJpb2RNdWx0aXBsaWVyKTtcbiAgICB0aW1lUGVyaW9kRmxkLmFwcGVuZFRvKG1haW5Db250KTtcbiAgICAvLyAkKCcjdGltZV9wZXJpb2QnKS52YWwoY3VycmVudEFnZ3JlZ2F0aW9uLnRpbWVQZXJpb2QpO1xuICAgIEFnZ01ldGhvZEZsZC5hcHBlbmRUbyhtYWluQ29udCk7XG4gICAgLy8gJCgnI2FnZ19tZXRob2QnKS52YWwoY3VycmVudEFnZ3JlZ2F0aW9uLmFnZ3JlZ2F0aW9uTWV0aG9kKTtcblxuICAgICQoJzxidXR0b24vPicpLnRleHQoJ0FwcGx5JykuYXBwZW5kVG8obWFpbkNvbnQpO1xuICAgICQoJzxidXR0b24vPicpLnRleHQoJ1Jlc2V0JykuYXBwZW5kVG8obWFpbkNvbnQpO1xuXG4gICAgJCgnI3RpbWVfcGVyaW9kJykuY2hhbmdlKHRpbWVQZXJpb2RPbkNoYW5nZSk7XG4gIH1cblxuICByYW5nZUNoYW5nZUNhbGxiYWNrICgpIHtcbiAgICB0aGlzLmdldFZhbGlkQWdncmVnYXRpb24oKTtcbiAgICB0aGlzLmRyYXcoKTtcbiAgfVxuXG4gIGRpc3Bvc2UgKCkge1xuICAgIC8vIGRpc3Bvc2UgZXh0ZW5zaW9uXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBZ2dyZWdhdG9yO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2ZjdHMtZXh0LWFnZ3JlZ2F0b3IuanMiXSwic291cmNlUm9vdCI6IiJ9