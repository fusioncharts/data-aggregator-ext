!function(e){function i(n){if(t[n])return t[n].exports;var r=t[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}var t={};return i.m=e,i.c=t,i.p="",i(0)}([function(e,i,t){"use strict";var n=t(1);!function(e){e(FusionCharts)}(function(e){e.register("extension",["data-aggregator",function(e){var i=this,t=i.extAPI;console.log(e),window.Aggregator=new n,t(window.Aggregator)}])})},function(e,i){(function(i){"use strict";function t(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}var n=function(){function e(e,i){for(var t=0;t<i.length;t++){var n=i[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(i,t,n){return t&&e(i.prototype,t),n&&e(i,n),i}}(),r=function(){function e(){t(this,e),this.appliedAggregation={timePeriod:null,timePeriodMultiplier:1,aggregationMethod:null},this.config={}}return n(e,[{key:"getTimeMultiplier",value:function(){}},{key:"getAvailablelAggreagation",value:function(){var e,t,n,r,o=this.config,a=i.x,l=i.chart;e=l.getAvailableAggregationMethod(),t=t=l.getAvailableTimePeriod(),n=a.getCurrentVisibleRange(),r=n.endDate-n.startDate,o.avlTimePeriods=t,o.avlAggMethods=e,o.currentTimeLength=r}},{key:"getValidTimeMultiplier",value:function(){var e,t,n,r,o,a=this.config,l=i.x,g=l.max-l.min,u=a.avlTimePeriods,c=function(e){return Array.from({length:e},function(e,i){return i+1})};for(a.avlTimeMultiplier=[],t=u.length,e=0;e<t;e++)n=u[e],r=u[e+1],o=r?r[Object.keys(r)[0]]/n[Object.keys(n)[0]]:g/n[Object.keys(n)[0]],a.avlTimeMultiplier.push(c(o))}},{key:"getValidAggregation",value:function(){var e,t,n,r,o,a,l,g,u,c,s,d,f,h,v=i.chart.config,m=this.config,p=v.minNumOfPlot,A=v.minPlotWidth,P=v.canvasWidth,T=function(e){return Array.from({length:e},function(e,i){return i+1})};for(o=m.avlTimePeriods,a=m.avlTimeMultiplier,l=m.currentTimeLength,m.minTime=f=l/P*A,m.maxTime=h=l/p,m.validTimePeriod=[],m.validTimePeriodMultiplier=[],e=0,n=o.length;e<n;e++){for(g=Object.keys(o[e])[0],u=o[e][Object.keys(o[e])[0]],d=0,t=0,r=a[e].length;t<r;t++)s=a[e][t],c=s*u,c>=f&&c<=h&&d++;d&&(m.validTimePeriodMultiplier.push(T(d)),m.validTimePeriod.push(g))}console.log(m.validTimePeriod,m.validTimePeriodMultiplier,m.avlAggMethods)}},{key:"setAggregation",value:function(e){var i,t,n,r,o=this.config;return this.getValidAggregation(),i=o.avlAggMethods,t=o.validTimePeriod,r=o.validTimePeriodMultiplier,i.includes(e.aggregationMethod)&&t.includes(e.timePeriod)?(n=t.indexOf(e.timePeriod),r[n].includes(e.timePeriodMultiplier)?(this.aggregation=e,console.log(this.aggregation,!0),!0):(console.log(this.aggregation,!1),!1)):(console.log(this.aggregation,!1),!1)}},{key:"resetAggregation",value:function(){}},{key:"init",value:function(e){e("X-Axis","chart",function(e,t){i.x=e,i.chart=t}),this.getAvailablelAggreagation(),this.getValidTimeMultiplier()}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}},{key:"aggregation",get:function(){return this.appliedAggregation},set:function(e){this.appliedAggregation.timePeriod=e.timePeriod,this.appliedAggregation.timePeriodMultiplier=e.timePeriodMultiplier,this.appliedAggregation.aggregationMethod=e.aggregationMethod}}]),e}();e.exports=r}).call(i,function(){return this}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,