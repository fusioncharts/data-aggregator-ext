(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false };modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports;}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0);})([function(module,exports,__webpack_require__){module.exports=__webpack_require__(1);},function(module,exports,__webpack_require__){'use strict';const Aggregator=__webpack_require__(2);const FusionCharts=__webpack_require__(3);FusionCharts.register('extension',['data-aggregator',function(id){var global=this;var extAPI=global.extAPI;console.log(id);extAPI(new Aggregator())}]);},function(module,exports){(function(global){'use strict';class Aggregator{constructor(){this.appliedAggregation={timePeriod:null,timePeriodMultiplier:1,aggregationMethod:null};this.config={}}get aggregation(){return this.appliedAggregation}set aggregation(obj){this.appliedAggregation.timePeriod=obj.timePeriod;this.appliedAggregation.timePeriodMultiplier=obj.timePeriodMultiplier;this.appliedAggregation.aggregationMethod=obj.aggregationMethod}getTimeMultiplier(){}getAvailablelAggreagation(){var config=this.config,avlAggMethods,avlTimePeriods,currentVisibleRange,currentTimeLength,xAxis=global.x,chart=global.chart;avlAggMethods=chart.getAvailableAggregationMethod();avlTimePeriods=avlTimePeriods=chart.getAvailableTimePeriod();currentVisibleRange=xAxis.getCurrentVisibleRange();currentTimeLength=currentVisibleRange.endDate-currentVisibleRange.startDate;config.avlTimePeriods=avlTimePeriods;config.avlAggMethods=avlAggMethods;config.currentTimeLength=currentTimeLength}getValidTimeMultiplier(){var config=this.config,xAxis=global.x,i,len,currTimePeriod,nextTimePeriod,numOfMultiplier,currentTimeLength=xAxis.max-xAxis.min,avlTimePeriods=config.avlTimePeriods,getMultiplierArray=num=>Array.from({length:num},(v,k)=>k+1);config.avlTimeMultiplier=[];len=avlTimePeriods.length;for(i=0;i<len;i+=1){currTimePeriod=avlTimePeriods[i];nextTimePeriod=avlTimePeriods[(i+1)];if(nextTimePeriod){numOfMultiplier=nextTimePeriod[Object.keys(nextTimePeriod)[0]]/currTimePeriod[Object.keys(currTimePeriod)[0]]}else{numOfMultiplier=currentTimeLength/currTimePeriod[Object.keys(currTimePeriod)[0]]}config.avlTimeMultiplier.push(getMultiplierArray(numOfMultiplier))}}getValidAggregation(){var chartConfig=global.chart.config,config=this.config,i,j,len1,len2,avlTimePeriods,avlTimeMultiplier,minNumOfPlot=chartConfig.minNumOfPlot,minPlotWidth=chartConfig.minPlotWidth,canvasWidth=chartConfig.canvasWidth,currentTimeLength,timePeriod,time,expectedTime,multiplier,multiplierCounter,getMultiplierArray=num=>Array.from({length:num},(v,k)=>k+1),minTime,maxTime;avlTimePeriods=config.avlTimePeriods;avlTimeMultiplier=config.avlTimeMultiplier;currentTimeLength=config.currentTimeLength;config.minTime=minTime=(currentTimeLength/canvasWidth)*minPlotWidth;config.maxTime=maxTime=currentTimeLength/minNumOfPlot;config.validTimePeriod=[];config.validTimePeriodMultiplier=[];for(i=0,len1=avlTimePeriods.length;i<len1;i+=1){timePeriod=Object.keys(avlTimePeriods[i])[0];time=avlTimePeriods[i][Object.keys(avlTimePeriods[i])[0]];multiplierCounter=0;for(j=0,len2=avlTimeMultiplier[i].length;j<len2;j+=1){multiplier=avlTimeMultiplier[i][j];expectedTime=multiplier*time;if((expectedTime>=minTime)&&(expectedTime<=maxTime)){multiplierCounter+=1}}if(multiplierCounter){config.validTimePeriodMultiplier.push(getMultiplierArray(multiplierCounter));config.validTimePeriod.push(timePeriod)}}console.log(config.validTimePeriod,config.validTimePeriodMultiplier,config.avlAggMethods)}setAggregation(obj){var avlAggMethods,validTimePeriod,timePeriodIndex,validTimePeriodMultiplier,config=this.config;this.getValidAggregation();avlAggMethods=config.avlAggMethods;validTimePeriod=config.validTimePeriod;validTimePeriodMultiplier=config.validTimePeriodMultiplier;if(avlAggMethods.includes(obj.aggregationMethod)&&validTimePeriod.includes(obj.timePeriod)){timePeriodIndex=validTimePeriod.indexOf(obj.timePeriod);if(validTimePeriodMultiplier[timePeriodIndex].includes(obj.timePeriodMultiplier)){this.aggregation=obj;console.log(this.aggregation);return true}else{console.log(this.aggregation);return false}}else{console.log(this.aggregation);return false}}resetAggregation(){}init(require){require('X-Axis','chart',function(x,chart){global.x=x;global.chart=chart});this.getAvailablelAggreagation();this.getValidTimeMultiplier()}placeInCanvas(){}draw(){}dispose(){}}module.exports=Aggregator;}.call(exports,(function(){return this}())));},function(module,exports){'use strict';var FusionCharts=function(){};FusionCharts.register=function(ext,arr){var extName=arr[0];var fn=arr[1];console.log('Currently active extension: '+extName);fn.bind(this,565)()};FusionCharts.getComponent=function(componentType,componentName){var toolBox={x:24,y:56,width:100,height:20,index:4};if(componentType==='api'&&componentName==='toolbox'){return toolBox}return null};FusionCharts.extAPI=function(obj){obj.init(function(){var argsToApply=[];var cb=arguments[arguments.length-1];var getAvailableAggregationMethod=function(){return['sum','average','custom']};var getAvailableTimePeriod=function(){return[{'x':'100'},{'y':'200'},{'z':'1000'}]};var getCurrentVisibleRange=function(){return{startDate:0,endDate:1000}};for(var i=0;i<arguments.length-1;i+=1){if(arguments[i]==='X-Axis'){argsToApply.push({getCurrentVisibleRange:getCurrentVisibleRange,min:0,max:2000})}else if(arguments[i]==='chart'){argsToApply.push({getAvailableAggregationMethod:getAvailableAggregationMethod,getAvailableTimePeriod:getAvailableTimePeriod,config:{minNumOfPlot:5,minPlotWidth:3,canvasWidth:1000}})}}cb.apply(this,argsToApply)});obj.placeInCanvas();obj.draw();obj.dispose();obj.setAggregation({timePeriod:'x',timePeriodMultiplier:2,aggregationMethod:'sum'})};module.exports=FusionCharts;}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,